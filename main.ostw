import "customGameSettings.json";

globalvar define gamemode;
globalvar define is_hard_mode_enabled;
globalvar define Special_Thanks;
globalvar define wave_number;
globalvar define enable_normal_spawns;
globalvar define special_spawns_count;
globalvar define tier_4_spawns_block_end_t;
globalvar define last_spawn_phase_end_t;
globalvar define upgrade_count;
globalvar define boss_list_1;
globalvar define boss_list_2;
globalvar define objective_phase_number;
globalvar define objective_progress;
globalvar define enable_objective_enemy_spawn;
globalvar define iv_dom_objective_pos;
globalvar define iv_dom_objective_all_pos_list;
globalvar define hvt_dom_objective_killed_count;
globalvar define hvt_call_reinforcements_end_t;
globalvar define dom_point_A_contesters;
globalvar define dom_point_B_contesters;
globalvar define is_infrasight_on;
globalvar Player combatants;
globalvar define combatants_count;
globalvar define progress_bar_strings;
globalvar define game_or_mutator_start_huds;
globalvar define is_load_limit_reached;
globalvar define is_waiting_to_remove_bot;
globalvar define temp_1;
globalvar define temp_2;
globalvar define player_spawn_pos;
globalvar define player_spawn_facing;
globalvar define ability_shop_pos;
globalvar define buy_menu_left_up_forward;
globalvar define buy_menu_cam_pos;
globalvar define buy_menu_base_pos;
globalvar define spawn_pos_list;
globalvar define spawn_nearest_node_idx_list;
globalvar define nodes;
globalvar define nodes_count;
globalvar define edges;
globalvar define distance_matrix;
globalvar define elevator_nodes;
globalvar define is_map_cg;
globalvar define char_string;
globalvar define aim_offset;
globalvar define is_victory_declared;
globalvar define is_mutator_activation_disabled;
globalvar define is_mutator_mode_enabled;
globalvar define money_amount;
globalvar define money_mult;
globalvar define diff_health_mult;
globalvar define diff_damage_mult;
globalvar define current_perks;
globalvar define current_perks_huds_list;
globalvar define mutators_list;
globalvar define is_gmut_enabled;
globalvar define gmut_storm_raging;
globalvar define gmut_sympathy_gains;
globalvar define gmut_adaptive_shield;
globalvar define gmut_fortified;
globalvar define mut_amped;
globalvar define mut_hardwired;
globalvar define mut_promotion;
globalvar define mut_advanced_medkit;
globalvar define mut_lock_n_load;
globalvar define mut_emp_rounds;
globalvar define mut_heartburn;
globalvar define mut_deep_wounds;
globalvar define mut_gear_upgrade;
globalvar define mut_reinforcements;
globalvar define mut_mutation;
globalvar define mut_expendable;
globalvar define mut_swan_song;
globalvar define mut_fully_loaded;
globalvar define mut_bulletproof;
globalvar define gmut_list;
globalvar define is_apocalyptic;
globalvar define mut_count;
globalvar define i;
globalvar define mut_artful_dodger;
globalvar define mut_counterstrike;
globalvar define mut_yakuza;
globalvar define gmut_salvation;
globalvar define mut_low_blow;
globalvar define gazed___;
globalvar define length;

playervar define ab_player;
playervar define ab_var_1;
playervar define ab_var_2;
playervar define ab_var_3;
playervar define ab_wraith_pos;
playervar define sombra_stealth_timer;
playervar define last_damage_taken_t;
playervar define is_combatant;
playervar define is_controller_player;
playervar define mercy_res_button;
playervar define downed_start_t;
playervar define revivers;
playervar define revive_timer;
playervar define is_revive_slow;
playervar define tased_end_t;
playervar define is_flying;
playervar define is_invisible;
playervar define spectated_player;
playervar define death_cam_target;
playervar define is_changing_heroes;
playervar define in_buy_menu_start_t;
playervar define is_showing_active_abilities;
playervar define can_use_drop_in_buy_menu;
playervar define money_spent_amount;
playervar define is_pathfinding_disabled;
playervar define is_using_combat_pathfinding;
playervar define combat_pathfinding_type;
playervar define nav_pos;
playervar define nav_idx;
playervar define best_nav_idx;
playervar define dom_nav_guard_idx;
playervar define is_nav_reachable_node;
playervar define last_nav_update_t;
playervar define last_time_at_node_t;
playervar define real_speed_pos_1;
playervar define real_speed_pos_2;
playervar define last_jump_t;
playervar define real_speed;
playervar define eye_offset;
playervar define facing_override_direction;
playervar define is_wraith;
playervar define is_ranged;
playervar define can_dodge;
playervar define can_stagger;
playervar define can_quick_melee;
playervar define recall_block_end_t;
playervar define is_target_in_los;
playervar define target;
playervar define target_last_seen_pos;
playervar define is_ignoring_other_targets;
playervar define base_tier;
playervar define real_tier;
playervar define is_alive;
playervar define is_living_boss;
playervar define iv_is_portal;
playervar define aggression_health_threshold;
playervar define is_using_boss_aggression;
playervar define is_aggressive;
playervar define is_fortified;
playervar define fear_end_t;
playervar define is_hardwired;
playervar define soldier_espionage;
playervar define is_mutated;
playervar define is_expendable;
playervar define gmut_var;
playervar define gmut_fortified_bypass_end_t;
playervar define last_hit_by_shatter_t;
playervar define active_ab_number;
playervar define active_ab_cooldown;
playervar define active_ab_var;
playervar define active_ab_is_cloaked;
playervar define active_ab_is_frenzied;
playervar define active_ab_is_smoked;
playervar define active_ab_effect_list;
playervar define ab_bought_abilities_string;
playervar define ab_headhunter;
playervar define ab_quick_fix;
playervar define current_quick_fix_speed_bonus;
playervar define ab_charged;
playervar define ab_heavy_impact;
playervar define ab_second_wind;
playervar define ab_triage;
playervar define ab_resilience;
playervar define ab_antigens;
playervar define ab_haste;
playervar define ab_priority;
playervar define ab_health_bonus;
playervar define ab_damage_bonus;
playervar define ab_healing_bonus;
playervar define perk_mystery_swap;
playervar define perk_bulletstorm;
playervar define perk_die_hard;
playervar define perk_brass_knuckles;
playervar define perk_vampiric;
playervar define perk_crash_n_dash;
playervar define perk_golden_hour;
playervar define perk_super_charge;
playervar define perk_nemesis;
playervar define nemesis_killer;
playervar define nemesis_beam_effect;
playervar define perk_special_operator;
playervar define perk_sharpshooter;
playervar define perk_shockproof;
playervar define health_percent;
playervar define Damage_Dealt;
playervar define healing_dealt_percent;
playervar define Move_Speed;
playervar define heal_mod;
playervar define Slowed_until;
playervar define talent_text;
playervar define damage_mod;
playervar define Ability_Countdown;
playervar define Ability_Active;
playervar define Ability_Projectile1;
playervar define Ability_Available;
playervar define Ability_End;
playervar define Effects_;
playervar define p_i;
playervar define Smoked_Screen;
playervar define Tut_Active;
playervar define Swapped_Talent_Array;
playervar define Talent2;
playervar define Talent1;
playervar define HP_Pool;
playervar define Chain_Reaction_Immune;
playervar define Chain_Reaction_On;
playervar define Damage_Received;

void set_map_cg() "Subroutine (Set Map CG): Set Spawns, Nodes, Edges, Distance Matrix, Ability Buy Location"
{
	spawn_pos_list = [Vector(206.454, 0.001, 70.22), Vector(221.427, 8.692, 66.933), Vector(193.658, 0.998, 67.449), Vector(229.543, 1.999, 85.875), Vector(224.599, 5.001, 110.683), Vector(199.902, 8.843, 109.823), Vector(176.589, 6.999, 66.024), Vector(212.836, 9, 81.39), Vector(228.988, 12.998, 65.82), Vector(186.82, 0.999, 87.814)];
	spawn_nearest_node_idx_list = [0, 24, 2, 40, 42, 35, 10, 25, 21, 7];
	nodes = [Vector(206.137, 0.041, 81.572), Vector(197.753, 1.002, 81.213), Vector(189.242, 0.998, 66.794), Vector(188.545, 3, 51.941), Vector(193.895, 16.5, 51.891), Vector(196.476, 16.501, 68.781), Vector(186.703, 0.999, 80.98), Vector(187.579, 0.999, 92.388), Vector(174.916, 5.001, 92.33), Vector(174.294, 5, 80.881), Vector(173.301, 6.999, 66.065), Vector(173.262, 6.998, 57.01), Vector(183.04, 7.999, 56.064), Vector(183.491, 7.999, 63.766), Vector(191.037, 7.999, 64.119), Vector(199.061, 7.998, 49.104), Vector(201.742, 7.998, 60.913), Vector(209.518, 7.998, 60.774), Vector(208.498, 9, 44.68), Vector(218.343, 12, 45.13), Vector(216.613, 14.001, 61.938), Vector(229.231, 13.001, 61.763), Vector(229.677, 9.187, 73.895), Vector(220.985, 7.998, 81.14), Vector(221.33, 9.002, 61.664), Vector(206.1, 9, 81.084), Vector(206.313, 7.999, 70.046), Vector(183.802, 5.998, 74.325), Vector(186.933, 6, 80.94), Vector(185.025, 6.001, 87.18), Vector(194.265, 8.001, 96.067), Vector(205.974, 9.025, 95.64), Vector(216.192, 7.999, 95.441), Vector(180.423, 8.998, 104.206), Vector(205.974, 8.027, 103.778), Vector(206.172, 7.998, 110.406), Vector(193.533, 9, 110.488), Vector(219.054, 5.998, 103.97), Vector(219.07, 1.998, 90.657), Vector(235.431, 1.998, 90.539), Vector(229.409, 1.999, 90.044), Vector(237.966, 3.998, 104.629), Vector(226.962, 4.284, 112.037), Vector(219.008, 0.998, 81.327), Vector(177.92, 0.002, 51.147), Vector(196.386, 16.5, 51.909), Vector(196.295, 16.5, 46.848), Vector(208.835, 16.5, 47.146)];
	edges = [[1, 43], [0, 2, 6, 43], [1, 3], [2, 4, 44], [45], [14, 45], [1, 7], [6, 8], [7, 9], [8, 10, 27, 29], [9, 11], [10, 12], [3, 11, 13], [12, 14, 16, 27, 29], [1, 3, 13, 15, 16], [14, 16], [13, 14, 15, 17, 18, 24, 26], [16, 18, 24, 26], [16, 17, 19], [18, 20], [17, 19, 21], [20, 22], [21, 23, 40], [22, 24, 25, 38], [16, 17, 23], [6, 23, 26], [16, 17, 25], [9, 13, 28, 29], [1, 27, 29], [9, 13, 27, 28, 30], [29, 31, 33, 34, 36], [30, 32, 34], [31, 38], [9, 30, 34], [30, 31, 33, 35, 37], [34, 36], [30, 35], [34, 38, 41], [37, 39, 40, 43], [38, 40, 41], [38, 39], [37, 39, 42], [35, 41], [0, 1, 38], [3], [3, 5, 15, 16, 46], [45, 47], [17, 19, 46]];
	distance_matrix = ["012346234567877667789!9878767655654563233451456710123512345676655667898767656555654563233451345621012423456765544556787656567666", "76567434456223453210133456765443344567654545656787677545567312345432025665654332233456543434545676676656678531233232303454543212", "23345654343343456556554556733123212346012345656667789!98787454567656643445624567323457101234545656678987676343456556554556735678", "43456821012343454556787656523234544545566674678943445732101232343445676545412123433434566564567854434643210123454556787656523234", "54454567767545675432355432101234344567654543434565565667778534564321244543210123233456543432323454454556667423453232353432321012", "12234543232121234334344555633456212124234343210112234543232232345445443445622345323235345454321012234543232343456556554556733456", "32323534434321110112343212123234544544344563345643434634545432221012343212134345655654344564456743434645545432221101234323234345", "65565545567445675454575665654333221012343434545676676655467556785454574565654333212101232324545676676544356556785565684566765444", "32321012333565667656743324546789445568345676544433432101223565556545632213436789334457234565433322343210112454445434521223425678", "43434634545432221123432102234345654553233453456732345712345543332234432120145455654563233453567843434623445432221123443221034345", "65565434456445673233463321232123233456543430112343343445556345672123462332343234344567654541012343343434456245673233463321232123", "23345654343110123223234554534567434457443234323434456765454221012112123443445678445568554345434545567876565332101212222333436789", "33456845545654565667898767644321032332122342678954556843212343454556787656523212301222344344678944556854323443454556787656533211", "210121233233678955667965434554565667898767644322321012344344789!5455685543454345455678765653321232210345545567893345684543455456", "56678987676443223212301221226789223457345456656767789!9878755433432341011231567833456845656776787889!?!9898665445433421011226789", "33456845656776787889!?!9898665445434521102326789445679565456656767789!9878755433432231212013789!55678!665456656767789!9878755433", "43212232310489!?112346234567767667789!987876654454345212234045674321244567876554455678765656767898788656678403454321214554543221", "12234543232343456556554556742012543232566565433222323454343454567667665667853101544343456565433321212343232454567667654556754210"];
	elevator_nodes = [];
	if (gamemode == 0)
	{
		iv_dom_objective_all_pos_list = [Vector(206.094, 2, 77.597), Vector(232.886, 4, 93.877), Vector(230.416, 6, 107.918), Vector(193.307, 11, 113.551), Vector(180.089, 11, 101.823), Vector(205.915, 11.043, 93.96), Vector(168.798, 7, 81.112), Vector(173.483, 9, 57.292), Vector(189.454, 5, 56.301), Vector(196.295, 18.5, 68.985), Vector(206.485, 10, 51.593), Vector(206.259, 10.999, 81.079), Vector(218.594, 10, 85.339), Vector(224.043, 3, 78.247), Vector(182.628, 3, 83.08)];
	}
	else if (gamemode == 2)
	{
		iv_dom_objective_all_pos_list = [[Vector(201.832, 8, 52.598), Vector(218.7, 8, 82.857), 47, 23], [Vector(188.463, 3, 54.695), Vector(173.555, 6.997, 65.855), 14, 10], [Vector(192.951, 9, 112.137), Vector(168.563, 5, 81.053), 35, 9], [Vector(205.608, 0.039, 81.423), Vector(232.253, 2, 97.003), 28, 39], [Vector(206.304, 9, 81.776), Vector(185.063, 1, 82.814), 25, 7]];
	}
	player_spawn_pos = Vector(181.974, 9, 96.862);
	player_spawn_facing = Forward();
	ability_shop_pos = Vector(182.587, 8.998, 105.229);
	buy_menu_left_up_forward[2] = Forward();
	buy_menu_cam_pos = 900 * Up();
}

void update_combatants() "Subroutine: Update Combatants"
{
	combatants = FilteredArray(AllPlayers(Team.Team1), ArrayElement().is_combatant);
	combatants_count = CountOf(combatants);
}

void declare_victory() "Subroutine: Declare Victory"
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIf(is_victory_declared);
	is_victory_declared = true;
	DeclareTeamVictory(Team.Team1);
}

void play_incoming_sound_twice() "Subroutine: Play Incoming Sound Twice"
{
	ModifyTeamScore(Team.Team1, 1);
	Wait(0.6, WaitBehavior.IgnoreCondition);
	ModifyTeamScore(Team.Team1, 1);
}

void Cancel_Momentum() "Subroutine: Cancel player momentum"
{
	ApplyImpulse(EventPlayer(), -1 * DirectionFromAngles(HorizontalAngleFromDirection(VelocityOf(EventPlayer())), 0), 0.001, Relative.ToWorld, ContraryMotion.CancelXYZ);
}

void mut_add_mutator() "MUT Subroutine: Add Mutator"
{
	temp_2 = -50 - CountOf(mutators_list);
	if (mut_count % 5 == 0 && wave_number > 0)
	{
		BigMessage(AllPlayers(Team.All), "Gamechanging Mutator added!");
		is_gmut_enabled = true;
		temp_1 = RandomValueInArray(gmut_list);
		ModifyVariable(gmut_list, Operation.RemoveFromArrayByValue, temp_1);
		if (temp_1 == 0)
		{
			gmut_storm_raging = true;
			CreateHudText(AllPlayers(Team.All), null, "Storm Raging: Some enemies are enraged, killing them spreads the rage", null, Location.Right, temp_2 - 0.5, null, Color.Orange, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartDamageModification(combatants, FilteredArray(AllPlayers(Team.Team2), ArrayElement().gmut_var), 140, DamageModificationRev.ReceiversAndDamagers);
		}
		else if (temp_1 == 1)
		{
			gmut_sympathy_gains = true;
			CreateHudText(AllPlayers(Team.All), null, "Sympathy Gains: Killing enemies heals other nearby enemies", null, Location.Right, temp_2 - 0.5, null, Color.Orange, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 2)
		{
			gmut_adaptive_shield = true;
			CreateHudText(AllPlayers(Team.All), null, "Adaptive Shield: Enemies below 50% HP gain shields for every nearby player", null, Location.Right, temp_2 - 0.5, null, Color.Orange, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 3)
		{
			gmut_fortified = true;
			CreateHudText(AllPlayers(Team.All), null, "Fortified: Enemies resist stuns, knockbacks, and gain extra armour", null, Location.Right, temp_2 - 0.5, null, Color.Orange, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 4)
		{
			gmut_salvation = true;
			CreateHudText(AllPlayers(Team.All), null, "Salvation: Enemies heal themselves a small amount when they die", null, Location.Right, temp_2 - 0.5, null, Color.Orange, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
	}
	else if (CountOf(mutators_list))
	{
		BigMessage(AllPlayers(Team.All), "New Mutator added!");
		temp_1 = RandomValueInArray(mutators_list);
		ModifyVariable(mutators_list, Operation.RemoveFromArrayByValue, temp_1);
		if (temp_1 == 0)
		{
			mut_amped = true;
			CreateHudText(AllPlayers(Team.All), null, "Stampede: Enemies move faster", null, Location.Right, temp_2, null, Color.Green, Color.Green, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 1)
		{
			mut_hardwired = true;
			CreateHudText(AllPlayers(Team.All), null, "Hardwired: Mechanical enemies gain shields and resist fear & electrocution", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 2)
		{
			mut_promotion = true;
			CreateHudText(AllPlayers(Team.All), null, "Promotion: Higher tier heroes spawn more frequently", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 3)
		{
			mut_advanced_medkit = true;
			CreateHudText(AllPlayers(Team.All), null, "Advanced Medkit: Medics can revive tier 4 enemies and have less cooldown", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 4)
		{
			CreateHudText(AllPlayers(Team.All), null, "Berserk: Enemies below 50% health deal 25% more damage", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartDamageModification(combatants, FilteredArray(AllPlayers(Team.Team2), NormalizedHealth(ArrayElement()) <= 0.5), 125, DamageModificationRev.ReceiversAndDamagers);
		}
		else if (temp_1 == 5)
		{
			CreateHudText(AllPlayers(Team.All), null, "Regeneration: Enemies slowly regenerate health", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartHealOverTime(AllPlayers(Team.Team2), null, 9999, 10);
		}
		else if (temp_1 == 6)
		{
			mut_yakuza = true;
			CreateHudText(AllPlayers(Team.All), null, "Yakuza: Shinobis, Bowmasters, and Yokais gain more health and spawn as tier 3 enemies", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 7)
		{
			mut_emp_rounds = true;
			CreateHudText(AllPlayers(Team.All), null, "EMP Rounds: Enemies deal double damage to barriers and objects", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartDamageModification(combatants, AllPlayers(Team.Team2), 50, DamageModificationRev.ReceiversAndDamagers);
		}
		else if (temp_1 == 8)
		{
			mut_heartburn = true;
			CreateHudText(AllPlayers(Team.All), null, "Heartburn: Healing in combat is reduced by 30%", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartHealingModification(FilteredArray(combatants, ArrayElement().last_damage_taken_t + (ArrayElement().perk_die_hard ? 0.5 : 1) * (mut_deep_wounds ? 5 : 2.5) > TotalTimeElapsed()), combatants, 70, HealingModificationRev.ReceiversDamagersAndDamagePercent);
		}
		else if (temp_1 == 9)
		{
			mut_deep_wounds = true;
			CreateHudText(AllPlayers(Team.All), null, "Deep Wounds: Health regeneration delay is doubled", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 10)
		{
			mut_gear_upgrade = true;
			CreateHudText(AllPlayers(Team.All), null, "Gear Upgrade: All Troopers are replaced with Heavy Troopers", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 11)
		{
			CreateHudText(AllPlayers(Team.All), null, "Last Men Standing: The final enemies take 25% less damage", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartDamageModification(AllPlayers(Team.Team2), combatants, objective_phase_number == 3 ? 75 : 100, DamageModificationRev.ReceiversDamagersAndDamagePercent);
		}
		else if (temp_1 == 12)
		{
			mut_reinforcements = true;
			CreateHudText(AllPlayers(Team.All), null, "Reinforcements: Enemy spawn rate is increased", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 13)
		{
			mut_mutation = TotalTimeElapsed();
			CreateHudText(AllPlayers(Team.All), null, "Mutation: Some enemies spawn with increased strength and size", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 14)
		{
			mut_expendable = true;
			CreateHudText(AllPlayers(Team.All), null, "Expendable: Dead Troopers are replaced almost instantly", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 15)
		{
			mut_counterstrike = true;
			CreateHudText(AllPlayers(Team.All), null, "Counterstrike: Enemies can retreat from ultimates and counter back with their own", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 16)
		{
			mut_swan_song = true;
			CreateHudText(AllPlayers(Team.All), null, "Swan Song: Boss enemies continue fighting for 5 seconds before going down", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 17)
		{
			mut_bulletproof = true;
			CreateHudText(AllPlayers(Team.All), null, "Bulletproof: Tier 2 enemies gain an additional layer of overhealth", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 18)
		{
			mut_fully_loaded = true;
			CreateHudText(AllPlayers(Team.All), null, "Lock N' Load: Enemies can use additional abilities and have a higher clip size", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 19)
		{
			mut_low_blow = true;
			CreateHudText(AllPlayers(Team.All), null, "Low Blow: Enemy knockback attacks double in damage and knockback", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			SetKnockbackDealt(AllPlayers(Team.Team2), 200);
		}
		else if (temp_1 == 20)
		{
			mut_artful_dodger = true;
			CreateHudText(AllPlayers(Team.All), null, "Artful Dodger: Enemies can dodge attacks more often and easily", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
	}
}

void set_random_perks() "Subroutine: Set Random Perks"
{
	if (CountOf(current_perks_huds_list))
	{
		DestroyInWorldText(FirstOf(current_perks_huds_list));
		DestroyInWorldText(current_perks_huds_list[1]);
	}
	current_perks_huds_list = [];
	if (wave_number % 4 == 1)
	{
		current_perks = ArraySlice(RandomizedArray(RemoveFromArray([12, 13], current_perks)), 0, 2);
		for (temp_1 = 0; 2; 1)
		{
			temp_2 = buy_menu_base_pos - (temp_1 ? 25 : 2.5) * buy_menu_left_up_forward[1] - 112.5 * FirstOf(buy_menu_left_up_forward);
			if (current_perks[temp_1] == 12)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Hero Talent 1\n      $1600", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().Talent1 ? Color.Gray : Color.Purple, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 13)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Hero Talent 2\n      $1600", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().Talent2 ? Color.Gray : Color.Purple, Spectators.DefaultVisibility);
			}
			ModifyVariable(current_perks_huds_list, Operation.AppendToArray, LastTextID());
		}
	}
	else
	{
		current_perks = ArraySlice(RandomizedArray(RemoveFromArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], current_perks)), 0, 2);
		for (temp_1 = 0; 2; 1)
		{
			temp_2 = buy_menu_base_pos - (temp_1 ? 25 : 2.5) * buy_menu_left_up_forward[1] - 112.5 * FirstOf(buy_menu_left_up_forward);
			if (current_perks[temp_1] == 0)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Mystery Swap\n     500$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_mystery_swap ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 1)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Bulletstorm\n   1000$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_bulletstorm ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 2)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Die Hard\n 700$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_die_hard ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 3)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Brass Knuckles\n     700$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_brass_knuckles ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 4)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Vampiric\n   1000$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_vampiric ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 5)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Crash N' Dash\n      700$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_crash_n_dash ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 6)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Golden Hour\n    1000$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_golden_hour ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 7)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Supercharge\n        700$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_super_charge ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 8)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Nemesis\n   800$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_nemesis ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 9)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Spec Ops\n 600$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_special_operator ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 10)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Sharpshooter\n   900$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_sharpshooter ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 11)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Shockproof\n        700$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_shockproof ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			ModifyVariable(current_perks_huds_list, Operation.AppendToArray, LastTextID());
		}
	}
}

void disable_player() "Subroutine: Disable Player"
{
	ForceThrottle(EventPlayer(), false, 0.1, false, 0.1, false, 0.1);
	SetPrimaryFireEnabled(EventPlayer(), false);
	SetSecondaryFireEnabled(EventPlayer(), false);
	SetAbility1Enabled(EventPlayer(), false);
	SetAbility2Enabled(EventPlayer(), false);
	SetMeleeEnabled(EventPlayer(), false);
	SetJumpEnabled(EventPlayer(), false);
	SetCrouchEnabled(EventPlayer(), false);
	DisallowButton(EventPlayer(), Button.Ultimate);
}

void enable_player() "Subroutine: Enable Player"
{
	StopForcingThrottle(EventPlayer());
	SetPrimaryFireEnabled(EventPlayer(), true);
	SetSecondaryFireEnabled(EventPlayer(), true);
	SetAbility1Enabled(EventPlayer(), true);
	SetAbility2Enabled(EventPlayer(), true);
	SetMeleeEnabled(EventPlayer(), true);
	SetJumpEnabled(EventPlayer(), true);
	SetCrouchEnabled(EventPlayer(), true);
	AllowButton(EventPlayer(), Button.Ultimate);
}

void open_buy_menu() "Subroutine: Open Buy Menu, Last Facing (3)"
{
	AbortIf(downed_start_t || NormalizedHealth(EventPlayer()) < 0.5 || HasStatus(EventPlayer(), Status.Stunned) || tased_end_t >= TotalTimeElapsed());
	ApplyImpulse(EventPlayer(), -1 * DirectionFromAngles(HorizontalAngleFromDirection(VelocityOf(EventPlayer())), false), 0.001, Relative.ToWorld, ContraryMotion.CancelXYZ);
	ab_var_3 = FacingDirectionOf(EventPlayer());
	in_buy_menu_start_t = TotalTimeElapsed();
	DisableHeroHud(EventPlayer());
	SetFacing(EventPlayer(), Forward(), Relative.ToWorld);
	StartCamera(EventPlayer(), buy_menu_cam_pos, buy_menu_cam_pos + buy_menu_left_up_forward[2], 0);
	disable_player();
	SetAimSpeed(EventPlayer(), 200);
}

void leave_buy_menu() "Subroutine: Leave Buy Menu"
{
	in_buy_menu_start_t = false;
	EnableHeroHud(EventPlayer());
	SetFacing(EventPlayer(), ab_var_3, Relative.ToWorld);
	if (!downed_start_t)
	{
		StopCamera(EventPlayer());
		enable_player();
	}
	SetAimSpeed(EventPlayer(), 100);
}

void check_if_enough_money() "Subroutine: Check if enough money"
{
	if (money_mult * money_amount - money_spent_amount >= temp_2)
	{
		money_spent_amount += temp_2;
		SmallMessage(EventPlayer(), "Ability unlocked");
		play_purchase_confirmation_sound();
	}
	else
	{
		temp_2 = false;
		SmallMessage(EventPlayer(), "Not enough money");
	}
}

void buy_active_ability() "Subroutine: Buy Active Ability"
{
	if (!active_ab_number)
	{
		temp_2 = 1200;
		check_if_enough_money();
		AbortIf(!temp_2);
	}
	else if (temp_1 == active_ab_number)
	{
		Abort();
	}
	else
	{
		SmallMessage(EventPlayer(), "Swapped Active Ability");
	}
	remove_active_ability();
	active_ab_number = temp_1;
	if (temp_1 == 1)
	{
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.AnaNanoBoostedEffect, Color.Team1, EventPlayer(), 1, EffectRev.VisibleTo);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
	}
	else if (temp_1 == 2)
	{
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.ReaperWraithFormEffect, Color.Team1, EventPlayer(), 1, EffectRev.VisibleTo);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
	}
	else if (temp_1 == 4)
	{
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.BaptisteImmortalityFieldProtectedEffect, Color.Team1, EventPlayer(), 1, EffectRev.VisibleTo);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
	}
	else if (temp_1 == 5)
	{
		active_ab_var = 1000 * Down();
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.Cloud, Color.SkyBlue, active_ab_var + 2 * Up(), 10, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.Cloud, Color.SkyBlue, active_ab_var + 2 * Down(), 10, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.Ring, Color.SkyBlue, active_ab_var + Down(), 10, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
	}
	else if (temp_1 == 6)
	{
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.HealTargetActiveEffect, Color.Team1, EventPlayer(), 1, EffectRev.VisibleTo);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
	}
	else if (temp_1 == 7)
	{
		active_ab_var = 1000 * Down();
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.Cloud, Color.Yellow, active_ab_var + Up(), 8, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.Cloud, Color.Yellow, active_ab_var + Down(), 8, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
	}
	else if (temp_1 == 8)
	{
		active_ab_var = [];
		CreateBeamEffect(CountOf(active_ab_var) ? AllPlayers(Team.All) : [], BeamType.BadBeam, EventPlayer(), FirstOf(active_ab_var), Color.Purple, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
		CreateBeamEffect(CountOf(active_ab_var) > 1 ? AllPlayers(Team.All) : [], BeamType.BadBeam, FirstOf(active_ab_var), active_ab_var[1], Color.Purple, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
		CreateBeamEffect(CountOf(active_ab_var) > 2 ? AllPlayers(Team.All) : [], BeamType.BadBeam, active_ab_var[1], active_ab_var[2], Color.Purple, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
		CreateBeamEffect(CountOf(active_ab_var) > 3 ? AllPlayers(Team.All) : [], BeamType.BadBeam, active_ab_var[2], active_ab_var[3], Color.Purple, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
	}
	play_purchase_confirmation_sound();
}

void remove_active_ability() "Subroutine: Remove Active Ability"
{
	if (active_ab_cooldown < 0)
	{
		active_ab_cooldown = -0.1;
	}
	DestroyEffect(active_ab_effect_list);
	active_ab_effect_list = [];
	active_ab_number = false;
}

void update_ab_string_and_play_sound() "Subroutine: Update Ability String and Play Sound"
{
	ab_bought_abilities_string = StringSlice(<"<0><1><2>", <"<0><1><2>", <"<0><1><2>", ["", "\nPriority A", "\nPriority B", "\nPriority C"][ab_priority], ["", "\nHeadhunter I", "\nHeadhunter II"][ab_headhunter], ["", "\nAntigens I", "\nAntigens II"][ab_antigens]>, <"<0><1><2>", ["", "\nQuick Fix I", "\nQuick Fix II"][ab_quick_fix], ["", "\nCharged I", "\nCharged II"][ab_charged], ["", "\nHaste I", "\nHaste II"][ab_haste]>, <"<0><1><2>", ["", "\nHeavy Impact I", "\nHeavy Impact II"][ab_heavy_impact], ["", "\nSecond Wind I", "\nSecond Wind II"][ab_second_wind], ["", "\nTriage I", "\nTriage II"][ab_triage]>>, <"<0><1><2>", <"<0><1><2>", ["", "\nResilience I", "\nResilience II"][ab_resilience], perk_mystery_swap ? "\nMystery Swap" : "", perk_bulletstorm ? "\nBulletstorm" : "">, <"<0><1><2>", perk_die_hard ? "\nDie Hard" : "", perk_brass_knuckles ? "\nBrass Knuckles" : "", perk_vampiric ? "\nVampiric" : "">, <"<0><1><2>", perk_crash_n_dash ? "\nCrash N' Dash" : "", perk_golden_hour ? "\nGolden Hour" : "", perk_super_charge ? "\nSupercharge" : "">>, <"<0><1><2>", <"<0><1><2>", perk_nemesis ? "\nNemesis" : "", perk_special_operator ? "\nSpec Ops" : "", perk_sharpshooter ? "\nSharpshooter" : "">, <"<0><1><2>", perk_shockproof ? "\nShockproof" : "", <"<0><1><2>", Talent1 ? <"\n<0> <1>", AbilityIconString(Hero.Pharah, Button.Jump), talent_text[1]> : "", Talent2 ? <"\n<0> <1>", AbilityIconString(Hero.Pharah, Button.Jump), talent_text[3]> : "", ab_health_bonus ? <"\n+<0>% Health", ab_health_bonus> : "">, ab_damage_bonus ? <"\n+<0>% Damage", ab_damage_bonus> : "">, ab_healing_bonus ? <"\n+<0>% Healing", ab_healing_bonus> : "">>, 1, 511);
}

void play_purchase_confirmation_sound() "Subroutine: Play Purchase Confirmation Sound"
{
	PlayEffect(EventPlayer(), PlayEffect.BuffExplosionSound, Color.White, buy_menu_cam_pos, 200);
}

void nwp_teleport() "Subroutine: Nearest Walkable Position Teleport"
{
	if (temp_1 == [])
	{
		Teleport(EventPlayer(), FirstOf(SortedArray(nodes, DistanceBetween(EventPlayer(), ArrayElement()))));
	}
	else
	{
		Teleport(EventPlayer(), temp_1);
	}
}

void call_reinforcements() "Subroutine: Spawn Reinforcements"
{
	special_spawns_count += is_apocalyptic + (wave_number >= 5 ? 2 : 1);
}

void teleport_to_free_spawn() "Subroutine: Teleport to free Spawn"
{
	if (gamemode == 0 && (base_tier == -1 || special_spawns_count > 0) && !is_alive)
	{
		is_nav_reachable_node = false;
		if (base_tier == -1 && objective_phase_number == 0)
		{
			Teleport(EventPlayer(), 100 * Up());
		}
		else
		{
			Teleport(EventPlayer(), iv_dom_objective_pos + Up());
		}
	}
	else if (gamemode == 1 && hvt_call_reinforcements_end_t >= TotalTimeElapsed() && special_spawns_count > 0 && !is_alive)
	{
		is_nav_reachable_node = false;
		Teleport(EventPlayer(), PlayersInSlot(1, Team.Team2));
	}
	else if (gamemode == 2 && objective_phase_number == 0)
	{
		nav_idx = iv_dom_objective_pos[SlotOf(EventPlayer()) == 2 ? 2 : 3];
		dom_nav_guard_idx = nav_idx;
		nav_pos = nodes[nav_idx];
		is_nav_reachable_node = true;
		Teleport(EventPlayer(), nav_pos + 0.1 * DirectionFromAngles(HorizontalAngleFromDirection(DirectionTowards(iv_dom_objective_pos[SlotOf(EventPlayer()) == 2 ? 0 : 1], nav_pos)), false));
	}
	else
	{
		temp_2 = MappedArray(spawn_pos_list, false);
		for (temp_1 = 0; CountOf(spawn_pos_list); 1)
		{
			if (IsTrueForAny(combatants, IsInLineOfSight(spawn_pos_list[temp_1] + Up(), EyePosition(ArrayElement()), BarrierLOS.NoBarriersBlock)))
			{
				temp_2[temp_1] = 2;
			}
			else if (IsTrueForAny(combatants, DistanceBetween(spawn_pos_list[temp_1], ArrayElement()) <= 10))
			{
				temp_2[temp_1] = 1;
			}
		}
		temp_1 = FirstOf(SortedArray(spawn_pos_list, temp_2[CurrentArrayIndex()] + RandomReal(0, 0.5)));
		nav_idx = spawn_nearest_node_idx_list[IndexOfArrayValue(spawn_pos_list, temp_1)];
		nav_pos = nodes[nav_idx];
		is_nav_reachable_node = true;
		Teleport(EventPlayer(), temp_1);
	}
}

void find_wp_near_nav() "Subroutine: Find WP near Nav (find a walkable position near the Nav and check if it's reachable)"
{
	temp_1 = NearestWalkablePosition(nav_pos);
	# If NWP is valid and not too far from the original destination
	if (temp_1 != [] && DistanceBetween(nav_pos, temp_1) < 3)
	{
		nav_pos = temp_1;
	}
	else
	{
		# If original destination is not walkable
		if (DistanceBetween(nav_pos + Up(), RayCastHitPosition(nav_pos + Up(), nav_pos + 2 * Down(), null, null, false)) >= 3)
		{
			# Ranged bots stand still
			if (is_load_limit_reached || is_ranged || DistanceBetween(EventPlayer(), target) < 2)
			{
				nav_pos = PositionOf(EventPlayer());
				Abort();
			}
			else
			{
				nav_pos = PositionOf(EventPlayer()) + Min(3.5, DistanceBetween(EventPlayer(), target) - 2) * DirectionTowards(EventPlayer(), target);
				if (IsOnGround(EventPlayer()))
				{
					# Check if destination is not walkable
					if (DistanceBetween(nav_pos + Up(), RayCastHitPosition(nav_pos + Up(), nav_pos + 2 * Down(), null, null, false)) >= 3)
					{
						nav_pos = PositionOf(EventPlayer());
						is_using_combat_pathfinding -= 1;
						Abort();
					}
				}
			}
		}
	}
	# Check if the destination is reachable
	if (IsOnGround(EventPlayer()))
	{
		temp_1 = PositionOf(EventPlayer()) + 1.75 * DirectionTowards(EventPlayer(), nav_pos) + Up();
		# If bot is near a ledge
		if (DistanceBetween(temp_1, RayCastHitPosition(temp_1, temp_1 + 3 * Down(), null, null, false)) >= 3)
		{
			nav_pos = PositionOf(EventPlayer());
			if (!is_ranged)
			{
				is_using_combat_pathfinding -= 1;
				Abort();
			}
		}
	}
	is_using_combat_pathfinding = 3;
}

void check_drop() "Subroutine: Check Drop (Avoid dropping too low)"
{
	if (is_load_limit_reached)
	{
		nav_pos = PositionOf(EventPlayer());
		Abort();
	}
	temp_1 = PositionOf(EventPlayer()) + 1.75 * DirectionTowards(EventPlayer(), Vector(XOf(nav_pos), YOf(PositionOf(EventPlayer())), ZOf(nav_pos))) + Up();
	if (DistanceBetween(temp_1, RayCastHitPosition(temp_1, temp_1 + 30 * Down(), null, null, false)) >= YOf(temp_1) - YOf(PositionOf(target)) + 5)
	{
		nav_pos = PositionOf(EventPlayer());
		is_using_combat_pathfinding -= 1;
		Abort();
	}
	temp_1 = PositionOf(EventPlayer()) + 3.5 * DirectionTowards(EventPlayer(), Vector(XOf(nav_pos), YOf(PositionOf(EventPlayer())), ZOf(nav_pos))) + Up();
	if (DistanceBetween(temp_1, RayCastHitPosition(temp_1, temp_1 + 30 * Down(), null, null, false)) >= YOf(temp_1) - YOf(PositionOf(target)) + 5)
	{
		nav_pos = PositionOf(EventPlayer());
		is_using_combat_pathfinding -= 1;
		Abort();
	}
	is_using_combat_pathfinding = 3;
}

void start_facing() "Subroutine: Start Facing"
{
	if (HeroOf(EventPlayer()) == Hero.Soldier76)
	{
		if (real_tier == 4)
		{
			StartFacing(EventPlayer(), (is_target_in_los && (!ab_var_1 || is_using_combat_pathfinding) ? Vector(false, false, false) : 1.5 * DirectionTowards(EventPlayer(), nav_pos)) + (target.is_combatant ? DirectionTowards(EyePosition(EventPlayer()), EyePosition(target) + target.eye_offset) : Vector(false, false, false)), HasStatus(EventPlayer(), Status.Stunned) ? 0 : ab_var_1 ? 1000 : 300, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
		}
		else
		{
			StartFacing(EventPlayer(), (is_target_in_los ? Vector(false, false, false) : 1.5 * DirectionTowards(EventPlayer(), nav_pos)) + (target.is_combatant ? DirectionTowards(EyePosition(EventPlayer()), EyePosition(target) + target.eye_offset) : Vector(false, false, false)), HasStatus(EventPlayer(), Status.Stunned) ? 0 : Slowed_until >= TotalTimeElapsed() ? 50 : 300, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
		}
	}
	else
	{
		if (HeroOf(EventPlayer()) == Hero.Widowmaker || HeroOf(EventPlayer()) == Hero.Hanzo)
		{
			StartFacing(EventPlayer(), facing_override_direction ? facing_override_direction : (is_target_in_los ? Vector(false, false, false) : 1.5 * DirectionTowards(EventPlayer(), nav_pos)) + (target.is_combatant ? DirectionTowards(EyePosition(EventPlayer()), EyePosition(target) + target.eye_offset) : Vector(false, false, false)), HasStatus(EventPlayer(), Status.Stunned) ? 0 : 300, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
			facing_override_direction = false;
		}
		else if (!iv_is_portal)
		{
			StartFacing(EventPlayer(), (is_target_in_los ? Vector(false, false, false) : 1.5 * DirectionTowards(EventPlayer(), nav_pos)) + (target.is_combatant ? DirectionTowards(EyePosition(EventPlayer()), EyePosition(target) + target.eye_offset) : Vector(false, false, false)), HasStatus(EventPlayer(), Status.Stunned) ? 0 : Slowed_until >= TotalTimeElapsed() ? 50 : 300, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
		}
	}
}

void find_chase_target() "Subroutine: Find Chase Target"
{
	AbortIf(is_ignoring_other_targets);
	target = FirstOf(SortedArray(FilteredArray(combatants, !ArrayElement().downed_start_t && !ArrayElement().active_ab_is_cloaked && !(ArrayElement().is_invisible && DistanceBetween(EventPlayer(), ArrayElement()) > 2.4)), DistanceBetween(EventPlayer(), ArrayElement())));
}

void update_target_nav() "Subroutine: Update Target Nav"
{
	target.last_nav_update_t = TotalTimeElapsed();
	temp_1 = EyePosition(target) + target.eye_offset;
	target.best_nav_idx = IndexOfArrayValue(nodes, FirstOf(SortedArray(FilteredArray(RemoveFromArray(nodes, elevator_nodes), IsInLineOfSight(ArrayElement() + Vector(0, 1.5, 0), temp_1, BarrierLOS.NoBarriersBlock)), DistanceBetween(target, ArrayElement()) + AbsoluteValue(YOf(PositionOf(target)) - YOf(ArrayElement())))));
	if (target.best_nav_idx == -1)
	{
		target.best_nav_idx = IndexOfArrayValue(nodes, FirstOf(SortedArray(RemoveFromArray(nodes, elevator_nodes), DistanceBetween(target, ArrayElement()))));
	}
}

void upgrade_health_and_healing() "Subroutine: Upgrade Health and Healing"
{
	upgrade_count += 1;
	SetHealingReceived(AllPlayers(Team.Team1), 85 + 2.5 * upgrade_count);
	StartHealOverTime(AllPlayers(Team.Team1), null, 1, 100000);
}

void start_kill_remaining_phase() "Subroutine: Start Kill remaining Phase"
{
	BigMessage(AllPlayers(Team.All), "Kill the remaining enemies!");
	enable_normal_spawns = false;
	AllPlayers(Team.Team2).is_expendable = false;
	special_spawns_count = false;
	objective_phase_number = 3;
	Communicate(RandomValueInArray(combatants), Communication.PressTheAttack);
}

void iv_defend_portal() "IV Subroutine: Defend Portal"
{
	money_amount += 95;
	if (objective_phase_number == 1)
	{
		enable_normal_spawns = true;
		call_reinforcements();
		async! play_incoming_sound_twice();
		ab_var_2 = TotalTimeElapsed() + 10;
	}
	temp_2 = FilteredArray(PlayersWithinRadius(iv_dom_objective_pos, 15, Team.Team1, RadiusLOS.Surfaces), ArrayElement().is_combatant && !HasStatus(ArrayElement(), Status.PhasedOut) && IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.EnemyBarriersBlock));
	for (temp_1 = 0; CountOf(temp_2); 1)
	{
		ApplyImpulse(temp_2[temp_1], DirectionFromAngles(HorizontalAngleFromDirection(VectorTowards(iv_dom_objective_pos, temp_2[temp_1])), -20), 25, Relative.ToWorld, ContraryMotion.CancelXYZ);
	}
	temp_1 = RandomInteger(0, 5);
	if (temp_1 == 5 && wave_number >= 7)
	{
		temp_2.tased_end_t = TotalTimeElapsed() + 3;
	}
	else if (temp_1 <= 1 && wave_number >= 4)
	{
		SetUltimateCharge(EventPlayer(), 100);
		PressButton(EventPlayer(), Button.Ultimate);
	}
	else if (temp_1 == 3 && wave_number >= 4)
	{
		PressButton(EventPlayer(), Button.Ability1);
	}
	PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.White, EventPlayer(), 200);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, temp_1 == 5 && wave_number >= 7 ? Color.Purple : Color.Red, iv_dom_objective_pos + 1.11 * Up(), 10);
}

rule: "Mod by LemonAid#11644, Original mode by Shingen#21859"
{
	DisableInspectorRecording();
}

rule: "Special thanks"
{
	Special_Thanks = WorkshopSettingCombo("Special thanks", "Cool people", 10, ["Thank you to", "Shingen", "Developful", "SgtMoody"], 0);
}

rule: "Global (Init): Set Workshop Vars, Game Vars, Disable Game Components, Create Game Entities"
{
	# Select and initialize Gamemode
	gamemode = [];
	if (WorkshopSettingToggle("Enabled Game Modes", "Invasion", true, 0))
	{
		ModifyVariable(gamemode, Operation.AppendToArray, 0);
	}
	if (WorkshopSettingToggle("Enabled Game Modes", "High Value Target", true, 1))
	{
		ModifyVariable(gamemode, Operation.AppendToArray, 1);
	}
	# Workaround: Need to reduce Slots because of spectator bug
	if (WorkshopSettingToggle("Enabled Game Modes", "Domination", true, 2) && NumberOfSlots(Team.Team1) <= 7)
	{
		ModifyVariable(gamemode, Operation.AppendToArray, 2);
	}
	if (CountOf(gamemode))
	{
		gamemode = RandomValueInArray(gamemode);
	}
	else
	{
		# Workaround: Need to reduce Slots because of spectator bug
		gamemode = RandomInteger(0, NumberOfSlots(Team.Team1) <= 7 ? 2 : 1);
	}
	if (gamemode == 2)
	{
		boss_list_1 = [Hero.Baptiste, Hero.Cassidy, Hero.Baptiste, Hero.Echo, Hero.Zarya, Hero.Lucio, Hero.Widowmaker, Hero.Ana, Hero.Orisa, Hero.Sigma, Hero.Tracer, Hero.Ana, Hero.Orisa, Hero.Hanzo, Hero.Genji, Hero.Brigitte, Hero.Widowmaker, Hero.Reaper, Hero.Kiriko, Hero.Dva, Hero.Pharah, Hero.Reinhardt];
		boss_list_2 = [Hero.Brigitte, Hero.Sombra, Hero.Reaper, Hero.Pharah, Hero.Kiriko, Hero.Tracer, Hero.Roadhog, Hero.Zarya, Hero.Lucio, Hero.Dva, Hero.Kiriko, Hero.Roadhog, Hero.Dva, Hero.Genji, Hero.Reinhardt, Hero.Mei, Hero.Cassidy, Hero.Sombra, Hero.Sigma, Hero.Echo, Hero.Brigitte, Hero.Mei];
	}
	else
	{
		boss_list_1 = [Hero.Cassidy, Hero.Baptiste, Hero.Lucio, Hero.Pharah, Hero.Widowmaker, Hero.Sombra, Hero.Reaper, Hero.Ana, Hero.Echo, Hero.Mei, Hero.Zarya, Hero.Tracer, Hero.Orisa, Hero.Kiriko, Hero.Reinhardt, Hero.Brigitte, Hero.Hanzo, Hero.Genji, Hero.Dva, Hero.Roadhog, Hero.Sigma, Hero.Reinhardt];
	}
	# 0=Easy, 1=Normal, 2=Hard, 3=Apocalypse
	temp_1 = WorkshopSettingCombo("Settings", "Difficulty", 1, ["Easy", "Normal", "Hard", "Apocalyptic"], 0);
	# 100-500%
	money_mult = WorkshopSettingInteger("Settings", "Money Generation Scalar (in Percent)", 100, 100, 500, 1);
	# 0=15w, 1=22w
	length = WorkshopSettingCombo("Settings", "Game Length", 0, ["15 Waves", "22 Waves"], 2);
	CreateHudText(AllPlayers(Team.All), null, null, <"<0> Difficulty<1>", ["Easy", "Normal", "Hard", "Apocalyptic"][temp_1], money_mult == 100 ? "" : <", +<0>% money", money_mult - 100>>, Location.Right, -100, null, null, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
	money_mult /= 100;
	if (temp_1 == 0)
	{
		diff_health_mult = 0.6;
		diff_damage_mult = 0.6;
	}
	else if (temp_1 == 1)
	{
		diff_health_mult = 0.8;
		diff_damage_mult = 0.8;
	}
	else if (temp_1 == 2)
	{
		is_hard_mode_enabled = true;
		diff_health_mult = 1.15;
		diff_damage_mult = 1.15;
		mut_count = 5;
	}
	else
	{
		is_apocalyptic = 1;
		money_mult *= 1.4;
		diff_health_mult = 1.5;
		diff_damage_mult = 1.25;
		mut_count = 5;
	}
	gazed___ = 1;
	# 0=On, 1=Off
	is_mutator_activation_disabled = 0;
	if (is_mutator_activation_disabled == 0)
	{
		is_mutator_mode_enabled = true;
		money_mult *= 2;
	}
	DisableCompletion();
	DisableScoring();
	DisableAnnouncer();
	progress_bar_strings = ["□□□□□", "▣□□□□", "■□□□□", "■▣□□□", "■■□□□", "■■▣□□", "■■■□□", "■■■▣□", "■■■■□", "■■■■▣", "■■■■■"];
	char_string = "0123456789!?#$%";
	aim_offset = 0.5 * Down();
	mutators_list[20] = null;
	mutators_list = MappedArray(mutators_list, CurrentArrayIndex());
	gmut_list[4] = null;
	gmut_list = MappedArray(gmut_list, CurrentArrayIndex());
	if (is_hard_mode_enabled || is_apocalyptic)
	{
		for (i = -1; 3; 1)
		{
			MinWait();
			mut_add_mutator();
		}
	}
	# Initialize Map Specific Variables
	if (CurrentMap() == Map.Chateau_Guillard || CurrentMap() == Map.Chateau_Guillard_Halloween)
	{
		set_map_cg();
		is_map_cg = true;
	}
	else
	{
		CreateHudText(AllPlayers(Team.All), "\n\n\n\n\n\n\n\n\n\n\n\n\n\n     This Map is not supported! Restart and choose a valid map.     \n\n\n\n\n\n\n\n\n\n\n\n\n\n", null, null, Location.Top, -1000, Color.Yellow, null, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
	}
	nodes_count = CountOf(nodes);
	buy_menu_left_up_forward[1] = DirectionFromAngles(HorizontalAngleFromDirection(buy_menu_left_up_forward[2]), VerticalAngleFromDirection(buy_menu_left_up_forward[2]) - 90);
	buy_menu_left_up_forward[0] = CrossProduct(buy_menu_left_up_forward[1], buy_menu_left_up_forward[2]);
	buy_menu_base_pos = buy_menu_cam_pos - 9 * buy_menu_left_up_forward[1] + 142 * buy_menu_left_up_forward[2];
	# Workaround: Need to reduce Slots because of spectator bug
	if (NumberOfSlots(Team.Team1) > 8)
	{
		CreateHudText(AllPlayers(Team.All), "\n\n\n\n\n\n\n\n\n\n\n\n\n\n     Too many player slots! Set Max Team 1 Players to 5 or lower and restart.     \n\n\n\n\n\n\n\n\n\n\n\n\n\n", null, null, Location.Top, -1000, Color.Yellow, null, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
	}
	# Create HUDs
	CreateHudText(AllPlayers(Team.All), null, null, <"Heat Street: Talents - 3.4.6 | KFVAY - Chateau Guillard)​ ​-​ ​<0><1>", ["Invasion", "High Value Target", "Domination"][gamemode], MatchTime() ? <"<0><1><2>", MatchTime() > 10 ? "0:" : "", RoundToInteger(RoundToInteger(10 * MatchTime(), Rounding.Up) / 10, Rounding.Down), MatchTime() > 10 ? "" : <".<0>", RoundToInteger(10 * MatchTime(), Rounding.Up) % 10>> : "">, Location.Top, -100, null, null, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	if (length == 0)
	{
		CreateHudText(AllPlayers(Team.All), <"Wave <0>/15 ", wave_number>, null, null, Location.Top, -99, Color.White, null, null, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	}
	else if (length == 1)
	{
		CreateHudText(AllPlayers(Team.All), <"Wave <0>/22 ", wave_number>, null, null, Location.Top, -99, Color.White, null, null, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	}
	if (gamemode == 2)
	{
		CreateHudText(AllPlayers(Team.All), null, objective_phase_number == 1 ? "" : "\n\n\n", null, Location.Top, -98, null, Color.White, null, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	}
	else
	{
		CreateHudText(AllPlayers(Team.All), null, objective_phase_number == 1 || objective_phase_number == 2 ? "" : "\n\n\n", null, Location.Top, -98, null, Color.White, null, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	}
	CreateHudText(FilteredArray(combatants, DistanceBetween(ArrayElement(), ability_shop_pos) > 2), <"\n<0>\n\n Press <1> to Start \n", ["   Invasion", "High Value Target", "    Domination"][gamemode], InputBindingString(Button.Interact)>, null, null, Location.Top, -92, Color.White, null, null, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	game_or_mutator_start_huds[0] = LastTextID();
	CreateHudText(FilteredArray(combatants, DistanceBetween(ArrayElement(), ability_shop_pos) > 2), null, null, "Change the Objective in the Workshop Settings", Location.Top, -91, null, null, Color.Green, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
	game_or_mutator_start_huds[1] = LastTextID();
	CreateHudText(FilteredArray(combatants, !ArrayElement().downed_start_t && (ArrayElement().is_changing_heroes || objective_phase_number == 0 && !ArrayElement().in_buy_menu_start_t)), <"\n\n\n    You can change Heroes now\n\n Hold <0> to open the Hero menu \n", InputBindingString(Button.Reload)>, null, null, Location.Top, -90, Color.Yellow, null, null, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	CreateHudText(FilteredArray(combatants, ArrayElement().downed_start_t), null, null, <"Waiting for revival. Press <0> to spectate the next player.", InputBindingString(Button.Jump)>, Location.Top, -70, null, null, Color.Yellow, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	CreateHudText(LocalPlayer(), null, null, LocalPlayer().Tut_Active ? "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" : <"Press [<0>] + [<1>] to toggle hud", InputBindingString(Button.Crouch), InputBindingString(Button.Reload)>, Location.Left, 9, null, null, Color.Orange, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	CreateProgressBarHudText(LocalPlayer().downed_start_t ? LocalPlayer().revive_timer : IsTrueForAny(combatants, ArrayContains(ArrayElement().revivers, LocalPlayer())) ? LocalPlayer() : [], LocalPlayer().downed_start_t ? LocalPlayer().revive_timer : LastOf(SortedArray(FilteredArray(combatants, ArrayContains(ArrayElement().revivers, LocalPlayer())), ArrayElement().revive_timer)).revive_timer, LocalPlayer().downed_start_t ? "You are being revived" : <"Reviving <0>", CountOf(FilteredArray(combatants, ArrayContains(ArrayElement().revivers, LocalPlayer()))) > 1 ? <"<0> Teammates", CountOf(FilteredArray(combatants, ArrayContains(ArrayElement().revivers, LocalPlayer())))> : FirstOf(FilteredArray(combatants, ArrayContains(ArrayElement().revivers, LocalPlayer())))>, Location.Top, -60, LocalPlayer().downed_start_t ? LocalPlayer().is_revive_slow : IsTrueForAll(combatants, !ArrayContains(ArrayElement().revivers, LocalPlayer()) || ArrayElement().is_revive_slow) ? Color.Orange : Color.SkyBlue, Color.White, ProgressBarHudEvaluation.VisibleToValuesAndColor, Spectators.DefaultVisibility);
	CreateHudText(is_infrasight_on ? AllPlayers(Team.All) : [], <"<0> Enemies have improved aim!", AbilityIconString(Hero.Widowmaker, Button.Ultimate)>, null, null, Location.Top, -50, Color.Violet, null, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
	CreateHudText(IsTrueForAny(PlayersOnHero(Hero.Soldier76, Team.Team2), ArrayElement().ab_var_1 && ArrayElement().target == LocalPlayer()) ? LocalPlayer() : [], <"<0> Locked on!", AbilityIconString(Hero.Soldier76, Button.Ultimate)>, null, null, Location.Top, -49, CustomColor(245 + 10 * SineFromRadians(4 * TotalTimeElapsed()), 205 + 50 * SineFromRadians(4 * TotalTimeElapsed()), 200 * SineFromRadians(4 * TotalTimeElapsed()), 255), null, null, HudTextRev.VisibleToAndColor, Spectators.DefaultVisibility);
	CreateHudText(AllPlayers(Team.All), null, null, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", Location.Top, -1, null, null, Color.White, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
	CreateHudText(AllPlayers(Team.Team2), <"Server Load: <0>, Average: <1>, Peak: <2>", ServerLoad(), ServerLoadAverage(), ServerLoadPeak()>, null, null, Location.Left, -110, is_waiting_to_remove_bot ? Color.Yellow : Color.White, null, null, HudTextRev.VisibleToStringAndColor, Spectators.DefaultVisibility);
	CreateHudText([], null, "Mod by Lemonaid:\nChateau Guillard: KFVAY\nKanezaka: H4H7K\nDorado: NNNS6\nEichenwalde: MH9DN\nHollywood: K3235\nMalevento: 8GRV8\\Rout", "____\nCredits to:\n Shingen\n SgtMoody\nDevelopful\n", Location.Left, -1000, Color.White, Color.LimeGreen, Color.Green, HudTextRev.VisibleTo, Spectators.VisibleAlways);
	# Create Sombra Stealth Timer IWT
	CreateProgressBarInWorldText(HeroOf(LocalPlayer()) == Hero.Sombra && LocalPlayer().is_invisible ? LocalPlayer() : [], LocalPlayer().sombra_stealth_timer, "Invisible", UpdateEveryFrame(EyePosition(LocalPlayer()) + 100 * DirectionFromAngles(HorizontalFacingAngleOf(LocalPlayer()), VerticalFacingAngleOf(LocalPlayer()) + 13.5)), 1.2, Clipping.DoNotClip, Color.Purple, Color.White, ProgressBarWorldEvaluation.VisibleToPositionAndValues, Spectators.DefaultVisibility);
	money_amount = 1400;
	set_random_perks();
	# Priority A: Players to Bots Damage Increase
	StartDamageModification(FilteredArray(AllPlayers(Team.Team2), ArrayElement().is_target_in_los && ArrayElement().target.ab_priority == 1), combatants, 125, DamageModificationRev.ReceiversAndDamagers);
	# Priority A: Bots to Players Damage Decrease
	StartDamageModification(combatants, FilteredArray(AllPlayers(Team.Team2), ArrayElement().is_target_in_los && ArrayElement().target.ab_priority == 1), 75, DamageModificationRev.ReceiversAndDamagers);
	# Priority C: Players to Players Healing Increase
	StartHealingModification(FilteredArray(combatants, NormalizedHealth(ArrayElement()) <= 0.5 && ArrayElement().last_damage_taken_t + 2.5 > TotalTimeElapsed()), FilteredArray(combatants, ArrayElement().ab_priority == 3), 140, HealingModificationRev.ReceiversDamagersAndDamagePercent);
	# Nemesis: Your Nemesis IWT
	CreateInWorldText(LocalPlayer().nemesis_killer ? LocalPlayer() : [], "Your Nemesis", LocalPlayer().nemesis_killer, 1.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndPosition, Color.Team2, Spectators.DefaultVisibility);
	CreateEffect(AllPlayers(Team.All), Effect.Ring, Color.SkyBlue, ability_shop_pos, 2, EffectRev.VisibleTo);
	CreateInWorldText(AllPlayers(Team.All), "Ability Shop", ability_shop_pos, 1.5, Clipping.DoNotClip, InworldTextRev.VisibleTo, Color.SkyBlue, Spectators.DefaultVisibility);
	CreateHudText(!LocalPlayer().is_combatant || LocalPlayer().downed_start_t || LocalPlayer().in_buy_menu_start_t || LocalPlayer().is_changing_heroes ? [] : LocalPlayer(), DistanceBetween(LocalPlayer(), ability_shop_pos) <= 2 ? MatchTime() ? <"Press <0> to buy Abilities", InputBindingString(Button.Interact)> : <"\n Press <0> to buy Abilities \n", InputBindingString(Button.Interact)> : LocalPlayer().can_use_drop_in_buy_menu || MatchTime() ? <"Hold <0> to buy Abilities", InputBindingString(Button.Interact)> : "", null, null, Location.Top, -80, Color.Green, null, null, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	# Create Buy Menu IWTs, on scale 2.5 1 space is 8.5 pixels
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃", buy_menu_base_pos - 21 * buy_menu_left_up_forward[1] + 90 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleTo, Color.White, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃", buy_menu_base_pos - 21 * buy_menu_left_up_forward[1] - 90 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleTo, Color.White, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Refund", buy_menu_base_pos + 45 * buy_menu_left_up_forward[1] + 90 * FirstOf(buy_menu_left_up_forward), 3, Clipping.DoNotClip, InworldTextRev.VisibleTo, Color.Green, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), <"[<0>] <1>", InputBindingString(Button.Melee), LocalPlayer().is_showing_active_abilities ? "Show passive Abilities" : "Show active Abilities">, buy_menu_base_pos + 45 * buy_menu_left_up_forward[1], 3, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.Green, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), <"[<0>] Leave", InputBindingString(Button.Interact)>, buy_menu_base_pos + 45 * buy_menu_left_up_forward[1] - 90 * FirstOf(buy_menu_left_up_forward), 3, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.Green, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().ab_priority ? "Priority A\n  Swap" : "Priority A\n 1200$", buy_menu_base_pos + 20 * buy_menu_left_up_forward[1] + 112.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().ab_priority ? Color.Yellow : CustomColor(0, 134, 171, 255), Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().ab_priority ? "Priority B\n  Swap" : "Priority B\n 1200$", buy_menu_base_pos - 2.5 * buy_menu_left_up_forward[1] + 112.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().ab_priority ? Color.Yellow : CustomColor(0, 134, 171, 255), Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().ab_priority ? "Priority C\n  Swap" : "Priority C\n 1200$", buy_menu_base_pos - 25 * buy_menu_left_up_forward[1] + 112.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().ab_priority ? Color.Yellow : CustomColor(0, 134, 171, 255), Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Stim Infusion\n    Swap" : "Stim Infusion\n   1200$" : LocalPlayer().ab_headhunter ? "Headhunter II\n  800$" : "Headhunter I\n  800$", buy_menu_base_pos + 20 * buy_menu_left_up_forward[1] + 67.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : LocalPlayer().ab_headhunter < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Smoke Bomb\n    Swap" : "Smoke Bomb\n   1200$" : LocalPlayer().ab_antigens ? "Antigens II\n   600$" : "Antigens I\n   600$", buy_menu_base_pos - 2.5 * buy_menu_left_up_forward[1] + 67.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : LocalPlayer().ab_antigens < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? "" : LocalPlayer().ab_quick_fix ? "Quick Fix II\n  700$" : "Quick Fix I\n  700$", buy_menu_base_pos - 25 * buy_menu_left_up_forward[1] + 67.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().ab_quick_fix < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Cloak\n Swap" : "Cloak\n1200$" : LocalPlayer().ab_charged ? "Charged II\n  700$" : "Charged I\n  700$", buy_menu_base_pos + 20 * buy_menu_left_up_forward[1] + 22.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : LocalPlayer().ab_charged < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Resurgence\n   Swap" : "Resurgence\n  1200$" : LocalPlayer().ab_haste ? "Haste II\n  800$" : "Haste I\n  800$", buy_menu_base_pos - 2.5 * buy_menu_left_up_forward[1] + 22.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : LocalPlayer().ab_haste < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? "" : LocalPlayer().ab_heavy_impact ? "Heavy Impact II\n  1000$" : "Heavy Impact I\n  1000$", buy_menu_base_pos - 25 * buy_menu_left_up_forward[1] + 22.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().ab_heavy_impact < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Feint\nSwap" : "Feint\n1200$" : LocalPlayer().ab_second_wind ? "Second Wind II\n   1000$" : "Second Wind I\n   1000$", buy_menu_base_pos + 20 * buy_menu_left_up_forward[1] - 22.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : LocalPlayer().ab_second_wind < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Tear Gas\n Swap" : "Tear Gas\n   1200$" : LocalPlayer().ab_triage ? "Triage II\n  700$" : "Triage I\n  700$", buy_menu_base_pos - 2.5 * buy_menu_left_up_forward[1] - 22.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : LocalPlayer().ab_triage < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? "" : LocalPlayer().ab_resilience ? "Resilience II\n   800$" : "Resilience I\n   800$", buy_menu_base_pos - 25 * buy_menu_left_up_forward[1] - 22.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().ab_resilience < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Frenzy\n  Swap" : "Frenzy\n 1200$" : "+5% Health\n   500$", buy_menu_base_pos + 20 * buy_menu_left_up_forward[1] - 67.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : Color.Green, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Chain Hack\n   Swap" : "Chain Hack\n  1200$" : "+5% Damage\n  500$", buy_menu_base_pos - 2.5 * buy_menu_left_up_forward[1] - 67.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : Color.Green, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? "" : "+5% Healing\n  500$", buy_menu_base_pos - 25 * buy_menu_left_up_forward[1] - 67.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.Green, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Limited offer!", buy_menu_base_pos + 22.5 * buy_menu_left_up_forward[1] - 112.5 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.White, Spectators.DefaultVisibility);
	CreateInWorldText(LocalPlayer().in_buy_menu_start_t && LocalPlayer().is_showing_active_abilities ? LocalPlayer() : [], <"Hold or double tap <0> to use your active ability\n", InputBindingString(Button.Melee)>, buy_menu_base_pos - 25 * buy_menu_left_up_forward[1], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.White, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), <"Press <0> to buy\n", InputBindingString(Button.PrimaryFire)>, buy_menu_base_pos - 74 * buy_menu_left_up_forward[1] - 55 * FirstOf(buy_menu_left_up_forward), 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.White, Spectators.DefaultVisibility);
	# Create Ability Entities and Cursor
	CreateInWorldText(LocalPlayer().in_buy_menu_start_t ? LocalPlayer() : [], <"<0>$\n", RoundToInteger(money_mult * money_amount - LocalPlayer().money_spent_amount, Rounding.Down)>, buy_menu_base_pos - 74 * buy_menu_left_up_forward[1], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.White, Spectators.DefaultVisibility);
	CreateInWorldText(LocalPlayer().in_buy_menu_start_t ? LocalPlayer() : [], "▲", UpdateEveryFrame(buy_menu_base_pos - (4 + VerticalFacingAngleOf(LocalPlayer())) * buy_menu_left_up_forward[1] + HorizontalFacingAngleOf(LocalPlayer()) * FirstOf(buy_menu_left_up_forward)), 4, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndColor, CustomColor(245 + 10 * SineFromRadians(4 * TotalTimeElapsed()), 205 + 50 * SineFromRadians(4 * TotalTimeElapsed()), 200 * SineFromRadians(4 * TotalTimeElapsed()), 255), Spectators.DefaultVisibility);
	# Use Update Every Frame to avoid showing the String when the cursor is out of bounds, resulting in 0
	CreateInWorldText(UpdateEveryFrame(LocalPlayer().in_buy_menu_start_t && AbsoluteValue(HorizontalFacingAngleOf(LocalPlayer())) < 135 && AbsoluteValue(VerticalFacingAngleOf(LocalPlayer()) + 11.25) < 45 ? LocalPlayer() : []), UpdateEveryFrame(VerticalFacingAngleOf(LocalPlayer()) < -33.75 ? ["Leave Buy Menu\n", LocalPlayer().is_showing_active_abilities ? "Swap to the passive abilities page\n" : "Swap to the active abilities page\n", "Refund your money\n"][RoundToInteger((HorizontalFacingAngleOf(LocalPlayer()) + 135) / 90, Rounding.Down)] : [VerticalFacingAngleOf(LocalPlayer()) < -11.25 ? "The limited offer changes every wave\n" : ["Mystery Swap: Periodically swap to a random hero with a free ult\n         Health, damage and healing is increased by 20%", "Bulletstorm: Your weapon can hold unlimited ammo\n", "Die Hard: Your health regeneration delay is halved\n", <"Brass Knuckles: While using quick melee you are immune to Cloakers' charge attack\n<0>", "     Your quick melee attack knocks enemies down (15 second cooldown)">, "Vampiric: Heal for 30% of all dealt damage\n", "Crash N' Dash: Regenerate health while moving faster than 8 meters per second\n", "Golden Hour: You can be revived twice as fast\n", "Supercharge: Healing allies slowly charges their ultimate\n", "Nemesis: After going down automatically revive yourself when your killer dies\n", "Spec Ops: Gain 50 armour and immunity to grenadier smokes\n", "Sharpshooter: Deal 50% more damage to enemies that are further than 20 meters away\n", "Shockproof: Gain +15% speed and pass through enemies. \nBecome immune and deflect Taser electrocution attempts", <"<0>: <1>", LocalPlayer().talent_text[1], LocalPlayer().talent_text[2]>, <"<0>: <1>", LocalPlayer().talent_text[3], LocalPlayer().talent_text[4]>][current_perks[VerticalFacingAngleOf(LocalPlayer()) >= 11.25]], (LocalPlayer().is_showing_active_abilities ? ["Frenzy: Become invincible and force enemies to target you\n", <"          Chain Hack: Hack and electrocute an enemy\n<0>", "Can jump to nearby enemies up to 3 times with a shorter duration after each jump">, ""] : ["Increase your health by 5%\n", "Increase your damage by 5%\n", "Increase your healing by 5%\n"])[RoundToInteger((VerticalFacingAngleOf(LocalPlayer()) + 33.75) / 22.5, Rounding.Down)], (LocalPlayer().is_showing_active_abilities ? ["Feint: Dodge and dash into any direction, creating an explosion from start to finish", "Tear Gas: Launch a grenade that releases lingering noxious gas\n                 Enemies in the gas get stunned", ""] : [LocalPlayer().ab_second_wind ? "Second Wind II: Revive yourself when downed. Can only happen once every 60 seconds" : "Second Wind I: Revive yourself when downed. Can only happen once every 90 seconds", LocalPlayer().ab_triage ? "Triage II: Heal 50% more to players under 50% health\n" : "Triage I: Heal 25% more to players under 50% health\n", LocalPlayer().ab_resilience ? "Resilience II: Receive 20% less damage\nReceive 60% less knockback and inflict 60% more" : "Resilience I: Receive 20% less damage\nReceive 30% less knockback and inflict 30% more"])[RoundToInteger((VerticalFacingAngleOf(LocalPlayer()) + 33.75) / 22.5, Rounding.Down)], (LocalPlayer().is_showing_active_abilities ? ["Cloak: Become invisible and freeze nearby enemies when you become visible again\n", "   Resurgence: Heal yourself for 300 health per second\nIf you are at full health, heal a nearby injured ally instead", ""] : [LocalPlayer().ab_charged ? "Charged II: Ultimates cost 30% less\n" : "Charged I: Ultimates cost 15% less\n", LocalPlayer().ab_haste ? "Haste II: Ability cooldown is reduced by 50%\nDoes not affect abilities with multiple charges" : "Haste I: Ability cooldown is reduced by 25%\nDoes not affect abilities with multiple charges", LocalPlayer().ab_heavy_impact ? "Heavy Impact II: Every hit has a chance to stun the enemy for 2 seconds\n" : "Heavy Impact I: Every hit has a chance to stun the enemy for 1 second\n"])[RoundToInteger((VerticalFacingAngleOf(LocalPlayer()) + 33.75) / 22.5, Rounding.Down)], (LocalPlayer().is_showing_active_abilities ? ["Stim Infusion: Instantly start health regeneration\nGain +100% damage, +100% healing and +50% speed", "      Smoke Bomb: Create a smoke screen\nEnemies are less accurate when targeting allies in the smoke", ""] : [LocalPlayer().ab_headhunter ? "Headhunter II: Critical hits deal 60% more damage\n" : "Headhunter I: Critical hits deal 30% more damage\n", LocalPlayer().ab_antigens ? "Antigens II: Receive 40% more healing and a natural overtime heal" : "Antigens I: Receive 20% more healing and a natural overtime heal", LocalPlayer().ab_quick_fix ? "Quick Fix II: Eliminations restore 100 HP and shortly increase speed by 30%\n" : "Quick Fix I: Eliminations restore 50 HP and shortly increase speed by 15%\n"])[RoundToInteger((VerticalFacingAngleOf(LocalPlayer()) + 33.75) / 22.5, Rounding.Down)], ["    Priority A: Enemies are more likely to target you\nEnemies targeting you take 25% more and deal 25% less damage", <"         Priority B: Enemies are less likely to target you\n<0>", "Gain +20% damage and speed if you did not take damage in the last 3 seconds">, <"  Priority C: Enemies are much less likely to target you\n<0>", "Heal 40% more to allies in combat. Heal for 25% of dealt healing">][RoundToInteger((VerticalFacingAngleOf(LocalPlayer()) + 33.75) / 22.5, Rounding.Down)]][RoundToInteger((HorizontalFacingAngleOf(LocalPlayer()) + 135) / 45, Rounding.Down)]), buy_menu_base_pos - 55 * buy_menu_left_up_forward[1], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.White, Spectators.DefaultVisibility);
	# Skip Assembling Heroes
	SetMatchTime(3);
	WaitUntil(IsGameInProgress(), 3.5);
	SetMatchTime(0);
	# Workaround: Need to reduce Slots because of spectator bug
	if (NumberOfSlots(Team.Team1) <= 8)
	{
		CreateDummyBot(Hero.Ana, Team.Team2, gamemode, 1000 * Down(), Forward());
		if (NumberOfSlots(Team.Team1) <= 8)
		{
			CreateDummyBot(Hero.Roadhog, Team.Team2, 3, 1000 * Down(), Forward());
		}
		if (NumberOfSlots(Team.Team1) <= 5)
		{
			CreateDummyBot(Hero.Cassidy, Team.Team2, 4, 1000 * Down(), Forward());
		}
		if (NumberOfSlots(Team.Team1) <= 6)
		{
			CreateDummyBot(Hero.Cassidy, Team.Team2, 5, 1000 * Down(), Forward());
		}
		CreateDummyBot(Hero.Soldier76, Team.Team2, 6, 1000 * Down(), Forward());
		CreateDummyBot(Hero.Soldier76, Team.Team2, 7, 1000 * Down(), Forward());
		CreateDummyBot(Hero.Soldier76, Team.Team2, 8, 1000 * Down(), Forward());
		CreateDummyBot(Hero.Soldier76, Team.Team2, 9, 1000 * Down(), Forward());
		CreateDummyBot(Hero.Soldier76, Team.Team2, 10, 1000 * Down(), Forward());
	}
	is_gmut_enabled = true;
	Wait(2, WaitBehavior.IgnoreCondition);
}

rule: "[Tutorial] Close HUD"
Event.OngoingPlayer
if (Tut_Active == true)
if (IsButtonHeld(EventPlayer(), Button.Reload) == true)
if (IsButtonHeld(EventPlayer(), Button.Crouch) == true)
if (IsAlive(EventPlayer()) == true)
{
	Wait(0.25, WaitBehavior.IgnoreCondition);
	Tut_Active = false;
	SmallMessage(EventPlayer(), <"press <0> + <1> to toggle hero changes", InputBindingString(Button.Crouch), InputBindingString(Button.Reload)>);
}

rule: "[Tutorial] Open HUD"
Event.OngoingPlayer
if (Tut_Active == false)
if (IsButtonHeld(EventPlayer(), Button.Reload) == true)
if (IsButtonHeld(EventPlayer(), Button.Crouch) == true)
if (IsAlive(EventPlayer()) == true)
{
	Wait(0.25, WaitBehavior.IgnoreCondition);
	Tut_Active = true;
}

rule: "Team 1: Player Damage Automater (+-)"
Event.OngoingPlayer
Team.Team1
if (Damage_Dealt[true] != Damage_Dealt[false])
{
	Damage_Dealt[true] = Damage_Dealt[false];
	SetDamageDealt(EventPlayer(), Damage_Dealt[true]);
}

rule: "Team 1: Player HP Automater (+-)"
Event.OngoingPlayer
Team.Team1
if (health_percent[true] != health_percent[false])
{
	health_percent[true] = health_percent[false];
	SetMaxHealth(EventPlayer(), health_percent[true]);
}

rule: "Team 1: Player Resistance Automater (+-)"
Event.OngoingPlayer
Team.Team1
if (Damage_Received[true] != Damage_Received[false])
{
	Damage_Received[true] = Damage_Received[false];
	SetDamageReceived(EventPlayer(), Damage_Received[true]);
}

rule: "Team 1: Player Move Speed Automater (+-)"
Event.OngoingPlayer
Team.Team1
if (Move_Speed[true] != Move_Speed[false])
{
	Move_Speed[true] = Move_Speed[false];
	SetMoveSpeed(EventPlayer(), Move_Speed[true]);
}

rule: "Team 1: Player Healing Automater (+-)"
Event.OngoingPlayer
Team.Team1
if (healing_dealt_percent[true] != healing_dealt_percent[false])
{
	healing_dealt_percent[true] = healing_dealt_percent[false];
	SetHealingDealt(EventPlayer(), healing_dealt_percent[true]);
}

rule: "Team 1: Protect from One-shots if health is over 50%"
Event.OngoingPlayer
Team.Team1
if (NormalizedHealth(EventPlayer()) >= 0.5)
{
	SetStatus(EventPlayer(), null, Status.Unkillable, 9999);
	WaitUntil(NormalizedHealth(EventPlayer()) < 0.5, 99999);
	Wait(0.4, WaitBehavior.RestartWhenTrue);
	LoopIfConditionIsTrue();
	ClearStatus(EventPlayer(), Status.Unkillable);
}

rule: "Team 2 CG: Improve Air Movement near Jump Pad"
Event.OngoingPlayer
Team.Team2
if (is_map_cg == true)
if ((nav_idx == 4 || nav_idx == 45) == true)
if (is_alive == true)
if (IsInAir(EventPlayer()) == true)
if (is_using_combat_pathfinding == 0)
if (HorizontalSpeedOf(EventPlayer()) >= 5)
if (DistanceBetween(EventPlayer(), Vector(XOf(nav_pos), YOf(PositionOf(EventPlayer())), ZOf(nav_pos))) <= 0.5)
{
	ApplyImpulse(EventPlayer(), -1 * DirectionFromAngles(HorizontalAngleFromDirection(VelocityOf(EventPlayer())), 0), 0.001, Relative.ToWorld, ContraryMotion.CancelXYZ);
	Wait(0.25, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Global (First Wave): Create Mutator Start HUD, Scale Values, Set Level"
if (wave_number == false)
if (IsTrueForAny(combatants, IsButtonHeld(ArrayElement(), Button.Interact) && DistanceBetween(ArrayElement(), ability_shop_pos) > 2) == true)
{
	DestroyHudText(FirstOf(game_or_mutator_start_huds));
	DestroyHudText(game_or_mutator_start_huds[1]);
	EnableMusic();
	wave_number = 1;
	SetUltimateCharge(combatants, 0);
	AllPlayers(Team.Team2).base_tier = 1;
	enable_normal_spawns = true;
	ModifyTeamScore(Team.Team1, 1);
	if (gamemode == 2)
	{
		enable_objective_enemy_spawn = 2;
		iv_dom_objective_pos = RandomValueInArray(iv_dom_objective_all_pos_list);
		objective_progress = [0, 0];
	}
	else
	{
		enable_objective_enemy_spawn = true;
		(<Player>PlayersInSlot(gamemode, Team.Team2)).base_tier = -1;
	}
}

rule: "Global (Next Wave): Revive Players, Scale Values, Set Level, Set Mutators"
if (objective_phase_number == 3)
if (NumberOfLivingPlayers(Team.Team2) == 0)
{
	if (wave_number >= 15 && length == 0)
	{
		async! declare_victory();
	}
	else if (wave_number >= 22 && length == 1)
	{
		async! declare_victory();
	}
	objective_phase_number = false;
	(<Player>FilteredArray(combatants, ArrayElement().downed_start_t && ArrayElement().downed_start_t + 0.1 < TotalTimeElapsed())).downed_start_t = false;
	BigMessage(AllPlayers(Team.All), "Wave cleared!");
	money_amount += (wave_number >= 2 ? 30 : 45) + 25 * wave_number;
	set_random_perks();
	if (is_mutator_mode_enabled && wave_number % 2 == 1 || is_apocalyptic)
	{
		SkipIf(is_hard_mode_enabled || is_apocalyptic, 1);
		mut_count += 1;
		mut_add_mutator();
		SkipIf(!(is_hard_mode_enabled || is_apocalyptic), 1);
		mut_count += 1;
	}
	DisableMusic();
	SetMatchTime(20);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	WaitUntil(!MatchTime(), 99999);
	EnableMusic();
	wave_number += 1;
	enable_normal_spawns = true;
	ModifyTeamScore(Team.Team1, 1);
	if (gamemode == 2)
	{
		enable_objective_enemy_spawn = 2;
		hvt_dom_objective_killed_count = false;
		iv_dom_objective_pos = RandomValueInArray(RemoveFromArray(iv_dom_objective_all_pos_list, iv_dom_objective_pos));
		objective_progress = [0, 0];
	}
	else
	{
		enable_objective_enemy_spawn = true;
	}
	if (wave_number == 2)
	{
		(<Player>PlayersInSlot(5, Team.Team2)).base_tier = 2;
		(<Player>PlayersInSlot(6, Team.Team2)).base_tier = 2;
	}
	else if (wave_number == 3)
	{
		(<Player>PlayersInSlot(8, Team.Team2)).base_tier = 2;
	}
	else if (wave_number == 4)
	{
		(<Player>PlayersInSlot(2, Team.Team2)).base_tier = 3;
		(<Player>PlayersInSlot(3, Team.Team2)).base_tier = 3;
	}
	else if (wave_number == 5)
	{
		(<Player>PlayersInSlot(7, Team.Team2)).base_tier = 2;
	}
	else if (wave_number == 8)
	{
		(<Player>PlayersInSlot(7, Team.Team2)).base_tier = 3;
	}
	else if (wave_number == 9)
	{
		(<Player>PlayersInSlot(4, Team.Team2)).base_tier = 3;
	}
	AbortIf(!mut_expendable);
	(<Player>FilteredArray(PlayersOnHero(Hero.Soldier76, Team.Team2), ArrayElement().base_tier <= 2)).is_expendable = true;
}

rule: "Global: Enable normal Spawns"
if ((objective_phase_number == 1 || objective_phase_number == 2) == true)
if (enable_normal_spawns == false)
if (NumberOfLivingPlayers(Team.Team2) < NumberOfPlayers(Team.Team2))
{
	temp_1 = FilteredArray(AllLivingPlayers(Team.Team2), !ArrayElement().is_living_boss);
	temp_1 = 2 * CountOf(FilteredArray(temp_1, ArrayElement().real_tier <= 2)) + 5 * CountOf(FilteredArray(temp_1, ArrayElement().real_tier == 3)) + 10 * CountOf(FilteredArray(temp_1, ArrayElement().real_tier == 4));
	if (temp_1 <= Max(5, TotalTimeElapsed() - last_spawn_phase_end_t - 25 - 20 * CountOf(FilteredArray(combatants, ArrayElement().downed_start_t)) / combatants_count))
	{
		Wait((gamemode == 1 && objective_phase_number == 1 || gamemode == 2 && IsTrueForAny(AllLivingPlayers(Team.Team2), ArrayElement().is_living_boss) ? 11 : 6) - (mut_reinforcements ? 3 : 0), WaitBehavior.AbortWhenFalse);
		AbortIfConditionIsFalse();
		enable_normal_spawns = true;
		ModifyTeamScore(Team.Team1, 1);
	}
	else
	{
		Wait(1, WaitBehavior.AbortWhenFalse);
		LoopIfConditionIsTrue();
	}
}

rule: "Global: Disable normal Spawns"
if ((objective_phase_number == 1 || objective_phase_number == 2) == true)
if (enable_normal_spawns == true)
if (NumberOfLivingPlayers(Team.Team2) == NumberOfPlayers(Team.Team2))
{
	enable_normal_spawns = false;
	last_spawn_phase_end_t = TotalTimeElapsed();
}

rule: "Global: Defeat"
if (wave_number > 0)
if (IsTrueForAll(combatants, ArrayElement().downed_start_t) == true)
{
	Wait(2, WaitBehavior.AbortWhenFalse);
	AbortIf(is_victory_declared);
	is_victory_declared = true;
	DeclareTeamVictory(Team.Team2);
}

rule: "Global: Anti-crash"
if (NumberOfPlayers(Team.Team2) > 7)
if (ServerLoadAverage() >= 255)
{
	is_load_limit_reached = true;
	if (!is_waiting_to_remove_bot && wave_number)
	{
		WaitUntil(ServerLoadAverage() < 255, 4);
		if (ServerLoadAverage() >= 255)
		{
			is_waiting_to_remove_bot = true;
			WaitUntil(ServerLoadAverage() < 255, 99999);
		}
	}
	else
	{
		WaitUntil(ServerLoadAverage() < 255, 99999);
	}
	is_load_limit_reached = false;
}

rule: "Team 1 Button: Interact, Open / Leave Buy Menu"
Event.OngoingPlayer
Team.Team1
if (IsButtonHeld(EventPlayer(), Button.Interact) == true)
{
	if (in_buy_menu_start_t)
	{
		leave_buy_menu();
	}
	else if (DistanceBetween(EventPlayer(), ability_shop_pos) <= 2)
	{
		open_buy_menu();
	}
	else if (can_use_drop_in_buy_menu || MatchTime())
	{
		Wait(0.4, WaitBehavior.AbortWhenFalse);
		open_buy_menu();
	}
	Wait(0.05, WaitBehavior.IgnoreCondition);
}

rule: "Team 1: Leave Buy Menu when downed, health low, stunned or tased"
Event.OngoingPlayer
Team.Team1
if (in_buy_menu_start_t == true)
if ((downed_start_t || NormalizedHealth(EventPlayer()) < 0.5 || HasStatus(EventPlayer(), Status.Stunned) || tased_end_t >= TotalTimeElapsed()) == true)
{
	leave_buy_menu();
	AbortIf(NormalizedHealth(EventPlayer()) > 0.4);
	SetPlayerHealth(EventPlayer(), 0.4 * MaxHealth(EventPlayer()));
}

rule: "Team 1: Toggle Show active Ability"
Event.OngoingPlayer
Team.Team1
if (in_buy_menu_start_t == true)
if (IsButtonHeld(EventPlayer(), Button.Melee) == true)
{
	AbortIf(in_buy_menu_start_t + 0.1 >= TotalTimeElapsed());
	is_showing_active_abilities = !is_showing_active_abilities;
}

rule: "Team 1: Buy Ability"
Event.OngoingPlayer
Team.Team1
if (in_buy_menu_start_t == true)
if (IsButtonHeld(EventPlayer(), Button.PrimaryFire) == true)
{
	AbortIf(in_buy_menu_start_t + 0.1 >= TotalTimeElapsed() || AbsoluteValue(HorizontalFacingAngleOf(EventPlayer())) >= 135 || AbsoluteValue(VerticalFacingAngleOf(EventPlayer()) + 11.25) >= 45 || tased_end_t >= TotalTimeElapsed());
	# Grid coordinates of selected panel
	temp_1 = [RoundToInteger((HorizontalFacingAngleOf(EventPlayer()) + 135) / 45, Rounding.Down), RoundToInteger((VerticalFacingAngleOf(EventPlayer()) + 56.25) / 22.5, Rounding.Down)];
	if (temp_1[1] == 0)
	{
		if (FirstOf(temp_1) <= 1)
		{
			leave_buy_menu();
		}
		else if (FirstOf(temp_1) <= 3)
		{
			is_showing_active_abilities = !is_showing_active_abilities;
		}
		else
		{
			if (money_spent_amount)
			{
				remove_active_ability();
				money_spent_amount = false;
				ab_headhunter = false;
				ab_quick_fix = false;
				ab_charged = false;
				ab_heavy_impact = false;
				ab_second_wind = false;
				ab_triage = false;
				if (ab_resilience)
				{
					ab_resilience = false;
					Damage_Received += 20;
				}
				SetKnockbackDealt(EventPlayer(), 100);
				SetKnockbackReceived(EventPlayer(), 100);
				ab_antigens = false;
				StopHealingModification(heal_mod[1]);
				StopHealOverTime(heal_mod[2]);
				StopDamageModification(damage_mod[11]);
				StopDamageModification(damage_mod[12]);
				ab_haste = false;
				ab_priority = false;
				health_percent -= ab_health_bonus;
				ab_health_bonus = false;
				Damage_Dealt -= ab_damage_bonus;
				ab_damage_bonus = false;
				healing_dealt_percent -= ab_healing_bonus;
				ab_healing_bonus = false;
				perk_bulletstorm = false;
				perk_die_hard = false;
				perk_brass_knuckles = false;
				perk_vampiric = false;
				perk_crash_n_dash = false;
				perk_golden_hour = false;
				perk_super_charge = false;
				if (perk_nemesis)
				{
					DestroyEffect(nemesis_beam_effect);
					perk_nemesis = false;
				}
				if (perk_special_operator)
				{
					RemoveHealthPoolFromPlayer(HP_Pool[2]);
					perk_special_operator = false;
				}
				perk_sharpshooter = false;
				StopDamageModification(damage_mod[10]);
				Talent1 = false;
				Talent2 = false;
				if (perk_mystery_swap)
				{
					health_percent -= 20;
					Damage_Dealt -= 20;
					healing_dealt_percent -= 20;
					StopForcingHero(EventPlayer());
					perk_mystery_swap = false;
				}
				if (perk_shockproof)
				{
					EnableMovementCollisionWithPlayers(EventPlayer());
					Move_Speed -= 15;
					MinWait();
					perk_shockproof = false;
				}
				SmallMessage(EventPlayer(), "Money Refunded");
				update_ab_string_and_play_sound();
				Abort();
			}
		}
	}
	else
	{
		if (FirstOf(temp_1) == 0)
		{
			if (temp_1[1] >= 2)
			{
				temp_2 = current_perks[temp_1[1] >= 3];
				if (temp_2 == 0)
				{
					if (!perk_mystery_swap)
					{
						temp_2 = 500;
						check_if_enough_money();
						if (temp_2)
						{
							health_percent += 20;
							Damage_Dealt += 20;
							healing_dealt_percent += 20;
							perk_mystery_swap = TotalTimeElapsed() + 90;
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_2 == 1)
				{
					if (!perk_bulletstorm)
					{
						temp_2 = 1000;
						check_if_enough_money();
						if (temp_2)
						{
							perk_bulletstorm = true;
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_2 == 2)
				{
					if (!perk_die_hard)
					{
						temp_2 = 700;
						check_if_enough_money();
						if (temp_2)
						{
							perk_die_hard = true;
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_2 == 3)
				{
					if (!perk_brass_knuckles)
					{
						temp_2 = 700;
						check_if_enough_money();
						if (temp_2)
						{
							perk_brass_knuckles = true;
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_2 == 4)
				{
					if (!perk_vampiric)
					{
						temp_2 = 1000;
						check_if_enough_money();
						if (temp_2)
						{
							perk_vampiric = true;
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_2 == 5)
				{
					if (!perk_crash_n_dash)
					{
						temp_2 = 700;
						check_if_enough_money();
						if (temp_2)
						{
							perk_crash_n_dash = true;
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_2 == 6)
				{
					if (!perk_golden_hour)
					{
						temp_2 = 1000;
						check_if_enough_money();
						if (temp_2)
						{
							perk_golden_hour = true;
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_2 == 7)
				{
					if (!perk_super_charge)
					{
						temp_2 = 700;
						check_if_enough_money();
						if (temp_2)
						{
							perk_super_charge = true;
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_2 == 8)
				{
					if (!perk_nemesis)
					{
						temp_2 = 800;
						check_if_enough_money();
						if (temp_2)
						{
							perk_nemesis = true;
							CreateBeamEffect(nemesis_killer ? AllPlayers(Team.All) : [], BeamType.BadBeam, PositionOf(EventPlayer()), nemesis_killer, Color.Black, EffectRev.VisibleToPositionAndRadius);
							nemesis_beam_effect = LastCreatedEntity();
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_2 == 9)
				{
					if (!perk_special_operator)
					{
						temp_2 = 600;
						check_if_enough_money();
						if (temp_2)
						{
							AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, 50, true, true);
							HP_Pool[2] = LastCreatedHealthPool();
							perk_special_operator = true;
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_2 == 10)
				{
					if (!perk_sharpshooter)
					{
						temp_2 = 900;
						check_if_enough_money();
						if (temp_2)
						{
							perk_sharpshooter = true;
							StartDamageModification(FilteredArray(AllPlayers(Team.Team2), DistanceBetween(EventPlayer(), ArrayElement()) > 20), EventPlayer(), 150, DamageModificationRev.ReceiversDamagersAndDamagePercent);
							damage_mod[10] = LastDamageModificationID();
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_2 == 11)
				{
					if (!perk_shockproof)
					{
						temp_2 = 700;
						check_if_enough_money();
						if (temp_2)
						{
							DisableMovementCollisionWithPlayers(EventPlayer());
							Move_Speed += 15;
							perk_shockproof = true;
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_2 == 12)
				{
					if (!Talent1)
					{
						temp_2 = 1600;
						check_if_enough_money();
						if (temp_2)
						{
							Talent1 = true;
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_2 == 13)
				{
					if (!Talent2)
					{
						temp_2 = 1600;
						check_if_enough_money();
						if (temp_2)
						{
							Talent2 = true;
							update_ab_string_and_play_sound();
						}
					}
				}
			}
		}
		else if (FirstOf(temp_1) == 1)
		{
			if (is_showing_active_abilities)
			{
				if (temp_1[1] == 1)
				{
					temp_1 = 4;
					buy_active_ability();
				}
				else if (temp_1[1] == 2)
				{
					temp_1 = 8;
					buy_active_ability();
				}
			}
			else
			{
				temp_2 = 500;
				check_if_enough_money();
				if (temp_2)
				{
					if (temp_1[1] == 1)
					{
						ab_health_bonus += 5;
						health_percent += 5;
					}
					else if (temp_1[1] == 2)
					{
						ab_damage_bonus += 5;
						Damage_Dealt += 5;
						SetDamageDealt(EventPlayer(), Damage_Dealt);
					}
					else
					{
						ab_healing_bonus += 5;
						healing_dealt_percent += 5;
					}
					update_ab_string_and_play_sound();
				}
			}
		}
		else if (FirstOf(temp_1) == 2)
		{
			if (is_showing_active_abilities)
			{
				if (temp_1[1] == 1)
				{
					temp_1 = 3;
					buy_active_ability();
				}
				else if (temp_1[1] == 2)
				{
					temp_1 = 7;
					buy_active_ability();
				}
			}
			else
			{
				if (temp_1[1] == 1)
				{
					if (ab_second_wind < 2)
					{
						temp_2 = 1000;
						check_if_enough_money();
						if (temp_2)
						{
							ab_second_wind = ab_second_wind ? 2 : 1;
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_1[1] == 2)
				{
					if (ab_triage < 2)
					{
						temp_2 = 700;
						check_if_enough_money();
						if (temp_2)
						{
							ab_triage = ab_triage ? 2 : 1;
							update_ab_string_and_play_sound();
						}
					}
				}
				else
				{
					if (ab_resilience < 2)
					{
						temp_2 = 800;
						check_if_enough_money();
						if (temp_2)
						{
							ab_resilience = ab_resilience ? 2 : 1;
							Damage_Received -= 20;
							SetKnockbackDealt(EventPlayer(), 100 + 30 * ab_resilience);
							SetKnockbackReceived(EventPlayer(), 100 - 30 * ab_resilience);
							update_ab_string_and_play_sound();
						}
					}
				}
			}
		}
		else if (FirstOf(temp_1) == 3)
		{
			if (is_showing_active_abilities)
			{
				if (temp_1[1] == 1)
				{
					temp_1 = 2;
					buy_active_ability();
				}
				else if (temp_1[1] == 2)
				{
					temp_1 = 6;
					buy_active_ability();
				}
			}
			else
			{
				if (temp_1[1] == 1)
				{
					if (ab_charged < 2)
					{
						temp_2 = 700;
						check_if_enough_money();
						if (temp_2)
						{
							ab_charged = ab_charged ? 2 : 1;
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_1[1] == 2)
				{
					if (ab_haste < 2)
					{
						temp_2 = 800;
						check_if_enough_money();
						if (temp_2)
						{
							ab_haste = ab_haste ? 2 : 1;
							update_ab_string_and_play_sound();
						}
					}
				}
				else
				{
					if (ab_heavy_impact < 2)
					{
						temp_2 = 1000;
						check_if_enough_money();
						if (temp_2)
						{
							ab_heavy_impact = ab_heavy_impact ? 2 : 1;
							update_ab_string_and_play_sound();
						}
					}
				}
			}
		}
		else if (FirstOf(temp_1) == 4)
		{
			if (is_showing_active_abilities)
			{
				if (temp_1[1] == 1)
				{
					temp_1 = 1;
					buy_active_ability();
				}
				else if (temp_1[1] == 2)
				{
					temp_1 = 5;
					buy_active_ability();
				}
			}
			else
			{
				if (temp_1[1] == 1)
				{
					if (ab_headhunter < 2)
					{
						temp_2 = 800;
						check_if_enough_money();
						if (temp_2)
						{
							ab_headhunter = ab_headhunter ? 2 : 1;
							update_ab_string_and_play_sound();
						}
					}
				}
				else if (temp_1[1] == 2)
				{
					if (ab_antigens < 2)
					{
						temp_2 = 600;
						check_if_enough_money();
						if (temp_2)
						{
							StopHealingModification(heal_mod[1]);
							StopHealOverTime(heal_mod[2]);
							ab_antigens = ab_antigens ? 2 : 1;
							StartHealingModification(EventPlayer(), AllPlayers(Team.All), 100 + 20 * ab_antigens, HealingModificationRev.ReceiversDamagersAndDamagePercent);
							heal_mod[1] = LastHealingModificationID();
							StartHealOverTime(EventPlayer(), null, 9999, MaxHealth(EventPlayer()) * 0.01 * ab_antigens);
							heal_mod[2] = LastHealOverTime();
							update_ab_string_and_play_sound();
						}
					}
				}
				else
				{
					if (ab_quick_fix < 2)
					{
						temp_2 = 700;
						check_if_enough_money();
						if (temp_2)
						{
							ab_quick_fix = ab_quick_fix ? 2 : 1;
							update_ab_string_and_play_sound();
						}
					}
				}
			}
		}
		else
		{
			if (!ab_priority)
			{
				temp_2 = 1200;
				check_if_enough_money();
				if (!temp_2)
				{
					Wait(0.1, WaitBehavior.IgnoreCondition);
					Abort();
				}
			}
			else if (temp_1[1] == ab_priority)
			{
				Wait(0.1, WaitBehavior.IgnoreCondition);
				Abort();
			}
			else
			{
				SmallMessage(EventPlayer(), "Swapped Priority");
			}
			ab_priority = temp_1[1];
			update_ab_string_and_play_sound();
		}
	}
	Wait(0.1, WaitBehavior.IgnoreCondition);
}

rule: "All Teams: Player left Match, Scale Damage"
Event.OnPlayerLeave
{
	update_combatants();
	temp_2 = (mut_emp_rounds ? 2 : 1) * (20 + 8.25 * (wave_number - 1 + Max(0, wave_number - 9))) * (0.139 + 0.2 * combatants_count) * 9 / NumberOfPlayers(Team.Team2);
	for (temp_1 = 0; NumberOfLivingPlayers(Team.Team2); 1)
	{
		SetDamageDealt(AllLivingPlayers(Team.Team2)[temp_1], AllLivingPlayers(Team.Team2)[temp_1].Damage_Dealt * temp_2);
	}
}

rule: "Team 1 (Spawn): Player Init, Create Effects, Set Is Combatant"
Event.OngoingPlayer
Team.Team1
if (HasSpawned(EventPlayer()) == true)
{
	# Fail-Safe if player somehow despawned (Like Echo duplicating D.Va)
	AbortIf(is_combatant);
	SmallMessage(EventPlayer(), "*******​ ​***********​ PvE: Talents​ | 3.4.6 ​***​ LemonAid");
	# Triage: Players to Players Healing Increase
	StartHealingModification(FilteredArray(combatants, NormalizedHealth(ArrayElement()) <= 0.5), EventPlayer(), 100 + 25 * ab_triage, HealingModificationRev.ReceiversDamagersAndDamagePercent);
	is_combatant = true;
	spectated_player = EventPlayer();
	ab_bought_abilities_string = "";
	health_percent = 100;
	healing_dealt_percent = 100;
	SetHealingReceived(EventPlayer(), 85 + 2.5 * upgrade_count);
	update_combatants();
	CreateEffect(downed_start_t ? AllPlayers(Team.All) : [], Effect.Ring, Color.Yellow, EventPlayer(), 3, EffectRev.VisibleTo);
	CreateIcon(downed_start_t ? RemoveFromArray(AllPlayers(Team.All), EventPlayer()) : [], EventPlayer(), Icon.Skull, IconRev.VisibleTo, Color.Yellow, true);
	# Workaround: Normalized Health sometimes doesn't reevaluate, so force with TTE
	CreateHudText(AllPlayers(Team.Team1), <"<0><1>", HeroIconString(HeroOf(EventPlayer())), downed_start_t && revive_timer ? progress_bar_strings[RoundToInteger(revive_timer / 10, Rounding.Down)] : "">, <"<0><1><2>", EventPlayer(), ab_priority ? ["(A)", "(B)", "(C)"][ab_priority - 1] : "", in_buy_menu_start_t ? "(In Shop)" : "">, <"<0><1>", downed_start_t ? revive_timer ? "Being Revived" : "Downed" : is_changing_heroes ? "Changing Heroes" : <"<0> HP", RoundToInteger(Health(EventPlayer()), Rounding.Up)>, <", <0>$", RoundToInteger(money_mult * money_amount - money_spent_amount, Rounding.Down)>>, Location.Left, LocalPlayer() == EventPlayer() ? -1 : SlotOf(EventPlayer()), downed_start_t ? Color.Red : is_changing_heroes || NormalizedHealth(EventPlayer()) >= 0.5 ? LocalPlayer() == EventPlayer() ? Color.Green : Color.SkyBlue : Color.Orange, downed_start_t ? Color.Red : is_changing_heroes || NormalizedHealth(EventPlayer()) >= 0.5 ? LocalPlayer() == EventPlayer() ? Color.Green : Color.SkyBlue : Color.Orange, downed_start_t ? Color.Red : is_changing_heroes || NormalizedHealth(EventPlayer()) >= 0.5 ? LocalPlayer() == EventPlayer() ? Color.Green : Color.SkyBlue : Color.Orange, HudTextRev.VisibleToSortOrderStringAndColor, Spectators.DefaultVisibility);
	# Stats
	Damage_Received = 100;
	Damage_Dealt = 100;
	Move_Speed = 100;
	# Ability lists
	CreateHudText(is_combatant ? EventPlayer() : [], null, spectated_player.ab_bought_abilities_string, null, Location.Left, 10, null, Color.Green, null, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	CreateHudText(spectated_player.Talent1 ? EventPlayer() : [], "", spectated_player.talent_text[2], <"<0>\n━━━━", spectated_player.talent_text[1]>, Location.Left, 11, Color.Blue, Color.White, Color.SkyBlue, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	CreateHudText(spectated_player.Talent2 ? EventPlayer() : [], "", spectated_player.talent_text[4], <"<0>\n━━━━", spectated_player.talent_text[3]>, Location.Left, 12, Color.Blue, Color.White, Color.SkyBlue, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	CreateHudText(spectated_player.active_ab_number ? EventPlayer() : [], AbilityIconString([Hero.Ana, Hero.Sombra, Hero.Soldier76, Hero.Reaper, Hero.Cassidy, Hero.Baptiste, Hero.Sigma, Hero.Sombra][spectated_player.active_ab_number - 1], [Button.Ultimate, Button.Ability1, Button.Ability1, Button.Ability1, Button.Ability2, Button.Ability1, Button.Ultimate, Button.SecondaryFire][spectated_player.active_ab_number - 1]), <"Hold or double tap <0>", InputBindingString(Button.Melee)>, <"<0>: <1>", ["Stim Infusion", "Cloak", "Feint", "Frenzy", "Smoke Bomb", "Resurgence", "Tear Gas", "Chain Hack"][spectated_player.active_ab_number - 1], spectated_player.active_ab_cooldown ? RoundToInteger(MagnitudeOf(spectated_player.active_ab_cooldown), Rounding.Up) : "Ready">, Location.Left, 13, spectated_player.active_ab_cooldown < 0 ? Color.Green : HasStatus(spectated_player, Status.Hacked) || HasStatus(spectated_player, Status.Stunned) ? Color.Red : spectated_player.active_ab_cooldown ? Color.Gray : Color.Green, Color.Orange, spectated_player.active_ab_cooldown < 0 ? Color.Green : HasStatus(spectated_player, Status.Hacked) || HasStatus(spectated_player, Status.Stunned) ? Color.Red : spectated_player.active_ab_cooldown ? Color.Gray : Color.Green, HudTextRev.VisibleToStringAndColor, Spectators.DefaultVisibility);
	CreateEffect(Smoked_Screen && !perk_special_operator ? EventPlayer() : [], Effect.Sphere, Color.White, EventPlayer(), 5, EffectRev.VisibleToPositionAndRadius);
	CreateEffect(HasStatus(EventPlayer(), Status.Invincible) ? AllPlayers(Team.All) : [], Effect.BaptisteImmortalityFieldProtectedEffect, Team.Team2, EventPlayer(), 1, EffectRev.VisibleToPositionAndRadius);
	if (wave_number)
	{
		StartForcingPlayerOutlines(FilteredArray(AllPlayers(Team.Team2), ArrayElement().is_living_boss), EventPlayer(), true, Color.Yellow, OutlineType.Always);
		can_use_drop_in_buy_menu = true;
		WaitUntil(in_buy_menu_start_t, 15);
		can_use_drop_in_buy_menu = false;
		if (in_buy_menu_start_t)
		{
			active_ab_is_cloaked = true;
			SetStatus(EventPlayer(), null, Status.PhasedOut, 30);
			WaitUntil(!in_buy_menu_start_t, 30);
			active_ab_is_cloaked = false;
			ClearStatus(EventPlayer(), Status.PhasedOut);
		}
	}
	else
	{
		Teleport(EventPlayer(), player_spawn_pos);
		Wait(0.2, WaitBehavior.IgnoreCondition);
		SetFacing(EventPlayer(), player_spawn_facing, Relative.ToWorld);
	}
}

rule: "Team 1: Detect Input Device"
Event.OngoingPlayer
Team.Team1
{
	WaitUntil(MagnitudeOf(ThrottleOf(EventPlayer())) > 0, 99999);
	temp_1 = [-1, false, 1];
	is_controller_player = !(ArrayContains(temp_1, XOf(ThrottleOf(EventPlayer()))) && ArrayContains(temp_1, ZOf(ThrottleOf(EventPlayer()))));
	mercy_res_button = is_controller_player ? Button.SecondaryFire : Button.Ability2;
}

rule: "Team 1: Add Health Pool"
Event.OngoingPlayer
Team.Team1
if (is_combatant == true)
if (upgrade_count > 0)
{
	AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, health_percent * 0.25 * upgrade_count, true, true);
}

rule: "Team 1 Button: Hold Reload, Change Hero, Set Last Position (1), Last Eye Position (2), Last Facing (3)"
Event.OngoingPlayer
Team.Team1
if (IsButtonHeld(EventPlayer(), Button.Reload) == true)
{
	Wait(0.4, WaitBehavior.AbortWhenFalse);
	AbortIf(objective_phase_number > 0 || downed_start_t || in_buy_menu_start_t);
	if (perk_mystery_swap)
	{
		SmallMessage(EventPlayer(), "Mystery Swap prevents you from changing heroes");
		Abort();
	}
	is_changing_heroes = true;
	ab_var_1 = PositionOf(EventPlayer());
	ab_var_2 = EyePosition(EventPlayer());
	ab_var_3 = FacingDirectionOf(EventPlayer());
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.Yellow, ab_var_1, 1);
	StartCamera(EventPlayer(), RayCastHitPosition(ab_var_2, ab_var_2 - 8.25 * DirectionFromAngles(HorizontalAngleFromDirection(ab_var_3), 20), null, null, false) + 0.25 * DirectionFromAngles(HorizontalAngleFromDirection(ab_var_3), 20), ab_var_2, 0);
	ClearStatus(EventPlayer(), Status.Unkillable);
	Kill(EventPlayer(), null);
	# Lower values might cause the player to fall through the map when respawning
	Teleport(EventPlayer(), 100 * Down());
	Wait(0.1, WaitBehavior.IgnoreCondition);
	is_invisible = 2;
	WaitUntil(IsAlive(EventPlayer()), 99999);
	StopCamera(EventPlayer());
	Teleport(EventPlayer(), ab_var_1);
	SetFacing(EventPlayer(), ab_var_3, Relative.ToWorld);
	is_changing_heroes = false;
	is_invisible = false;
	Wait(0.5, WaitBehavior.IgnoreCondition);
	update_ab_string_and_play_sound();
}

rule: "Team 1: Took Damage, Set Last Damage Taken"
Event.OnDamageTaken
Team.Team1
{
	last_damage_taken_t = TotalTimeElapsed();
}

rule: "Team 1 (Death): Start Camera, Play Sounds, Set is Downed, Revive Timer, Knocked down, Phased out, Death Cam Target"
Event.OnDeath
Team.Team1
if (is_changing_heroes == false)
{
	if (!downed_start_t)
	{
		DisableMessages(EventPlayer());
		SmallMessage(AllPlayers(Team.All), <"<0> was downed!", EventPlayer()>);
		death_cam_target = EyePosition(EventPlayer()) + 1000 * DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()), 0);
		StartCamera(EventPlayer(), RayCastHitPosition(EyePosition(spectated_player), EyePosition(spectated_player) - (death_cam_target ? 6.25 * DirectionTowards(EyePosition(spectated_player), death_cam_target) : 8.25 * DirectionFromAngles(HorizontalFacingAngleOf(spectated_player), 20)), null, null, false) + 0.25 * (death_cam_target ? DirectionTowards(EyePosition(spectated_player), death_cam_target) : DirectionFromAngles(HorizontalFacingAngleOf(spectated_player), 20)), EyePosition(spectated_player), death_cam_target ? 10 : 20);
		for (temp_1 = 0; combatants_count; 1)
		{
			PlayEffect(combatants[temp_1], PlayEffect.RingExplosionSound, Color.White, combatants[temp_1], 200);
			PlayEffect(combatants[temp_1], PlayEffect.RingExplosionSound, Color.White, combatants[temp_1], 200);
		}
		downed_start_t = TotalTimeElapsed();
		revive_timer = false;
		if (perk_nemesis && Attacker().is_alive && TeamOf(Attacker()) == Team.Team2 && !Attacker().iv_is_portal && SlotOf(Attacker()) != 1)
		{
			nemesis_killer = Attacker();
		}
		else
		{
			nemesis_killer = null;
		}
		disable_player();
	}
	if (EventWasEnvironment())
	{
		temp_1 = NearestWalkablePosition(EventPlayer());
		nwp_teleport();
	}
	Resurrect(EventPlayer());
	ClearStatus(EventPlayer(), Status.PhasedOut);
	SetStatus(EventPlayer(), null, Status.Invincible, 9999);
	// SetStatus(EventPlayer(), null, Status.KnockedDown, 9999);
	Wait(0.05, WaitBehavior.RestartWhenTrue);
	SetPlayerHealth(EventPlayer(), 1);
	SetStatus(EventPlayer(), null, Status.PhasedOut, 9999);
	if (Attacker() != EventPlayer())
	{
		death_cam_target = Attacker();
		Wait(5, WaitBehavior.RestartWhenTrue);
	}
	death_cam_target = null;
}

rule: "Team 1: Player downed fallback"
Event.OngoingPlayer
Team.Team1
if (downed_start_t == true)
if (HasStatus(EventPlayer(), Status.Stunned) == false)
{
	Wait(0.25, WaitBehavior.AbortWhenFalse);
	AbortIfConditionIsFalse();
	StartScalingPlayer(EventPlayer(), 0.5, false);
	disable_player();
	while (downed_start_t && !HasStatus(EventPlayer(), Status.Hacked))
	{
		ClearStatus(EventPlayer(), Status.PhasedOut);
		CancelPrimaryAction(EventPlayer());
		SetStatus(EventPlayer(), null, Status.Hacked, 9999);
		Wait(0.25, WaitBehavior.IgnoreCondition);
	}
	if (downed_start_t)
	{
		SetStatus(EventPlayer(), null, Status.PhasedOut, 9999);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 1: Select Next Spectated Player"
Event.OngoingPlayer
Team.Team1
if (downed_start_t == true)
if (IsButtonHeld(EventPlayer(), Button.Jump) == true)
{
	AbortIf(downed_start_t + 0.5 >= TotalTimeElapsed());
	death_cam_target = null;
	if (nemesis_killer)
	{
		if (spectated_player == EventPlayer())
		{
			spectated_player = nemesis_killer;
		}
		else
		{
			spectated_player = EventPlayer();
		}
	}
	else
	{
		spectated_player = combatants[(IndexOfArrayValue(combatants, spectated_player) + 1) % combatants_count];
	}
	Wait(0.25, WaitBehavior.IgnoreCondition);
}

rule: "Team 1: Spectated Player does not exist anymore"
Event.OngoingPlayer
Team.Team1
if (EntityExists(spectated_player) == false)
{
	spectated_player = EventPlayer();
}

rule: "Team 1: Revive, Check Player in Radius, Unset Is Downed"
Event.OngoingPlayer
Team.Team1
if (downed_start_t == true)
if (downed_start_t + 1 < TotalTimeElapsed())
{
	revivers = FilteredArray(combatants, !ArrayElement().downed_start_t && !(ArrayElement().is_invisible % 3) && DistanceBetween(EventPlayer(), Vector(XOf(PositionOf(ArrayElement())), YOf(PositionOf(EventPlayer())), ZOf(PositionOf(ArrayElement())))) <= 3 && AbsoluteValue(YOf(PositionOf(EventPlayer())) - YOf(PositionOf(ArrayElement()))) <= 3 && (HeroOf(ArrayElement()) == Hero.Mei && IsUsingAbility1(ArrayElement()) || IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock)));
	if (CountOf(revivers))
	{
		is_revive_slow = IsTrueForAll(revivers, ArrayElement().active_ab_is_cloaked || HasStatus(ArrayElement(), Status.Invincible) || HasStatus(ArrayElement(), Status.PhasedOut));
		revive_timer += (is_hard_mode_enabled || is_apocalyptic ? 0.667 : 1) * (perk_golden_hour ? 2 : 1) * (is_revive_slow ? 2.5 : 5);
		if (revive_timer >= 100)
		{
			SmallMessage(AllPlayers(Team.All), <"<0> has been revived!", EventPlayer()>);
			downed_start_t = false;
		}
	}
	else
	{
		revive_timer = false;
	}
	Wait(0.2, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 1: Teleport if Player died on Jumppad"
Event.OngoingPlayer
Team.Team1
if (downed_start_t == true)
if (downed_start_t + 5 < TotalTimeElapsed())
if (is_flying == true)
{
	temp_1 = NearestWalkablePosition(PositionOf(EventPlayer()) + 5 * DirectionFromAngles(RandomInteger(-179, 180), false));
	nwp_teleport();
}

rule: "Team 1: Player gets up"
Event.OngoingPlayer
Team.Team1
if (downed_start_t == false)
{
	AbortIf(!is_combatant);
	EnableMessages(EventPlayer());
	StopCamera(EventPlayer());
	enable_player();
	PlayEffect(AllPlayers(Team.All), PlayEffect.BuffImpactSound, Color.White, EventPlayer(), 200);
	SetPlayerHealth(EventPlayer(), 100000);
	spectated_player = EventPlayer();
	revivers = [];
	nemesis_killer = null;
	ClearStatus(EventPlayer(), Status.Hacked);
	ClearStatus(EventPlayer(), Status.Invincible);
	enable_player();
	StopScalingPlayer(EventPlayer());
	Wait(2, WaitBehavior.AbortWhenFalse);
	AbortIfConditionIsFalse();
	ClearStatus(EventPlayer(), Status.PhasedOut);
}

rule: "Team 1: Heal after few sec"
Event.OngoingPlayer
Team.Team1
if (last_damage_taken_t + (perk_die_hard ? 0.5 : 1) * (mut_deep_wounds ? 5 : 2.5) < TotalTimeElapsed())
if (NormalizedHealth(EventPlayer()) != 1)
if (Health(EventPlayer()) != false)
{
	Heal(EventPlayer(), null, MaxHealth(EventPlayer()) * 0.333);
	PlayEffect(EventPlayer(), PlayEffect.BuffExplosionSound, Color.White, EventPlayer(), 50);
	while (true)
	{
		Wait(0.2, WaitBehavior.AbortWhenFalse);
		AbortIfConditionIsFalse();
		Heal(EventPlayer(), null, 40);
	}
}

rule: "Team 1: Set / Unset Is Flying"
Event.OngoingPlayer
Team.Team1
if (IsOnGround(EventPlayer()) == false)
{
	Wait(1.5, WaitBehavior.AbortWhenFalse);
	is_flying = true;
	WaitUntil(IsOnGround(EventPlayer()), 99999);
	is_flying = false;
}

rule: "Team 1: Calculate Eye Offset"
Event.OngoingPlayer
Team.Team1
if (is_combatant == true)
{
	if (HeroOf(EventPlayer()) == Hero.Mei && IsUsingAbility1(EventPlayer()))
	{
		eye_offset = 1.2 * Up();
	}
	else if (HasStatus(EventPlayer(), Status.KnockedDown) || HasStatus(EventPlayer(), Status.Asleep) || IsCommunicatingAnyEmote(EventPlayer()))
	{
		eye_offset = PositionOf(EventPlayer()) + 0.25 * Up() - EyePosition(EventPlayer());
	}
	else
	{
		eye_offset = aim_offset;
	}
	if (active_ab_is_smoked)
	{
		active_ab_is_smoked = false;
		eye_offset += RandomReal(0.5, 2) * DirectionFromAngles(RandomInteger(-179, 180), RandomInteger(0, 45));
	}
	Wait(1, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 1 Button: Hold or double tap Melee, Use active Ability"
Event.OngoingPlayer
Team.Team1
if (IsButtonHeld(EventPlayer(), Button.Melee) == true)
{
	WaitUntil(!IsButtonHeld(EventPlayer(), Button.Melee), 0.4);
	if (!IsButtonHeld(EventPlayer(), Button.Melee))
	{
		WaitUntil(IsButtonHeld(EventPlayer(), Button.Melee), 0.3);
		AbortIf(!IsButtonHeld(EventPlayer(), Button.Melee));
	}
	AbortIf(IsDead(EventPlayer()) || downed_start_t || HasStatus(EventPlayer(), Status.Hacked) || HasStatus(EventPlayer(), Status.Stunned) || !active_ab_number || in_buy_menu_start_t);
	PlayEffect(EventPlayer(), PlayEffect.DebuffImpactSound, Color.White, EventPlayer(), 200);
	if (active_ab_number == 1)
	{
		last_damage_taken_t = false;
		SetStatus(EventPlayer(), null, Status.Invincible, 0.1);
		Damage_Dealt += 100;
		healing_dealt_percent += 100;
		Move_Speed += 50;
		for (active_ab_cooldown = -6; 0; 1)
		{
			Wait(1, WaitBehavior.IgnoreCondition);
		}
		Damage_Dealt -= 100;
		healing_dealt_percent -= 100;
		Move_Speed -= 50;
		active_ab_cooldown = 30;
	}
	else if (active_ab_number == 2)
	{
		active_ab_is_cloaked = true;
		for (active_ab_cooldown = -8; 0; 1)
		{
			Wait(1, WaitBehavior.IgnoreCondition);
		}
		active_ab_is_cloaked = false;
		Damage(PlayersWithinRadius(EyePosition(EventPlayer()), 10, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 99);
		SetStatus(PlayersWithinRadius(EyePosition(EventPlayer()), 10, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), Status.Frozen, 4);
		PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Aqua, EyePosition(EventPlayer()), 10);
		PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.White, EventPlayer(), 200);
		active_ab_cooldown = 20;
	}
	else if (active_ab_number == 3)
	{
		active_ab_cooldown = -1;
		temp_1 = PlayersWithinRadius(EyePosition(EventPlayer()), 6, Team.Team2, RadiusLOS.Surfaces);
		Damage(temp_1, EventPlayer(), 100);
		ApplyImpulse(EventPlayer(), ThrottleOf(EventPlayer()) != Vector(0, 0, 0) ? ThrottleOf(EventPlayer()) : Forward(), 25, Relative.ToPlayer, ContraryMotion.Cancel);
		PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Black, EyePosition(EventPlayer()), 6);
		PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.White, EventPlayer(), 200);
		SetGravity(EventPlayer(), 0);
		SetStatus(EventPlayer(), null, Status.PhasedOut, 0.7);
		Wait(0.6, WaitBehavior.IgnoreCondition);
		SetGravity(EventPlayer(), 100);
		temp_1 = PlayersWithinRadius(EyePosition(EventPlayer()), 6, Team.Team2, RadiusLOS.Surfaces);
		Damage(temp_1, EventPlayer(), 100);
		PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Black, EyePosition(EventPlayer()), 6);
		PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.White, EventPlayer(), 200);
		active_ab_cooldown = 10;
		Wait(1, WaitBehavior.IgnoreCondition);
	}
	else if (active_ab_number == 4)
	{
		active_ab_is_frenzied = true;
		SetStatus(EventPlayer(), null, Status.Invincible, 5);
		for (active_ab_cooldown = -5; 0; 1)
		{
			last_damage_taken_t = TotalTimeElapsed();
			Wait(1, WaitBehavior.IgnoreCondition);
		}
		active_ab_is_frenzied = false;
		active_ab_cooldown = 30;
	}
	else if (active_ab_number == 5)
	{
		active_ab_var = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + 2 * Down(), null, null, false) + 2 * Up();
		for (active_ab_cooldown = -10; 0; 0.5)
		{
			(<Player>FilteredArray(combatants, DistanceBetween(EyePosition(ArrayElement()), Vector(XOf(active_ab_var), YOf(EyePosition(ArrayElement())), ZOf(active_ab_var))) <= 10 && AbsoluteValue(YOf(EyePosition(ArrayElement())) - YOf(active_ab_var)) <= 5)).active_ab_is_smoked = true;
			Wait(0.5, WaitBehavior.IgnoreCondition);
		}
		active_ab_cooldown = 20;
	}
	else if (active_ab_number == 6)
	{
		for (active_ab_cooldown = -5; 0; 0.25)
		{
			if (NormalizedHealth(EventPlayer()) != 1)
			{
				Heal(EventPlayer(), null, 75);
			}
			if (NormalizedHealth(EventPlayer()) == 1)
			{
				Heal(FirstOf(SortedArray(FilteredArray(PlayersWithinRadius(EventPlayer(), 15, Team.Team1, RadiusLOS.Off), ArrayElement().is_combatant && !ArrayElement().downed_start_t && NormalizedHealth(ArrayElement()) != 1), NormalizedHealth(ArrayElement()))), null, 75);
			}
			Wait(0.25, WaitBehavior.IgnoreCondition);
		}
		active_ab_cooldown = 25;
	}
	else if (active_ab_number == 7)
	{
		active_ab_var = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + 100 * FacingDirectionOf(EventPlayer()), AllPlayers(Team.Team2), null, true);
		PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.White, active_ab_var, 8);
		PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.White, active_ab_var, 200);
		for (active_ab_cooldown = -6; 0; 1)
		{
			temp_1 = FilteredArray(AllLivingPlayers(Team.Team2), !HasStatus(ArrayElement(), Status.PhasedOut) && !HasStatus(ArrayElement(), Status.Stunned) && DistanceBetween(active_ab_var, EyePosition(ArrayElement())) <= 8);
			StartDamageOverTime(temp_1, EventPlayer(), 2, 40);
			for (temp_2 = 0; CountOf(temp_1); 1)
			{
				temp_1[temp_2].gmut_fortified_bypass_end_t = Max(TotalTimeElapsed(), temp_1[temp_2].gmut_fortified_bypass_end_t);
				SetStatus(temp_1[temp_2], EventPlayer(), Status.Stunned, temp_1[temp_2].is_fortified ? 0.5 : 1);
			}
			Wait(2, WaitBehavior.IgnoreCondition);
		}
		active_ab_cooldown = 35;
	}
	else if (active_ab_number == 8)
	{
		temp_1 = LastOf(SortedArray(FilteredArray(AllLivingPlayers(Team.Team2), !HasStatus(ArrayElement(), Status.PhasedOut) && !ArrayElement().iv_is_portal && IsInViewAngle(EventPlayer(), ArrayElement(), 45) && IsInLineOfSight(EyePosition(EventPlayer()), EyePosition(ArrayElement()), BarrierLOS.NoBarriersBlock)), DotProduct(FacingDirectionOf(EventPlayer()), DirectionTowards(EyePosition(EventPlayer()), ArrayElement()))));
		if (temp_1)
		{
			SetStatus(temp_1, EventPlayer(), Status.Hacked, 5);
			ModifyVariable(active_ab_var, Operation.AppendToArray, temp_1);
			for (temp_2 = 4; 1; -1)
			{
				temp_1 = FirstOf(SortedArray(FilteredArray(RemoveFromArray(AllLivingPlayers(Team.Team2), active_ab_var), !HasStatus(ArrayElement(), Status.PhasedOut) && !ArrayElement().iv_is_portal && IsInLineOfSight(temp_1, ArrayElement(), BarrierLOS.NoBarriersBlock)), DistanceBetween(temp_1, ArrayElement())));
				if (temp_1)
				{
					SetStatus(temp_1, EventPlayer(), Status.Hacked, temp_2);
					ModifyVariable(active_ab_var, Operation.AppendToArray, temp_1);
				}
				else
				{
					break;
				}
			}
			Damage(active_ab_var, EventPlayer(), 5);
			active_ab_cooldown = -0.8;
			Wait(0.8, WaitBehavior.IgnoreCondition);
			active_ab_var = [];
			active_ab_cooldown = 25;
		}
		else
		{
			active_ab_cooldown = 1;
		}
	}
	for (active_ab_cooldown = active_ab_cooldown; 0; -1)
	{
		Wait(1, WaitBehavior.IgnoreCondition);
	}
}

rule: "Team 1 (Ability): Priority C"
Event.OnHealingDealt
Team.Team1
{
	AbortIf(!ab_priority == 3);
	AbortIf(Healee() == EventPlayer());
	AbortIf(!EventHealing());
	SetPlayerHealth(EventPlayer(), Health(EventPlayer()) + 0.4 * EventHealing());
}

rule: "Team 1 (Ability): Charged"
Event.OngoingPlayer
Team.Team1
if (ab_charged == true)
if (UltimateChargePercent(EventPlayer()) < ab_charged * 15)
{
	SetUltimateCharge(EventPlayer(), ab_charged * 15);
	# Workaround: Sets Ultimate Charge to a higher value for duplicating Echo
	if (IsDuplicating(EventPlayer()))
	{
		MinWait();
		SetUltimateCharge(EventPlayer(), ab_charged * 15);
	}
}

rule: "Team 1 (Ability): Haste Primary Fire"
Event.OngoingPlayer
Team.Team1
if (ab_haste == true)
if (AbilityCooldown(EventPlayer(), Button.PrimaryFire) > 0.1)
{
	SetAbilityCooldown(EventPlayer(), Button.PrimaryFire, (1 - 0.25 * ab_haste) * AbilityCooldown(EventPlayer(), Button.PrimaryFire));
}

rule: "Team 1 (Ability): Haste Secondary Fire"
Event.OngoingPlayer
Team.Team1
if (ab_haste == true)
if (AbilityCooldown(EventPlayer(), Button.SecondaryFire) > 0.1)
{
	SetAbilityCooldown(EventPlayer(), Button.SecondaryFire, (1 - 0.25 * ab_haste) * AbilityCooldown(EventPlayer(), Button.SecondaryFire));
}

rule: "Team 1 (Ability): Haste Ability 1"
Event.OngoingPlayer
Team.Team1
if (ab_haste == true)
if (AbilityCooldown(EventPlayer(), Button.Ability1) > 0.1)
{
	SetAbilityCooldown(EventPlayer(), Button.Ability1, (1 - 0.25 * ab_haste) * AbilityCooldown(EventPlayer(), Button.Ability1));
}

rule: "Team 1 (Ability): Haste Ability 2"
Event.OngoingPlayer
Team.Team1
if (ab_haste == true)
if (AbilityCooldown(EventPlayer(), Button.Ability2) > 0.1)
{
	SetAbilityCooldown(EventPlayer(), Button.Ability2, (1 - 0.25 * ab_haste) * AbilityCooldown(EventPlayer(), Button.Ability2));
}

rule: "Team 1 (Ability): Haste Jump"
Event.OngoingPlayer
Team.Team1
if (ab_haste == true)
if (AbilityCooldown(EventPlayer(), Button.Jump) > 0.1)
{
	SetAbilityCooldown(EventPlayer(), Button.Jump, (1 - 0.25 * ab_haste) * AbilityCooldown(EventPlayer(), Button.Jump));
}

rule: "Team 1 (Ability): Haste Crouch"
Event.OngoingPlayer
Team.Team1
if (ab_haste == true)
if (AbilityCooldown(EventPlayer(), Button.Crouch) > 0.1)
{
	SetAbilityCooldown(EventPlayer(), Button.Crouch, (1 - 0.25 * ab_haste) * AbilityCooldown(EventPlayer(), Button.Crouch));
}

rule: "Team 1 (Ability): Headhunter"
Event.OnDamageDealt
Team.Team1
{
	AbortIf(!ab_headhunter);
	AbortIf(!EventWasCriticalHit());
	Damage(Victim(), EventPlayer(), ab_headhunter * 30 / Damage_Dealt * EventDamage());
}

rule: "Team 1 (Ability): Priority B"
Event.OngoingPlayer
Team.Team1
if (ab_priority == 2)
if (last_damage_taken_t + 3 < TotalTimeElapsed())
{
	Damage_Dealt += 20;
	Move_Speed += 20;
	WaitUntil(last_damage_taken_t + 3 >= TotalTimeElapsed() || perk_mystery_swap == TotalTimeElapsed() + 90, 99999);
	Damage_Dealt -= 20;
	Move_Speed -= 20;
}

rule: "Team 1 (Ability): Quick Fix"
Event.OnElimination
Team.Team1
if (ab_quick_fix == true)
{
	Heal(EventPlayer(), null, ab_quick_fix * 50);
	if (!current_quick_fix_speed_bonus)
	{
		current_quick_fix_speed_bonus = ab_quick_fix * 15;
		Move_Speed += current_quick_fix_speed_bonus;
	}
	Wait(5, WaitBehavior.RestartWhenTrue);
	Move_Speed -= current_quick_fix_speed_bonus;
	current_quick_fix_speed_bonus = false;
}

rule: "Team 1 (Ability): Second Wind"
Event.OngoingPlayer
Team.Team1
if (ab_second_wind == true)
if (downed_start_t == true)
if (downed_start_t + 0.9 < TotalTimeElapsed())
{
	SmallMessage(AllPlayers(Team.All), <"<0> received a second wind!", EventPlayer()>);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.Green, EventPlayer(), 1);
	SetStatus(EventPlayer(), null, Status.PhasedOut, 3.5);
	downed_start_t = false;
	Wait(120 - 30 * ab_second_wind, WaitBehavior.IgnoreCondition);
}

rule: "Team 1 (Perk): Mystery Swap"
Event.OngoingPlayer
Team.Team1
if (perk_mystery_swap != false)
if (perk_mystery_swap < TotalTimeElapsed())
if (downed_start_t == false)
{
	Wait(1, WaitBehavior.AbortWhenFalse);
	AbortIfConditionIsFalse();
	if (Talent1)
	{
		Swapped_Talent_Array[1] = true;
		Talent1 = false;
	}
	if (Talent2)
	{
		Swapped_Talent_Array[2] = true;
		Talent2 = false;
	}
	perk_mystery_swap = TotalTimeElapsed() + 90;
	Wait(0.2, WaitBehavior.IgnoreCondition);
	ForcePlayerHero(EventPlayer(), RandomValueInArray(RemoveFromArray(AllHeroes(), HeroOf(EventPlayer()))));
	is_invisible = false;
	last_damage_taken_t = 0;
	Wait(0.1, WaitBehavior.IgnoreCondition);
	if (Swapped_Talent_Array[1])
	{
		Swapped_Talent_Array[1] = false;
		Talent1 = true;
	}
	if (Swapped_Talent_Array[2])
	{
		Swapped_Talent_Array[2] = false;
		Talent2 = true;
	}
	SetUltimateCharge(EventPlayer(), 100);
	update_ab_string_and_play_sound();
}

rule: "Team 1 (Perk): Bulletstorm"
Event.OngoingPlayer
Team.Team1
if (perk_bulletstorm == true)
if ((Ammo(EventPlayer(), false) < MaxAmmo(EventPlayer(), false) || Ammo(EventPlayer(), 1) < MaxAmmo(EventPlayer(), 1)) == true)
{
	SetAmmo(EventPlayer(), false, 1000);
	SetAmmo(EventPlayer(), 1, 1000);
}

rule: "Team 1 (Perk): Nemesis"
Event.OngoingPlayer
Team.Team1
if (IsDead(nemesis_killer) == true)
{
	Wait(0.2, WaitBehavior.AbortWhenFalse);
	AbortIf(!downed_start_t);
	SmallMessage(AllPlayers(Team.All), <"<0>'s Nemesis was killed!", EventPlayer()>);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.Green, EventPlayer(), 1);
	downed_start_t = false;
}

rule: "Team 1 (Perk): Brass Knuckles"
Event.PlayerDealtKnockback
Team.Team1
{
	AbortIf(!perk_brass_knuckles);
	AbortIf(EventAbility() != Button.Melee);
	AbortIf(Victim().iv_is_portal);
	AbortIf(IsDead(Victim()));
	Victim().gmut_fortified_bypass_end_t = Max(TotalTimeElapsed() + 1.75, Victim().gmut_fortified_bypass_end_t);
	SetStatus(Victim(), EventPlayer(), Status.KnockedDown, Victim().is_fortified ? 1.75 : 2.5);
	AbortIf(!HasStatus(Victim(), Status.Stunned));
	Wait(0.25, WaitBehavior.RestartWhenTrue);
	Wait(15, WaitBehavior.IgnoreCondition);
	SmallMessage(EventPlayer(), "Brass Knuckles Ready");
}

rule: "Team 1 (Perk): Crash N' Dash"
Event.OngoingPlayer
Team.Team1
if (perk_crash_n_dash == true)
if (SpeedOf(EventPlayer()) >= 8)
{
	Heal(EventPlayer(), null, 10);
	Wait(0.2, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 1 (Perk): Vampiric Heal"
Event.OnDamageDealt
Team.Team1
{
	AbortIf(!perk_vampiric);
	Heal(EventPlayer(), null, EventDamage() * 0.3);
}

rule: "Team 1 (Perk): Supercharge"
Event.OnHealingDealt
Team.Team1
{
	AbortIf(!perk_super_charge);
	AbortIf(Healee() == EventPlayer());
	AbortIf(!EventHealing());
	SetUltimateCharge(Healee(), UltimateChargePercent(Healee()) + 1 + EventHealing() * 0.03);
	Wait(0.75, WaitBehavior.IgnoreCondition);
}

rule: "Team 2 (Mutator): Artful Dodger"
Event.OngoingPlayer
Team.Team2
if (mut_artful_dodger == true)
if (can_dodge == false)
if (IsAlive(EventPlayer()) == true)
{
	can_dodge = true;
}

rule: "MUT Team 2 (Mutator): Swan Song"
Event.OngoingPlayer
Team.Team2
if (mut_swan_song == true)
if (IsAlive(EventPlayer()) == true)
if (is_living_boss == true)
{
	SetStatus(EventPlayer(), null, Status.Unkillable, 9999);
	WaitUntil(Health(EventPlayer()) <= 1, 99999);
	CreateEffect(AllPlayers(Team.All), Effect.EchoCloningEffect, Color.Team1, EventPlayer(), 1, EffectRev.VisibleToPositionAndRadius);
	Effects_[1] = LastCreatedEntity();
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.Violet, EventPlayer(), 1);
	SetStatus(EventPlayer(), null, Status.Stunned, 1);
	WaitUntil(IsDead(EventPlayer()), 5);
	ClearStatus(EventPlayer(), Status.Unkillable);
	Kill(EventPlayer(), null);
	DestroyEffect(Effects_[1]);
}

rule: "MUT Team 2: Counterstrike"
Event.OngoingPlayer
Team.Team2
if (mut_counterstrike == true)
if (is_using_boss_aggression == false)
if (IsUsingUltimate(target) == true)
{
	is_aggressive = !is_aggressive;
	Wait(4, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
	is_aggressive = true;
	if (RandomInteger(1, 100) > 75 && HeroOf(EventPlayer()) != Hero.Soldier76)
	{
		Wait(RandomReal(3, 7), WaitBehavior.IgnoreCondition);
		SetUltimateCharge(EventPlayer(), 100);
		PressButton(EventPlayer(), Button.Ultimate);
		Wait(RandomReal(1, 2), WaitBehavior.IgnoreCondition);
		PressButton(EventPlayer(), Button.PrimaryFire);
	}
	LoopIfConditionIsTrue();
}

rule: "MUT Team 2 (Mutator): Low Blow"
Event.PlayerDealtKnockback
Team.Team2
{
	AbortIf(!mut_low_blow);
	Damage(Victim(), EventPlayer(), 0.5 * EventDamage());
}

rule: "MUT Team 2 (Mutator) Cassidy: Fully Loaded, Magnade"
Event.OngoingPlayer
Team.Team2
Player.Cassidy
if ((is_living_boss || mut_fully_loaded) == true)
if (wave_number >= 4)
if (is_target_in_los >= 4)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 40);
	LoopIf(DistanceBetween(EventPlayer(), target) >= 8);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(10, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "MUT Team 2 Echo (Mutator): Fully Loaded, Focusing Beam"
Event.OngoingPlayer
Team.Team2
Player.Echo
if (mut_fully_loaded == true)
if (is_target_in_los >= 4)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(NormalizedHealth(target) > 0.5);
	LoopIf(DistanceBetween(EventPlayer(), target) >= 15);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(10, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "MUT Team 2 (Mutator) Team 2 Ana: Fully Loaded, Sleep Dart"
Event.OngoingPlayer
Team.Team2
Player.Ana
if (mut_fully_loaded == true)
if (is_target_in_los >= 4)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 40);
	LoopIf(DistanceBetween(EventPlayer(), target) >= 10);
	PressButton(EventPlayer(), Button.Ability1);
	Wait(13, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "MUT Team 2 Pharah (Mutator): Fully Loaded, Concussive Blast"
Event.OngoingPlayer
Team.Team2
Player.Pharah
if (mut_fully_loaded == true)
if (is_target_in_los == true)
if (IsUsingAbility1(EventPlayer()) == false)
{
	Wait(1, WaitBehavior.AbortWhenFalse);
	PressButton(EventPlayer(), Button.Ability2);
}

rule: "Team 1 Doomfist: Meteor Strike (Invisibility 2, not detectable)"
Event.OngoingPlayer
Team.Team1
Player.Doomfist
if (IsUsingUltimate(EventPlayer()) == true)
{
	is_invisible = 2;
	WaitUntil(!IsUsingUltimate(EventPlayer()), 99999);
	is_invisible = false;
}

rule: "Team 1 D.Va: Fill Ultimate Charge when downed"
Event.OngoingPlayer
Team.Team1
Player.Dva
if (downed_start_t == true)
if (UltimateChargePercent(EventPlayer()) != 100)
{
	Wait(0.05, WaitBehavior.AbortWhenFalse);
	SetUltimateCharge(EventPlayer(), 100);
}

rule: "Team 1 Echo: Stealth (Invisibility 1, detectable)"
Event.OngoingPlayer
Team.Team1
Player.Echo
if (HeroBeingDuplicated(EventPlayer()) == Hero.Sombra)
if (IsUsingAbility1(EventPlayer()) == true)
{
	Wait(0.8, WaitBehavior.AbortWhenFalse);
	is_invisible = 1;
	WaitUntil(!IsUsingAbility1(EventPlayer()), 99999);
	is_invisible = false;
}

rule: "Team 1 Echo: Remove Stealth when Duplicate ends"
Event.OngoingPlayer
Team.Team1
Player.Echo
if (is_invisible == 1)
if (IsDuplicating(EventPlayer()) == false)
{
	is_invisible = false;
}

rule: "Team 1 Echo: Cancel Charge on Boss Enemies"
Event.PlayerDealtKnockback
Team.Team1
Player.Echo
{
	AbortIf(HeroBeingDuplicated(EventPlayer()) != Hero.Reinhardt);
	AbortIf(EventAbility() != null);
	AbortIf(!Victim().is_living_boss);
	Damage(Victim(), EventPlayer(), 150);
	CancelPrimaryAction(EventPlayer());
	Victim().gmut_fortified_bypass_end_t = Max(TotalTimeElapsed() + 1.2, Victim().gmut_fortified_bypass_end_t);
	SetStatus(Victim(), EventPlayer(), Status.Stunned, 1.2);
}

rule: "Team 1 Echo: Cancel Chain Hook on Boss Enemies"
Event.OnDamageDealt
Team.Team1
Player.Echo
{
	AbortIf(HeroBeingDuplicated(EventPlayer()) != Hero.Roadhog);
	AbortIf(EventAbility() != Button.Ability1);
	AbortIf(!Victim().is_living_boss);
	AbortIf(!IsUsingAbility1(EventPlayer()));
	CancelPrimaryAction(EventPlayer());
	MinWait();
	Victim().gmut_fortified_bypass_end_t = Max(TotalTimeElapsed() + 1, Victim().gmut_fortified_bypass_end_t);
	SetStatus(Victim(), EventPlayer(), Status.Stunned, 1);
}

rule: "Team 1 Mercy: Revive Ability (Player)"
Event.OngoingPlayer
Team.Team1
Player.Mercy
if (IsButtonHeld(EventPlayer(), mercy_res_button) == true)
if (AbilityCooldown(EventPlayer(), Button.Ability2) == false)
# Workaround: Check Cooldown for Controller Players
if (AbilityCooldown(EventPlayer(), Button.SecondaryFire) == false)
if (downed_start_t == false)
if (HasStatus(EventPlayer(), Status.Hacked) == false)
if (HasStatus(EventPlayer(), Status.Stunned) == false)
{
	ab_player = LastOf(SortedArray(FilteredArray(PlayersWithinRadius(EventPlayer(), 10, Team.Team1, RadiusLOS.Off), ArrayElement().is_combatant && ArrayElement().downed_start_t && ArrayElement().downed_start_t + 0.1 < TotalTimeElapsed() && IsInViewAngle(EventPlayer(), ArrayElement(), 45)), DotProduct(FacingDirectionOf(EventPlayer()), DirectionTowards(EyePosition(EventPlayer()), ArrayElement()))));
	if (ab_player)
	{
		SmallMessage(AllPlayers(Team.All), <"<0> has been resurrected by <1>!", ab_player, EventPlayer()>);
		ab_player.downed_start_t = false;
		PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.SkyBlue, ab_player, 1);
		temp_1 = (is_hard_mode_enabled || is_apocalyptic ? 1.5 : 1) * [30, 33.333, 40][ab_haste];
		SetAbilityCooldown(EventPlayer(), Button.Ability2, temp_1);
		# Workaround: Set Cooldown for Controller Players
		SetAbilityCooldown(EventPlayer(), Button.SecondaryFire, temp_1);
	}
	Wait(0.05, WaitBehavior.IgnoreCondition);
}

rule: "IV Team 1 Moira: Biotic Grasp on Portal Simulation"
Event.OngoingPlayer
Team.Team1
Player.Moira
if (gamemode == false)
if (objective_phase_number == 1)
if (IsFiringSecondary(EventPlayer()) == true)
{
	if (DistanceBetween(EyePosition(EventPlayer()), iv_dom_objective_pos + 1.11 * Up()) <= 20 && IsInLineOfSight(EyePosition(EventPlayer()), iv_dom_objective_pos + 1.11 * Up(), BarrierLOS.NoBarriersBlock))
	{
		# If Facing ray intersects sphere
		if (DistanceBetween(iv_dom_objective_pos + 1.11 * Up(), EyePosition(EventPlayer()) + Max(0, DotProduct(FacingDirectionOf(EventPlayer()), VectorTowards(EyePosition(EventPlayer()), iv_dom_objective_pos + 1.11 * Up()))) * FacingDirectionOf(EventPlayer())) <= 0.85)
		{
			Damage(PlayersInSlot(0, Team.Team2), EventPlayer(), 9.6);
		}
	}
	Wait(0.192, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 1 Sombra: Stealth (Invisibility 1, detectable), end after 20 seconds"
Event.OngoingPlayer
Team.Team1
Player.Sombra
if (IsUsingAbility1(EventPlayer()) == true)
{
	Wait(0.8, WaitBehavior.AbortWhenFalse);
	is_invisible = 1;
	for (sombra_stealth_timer = 100; 0; -0.48)
	{
		WaitUntil(!IsUsingAbility1(EventPlayer()), 0.096);
		if (!IsUsingAbility1(EventPlayer()))
		{
			break;
		}
	}
	if (IsUsingAbility1(EventPlayer()))
	{
		PressButton(EventPlayer(), Button.Ability1);
	}
	is_invisible = false;
}

rule: "Team 1 Reinhardt: Cancel Charge on Boss Enemies"
Event.PlayerDealtKnockback
Team.Team1
Player.Reinhardt
{
	AbortIf(EventAbility() != null);
	AbortIf(!Victim().is_living_boss);
	Damage(Victim(), EventPlayer(), 250);
	CancelPrimaryAction(EventPlayer());
	Victim().gmut_fortified_bypass_end_t = Max(TotalTimeElapsed() + 1.2, Victim().gmut_fortified_bypass_end_t);
	SetStatus(Victim(), EventPlayer(), Status.Stunned, 1.2);
}

rule: "Team 1 Roadhog: Cancel Chain Hook on Boss Enemies"
Event.OnDamageDealt
Team.Team1
Player.Roadhog
{
	AbortIf(EventAbility() != Button.Ability1);
	AbortIf(!Victim().is_living_boss);
	AbortIf(!IsUsingAbility1(EventPlayer()));
	CancelPrimaryAction(EventPlayer());
	MinWait();
	Victim().gmut_fortified_bypass_end_t = Max(TotalTimeElapsed() + 1, Victim().gmut_fortified_bypass_end_t);
	SetStatus(Victim(), EventPlayer(), Status.Stunned, 1);
}

rule: "Team 1 Tracer: Start Health Regeneration after Recall"
Event.OngoingPlayer
Team.Team1
Player.Tracer
if (IsUsingAbility2(EventPlayer()) == true)
{
	Wait(0.85, WaitBehavior.IgnoreCondition);
	last_damage_taken_t = false;
}

rule: "Team 1 Zenyatta: Harmony target is harder to hit"
Event.OnHealingDealt
Team.Team1
Player.Zenyatta
{
	AbortIf(EventAbility() != Button.Ability1);
	Healee().active_ab_is_smoked = true;
	Wait(1, WaitBehavior.IgnoreCondition);
}

rule: "Team 2: Bot Init"
Event.OngoingPlayer
Team.Team2
{
	SetRespawnMaxTime(EventPlayer(), 9999);
	ab_bought_abilities_string = "";
	# Workaround: Create Boss Health Bars
	if (SlotOf(EventPlayer()) == 0 || gamemode == 2 && SlotOf(EventPlayer()) <= 3)
	{
		CreateProgressBarInWorldText(!iv_is_portal && is_living_boss ? AllPlayers(Team.All) : [], 100 * NormalizedHealth(EventPlayer()) + 0 * TotalTimeElapsed(), "", EventPlayer(), 0.5, Clipping.ClipAgainstSurfaces, Color.Red, Color.Blue, ProgressBarWorldEvaluation.VisibleToAndValues, Spectators.DefaultVisibility);
	}
}

rule: "Team 2 (Death): Field Resurrection"
Event.OnDeath
Team.Team2
{
	AbortIf(!wave_number);
	fear_end_t = false;
	ClearStatus(EventPlayer(), Status.Hacked);
	if (SlotOf(EventPlayer()) == 1 && (objective_phase_number == 1 || objective_phase_number == 2))
	{
		if (objective_phase_number == 1)
		{
			if (hvt_dom_objective_killed_count)
			{
				BigMessage(AllPlayers(Team.All), "HVT subdued!");
			}
			else
			{
				BigMessage(AllPlayers(Team.All), "HVT subdued! Gained bonus health");
			}
			hvt_dom_objective_killed_count += 1;
			objective_phase_number = 2;
			revive_timer = false;
			downed_start_t = 2;
			gmut_fortified_bypass_end_t = 100000;
		}
		if (EventWasEnvironment())
		{
			temp_1 = NearestWalkablePosition(EventPlayer());
			nwp_teleport();
		}
		Resurrect(EventPlayer());
		ClearStatus(EventPlayer(), Status.PhasedOut);
		SetStatus(EventPlayer(), null, Status.Invincible, 9999);
		SetStatus(EventPlayer(), null, Status.KnockedDown, 9999);
		Wait(0.05, WaitBehavior.RestartWhenTrue);
		SetStatus(EventPlayer(), null, Status.PhasedOut, 9999);
		Abort();
	}
	if (!EventWasEnvironment() && HeroOf(EventPlayer()) != Hero.Baptiste && !is_living_boss && !is_mutated && (mut_advanced_medkit || real_tier < 4))
	{
		temp_1 = RandomValueInArray(FilteredArray(PlayersOnHero(Hero.Baptiste, Team.Team2), IsAlive(ArrayElement()) && !(HasStatus(ArrayElement(), Status.Hacked) || HasStatus(ArrayElement(), Status.Stunned) || ArrayElement().fear_end_t >= TotalTimeElapsed()) && ArrayElement().ab_var_2 + (mut_advanced_medkit ? 1 : 3) < TotalTimeElapsed() && DistanceBetween(EventPlayer(), ArrayElement()) <= 10 && IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock)));
		if (temp_1)
		{
			Communicate(temp_1, Communication.YouAreWelcome);
			temp_1.ab_var_2 = TotalTimeElapsed();
			PressButton(temp_1, Button.Ability1);
			Resurrect(EventPlayer());
			PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.Green, EventPlayer(), 1);
			if (HeroOf(EventPlayer()) == Hero.Orisa)
			{
				# Disable Fortify so that Orisa can be knocked down
				SetAbilityCooldown(EventPlayer(), Button.Ability1, 0.5);
			}
			# Knocked Down Status is not applied when the bot is killed while stunned without a wait
			Wait(0.016, WaitBehavior.RestartWhenTrue);
			gmut_fortified_bypass_end_t = Max(TotalTimeElapsed() + 1.75, gmut_fortified_bypass_end_t);
			SetStatus(EventPlayer(), null, Status.KnockedDown, 1.75);
			Abort();
		}
	}
	if (gmut_storm_raging && gmut_var)
	{
		temp_1 = ArraySlice(SortedArray(FilteredArray(PlayersWithinRadius(EyePosition(EventPlayer()), 8, Team.Team2, RadiusLOS.Surfaces), ArrayElement().is_alive && !ArrayElement().gmut_var && !ArrayElement().iv_is_portal), DistanceBetween(EventPlayer(), ArrayElement())), 0, 2);
		temp_1.gmut_var = true;
		for (temp_2 = 0; CountOf(temp_1); 1)
		{
			PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.Red, temp_1[temp_2], 1);
		}
		gmut_var = false;
	}
	if (gamemode == 2 && is_living_boss)
	{
		money_amount += 40;
		if (hvt_dom_objective_killed_count)
		{
			BigMessage(AllPlayers(Team.All), "Killed both guards! Gained bonus health");
			enable_normal_spawns = true;
			call_reinforcements();
			async! play_incoming_sound_twice();
			upgrade_health_and_healing();
		}
		else
		{
			BigMessage(AllPlayers(Team.All), "Killed a guard!");
		}
		hvt_dom_objective_killed_count += 1;
	}
	StopForcingPlayerOutlines(EventPlayer(), AllPlayers(Team.All));
	StopFacing(EventPlayer());
	StopThrottleInDirection(EventPlayer());
	is_living_boss = false;
	is_using_boss_aggression = false;
	is_target_in_los = 0;
	is_alive = false;
}

rule: "Team 2 (Respawn): Reset Dummy, Change Hero"
Event.OngoingPlayer
Team.Team2
if (is_alive == false)
if ((base_tier == -1 ? enable_objective_enemy_spawn : special_spawns_count > 0 || enable_normal_spawns || is_expendable) == true)
{
	if (!(base_tier == -1 || gamemode == 2 && objective_phase_number == 0 && SlotOf(EventPlayer()) <= 3))
	{
		Wait(0.5 + 0.1 * Max(0, SlotOf(EventPlayer()) - 2), WaitBehavior.AbortWhenFalse);
	}
	StopAllDamageOverTime(EventPlayer());
	ClearStatus(EventPlayer(), Status.Burning);
	ClearStatus(EventPlayer(), Status.Rooted);
	AbortIfConditionIsFalse();
	if (is_mutated)
	{
		StopScalingPlayer(EventPlayer());
		StopModifyingHeroVoiceLines(EventPlayer());
		is_mutated = false;
		mut_mutation = TotalTimeElapsed() + 30;
	}
	if (is_waiting_to_remove_bot && SlotOf(EventPlayer()) >= 9)
	{
		is_waiting_to_remove_bot = false;
		DestroyDummyBot(Team.Team2, SlotOf(EventPlayer()));
		Abort();
	}
	DestroyEffect(active_ab_effect_list);
	active_ab_effect_list = [];
	if (is_hardwired)
	{
		RemoveHealthPoolFromPlayer(HP_Pool[4]);
	}
	if (mut_bulletproof)
	{
		RemoveHealthPoolFromPlayer(HP_Pool[5]);
	}
	if (mut_yakuza)
	{
		RemoveHealthPoolFromPlayer(HP_Pool[7]);
	}
	teleport_to_free_spawn();
	if (HeroOf(EventPlayer()) == Hero.Soldier76)
	{
		# Select Soldier Variant
		if (special_spawns_count > 0)
		{
			special_spawns_count -= 1;
			if (tier_4_spawns_block_end_t >= TotalTimeElapsed() || wave_number < 5)
			{
				real_tier = 3;
			}
			else
			{
				tier_4_spawns_block_end_t = TotalTimeElapsed() + 10;
				real_tier = 4;
			}
		}
		else
		{
			temp_1 = base_tier + (mut_promotion && RandomInteger(1, 100) <= 20);
			if (temp_1 == 1)
			{
				real_tier = mut_gear_upgrade ? 2 : 1;
			}
			else if (temp_1 == 2)
			{
				real_tier = 2;
			}
			else
			{
				real_tier = IsTrueForAny(AllLivingPlayers(Team.Team2), !ArrayElement().is_living_boss && ArrayElement().real_tier == 4) || RandomInteger(1, 100) <= 80 ? 3 : 4;
			}
		}
		Resurrect(EventPlayer());
		if (real_tier == 1)
		{
			StartForcingDummyBotName(EventPlayer(), "Trooper");
			combat_pathfinding_type = 0;
			ab_var_3 = true;
			is_ranged = true;
			can_dodge = false;
			Damage_Dealt = 0.5;
			health_percent = 0.333;
		}
		else if (real_tier == 2)
		{
			StartForcingDummyBotName(EventPlayer(), "Heavy Trooper");
			combat_pathfinding_type = 8;
			ab_var_3 = false;
			is_ranged = false;
			can_dodge = false;
			Damage_Dealt = 0.45;
			health_percent = 0.417;
		}
		else if (real_tier == 3)
		{
			StartForcingDummyBotName(EventPlayer(), "Grenadier");
			combat_pathfinding_type = 4;
			ab_var_3 = false;
			is_ranged = true;
			can_dodge = true;
			Damage_Dealt = 0.55;
			health_percent = 0.5;
		}
		else
		{
			StartForcingDummyBotName(EventPlayer(), "Cloaker");
			CreateEffect(AllPlayers(Team.All), Effect.EchoCloningEffect, EvaluateOnce(TotalTimeElapsed() + 0.5) >= TotalTimeElapsed() || ab_var_1 || ab_var_2 ? Color.Team1 : Color.Team2, EventPlayer(), 1, EffectRev.VisibleToAndColor);
			ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
			combat_pathfinding_type = 9;
			ab_var_3 = true;
			is_ranged = false;
			can_dodge = false;
			Damage_Dealt = 1;
			health_percent = 1.1;
			real_tier = 4;
		}
		if (!mut_lock_n_load)
		{
			temp_1 = [30, 40, 1, 60][real_tier - 1];
			SetMaxAmmo(EventPlayer(), false, temp_1);
			SetAmmo(EventPlayer(), false, temp_1);
		}
		is_fortified = gmut_fortified;
		can_stagger = !is_fortified && real_tier != 4;
		can_quick_melee = real_tier != 4;
	}
	else
	{
		# Select Hero
		if (base_tier == -1)
		{
			is_living_boss = true;
			enable_objective_enemy_spawn = false;
			if (gamemode == 0)
			{
				if (objective_phase_number)
				{
					ForcePlayerHero(EventPlayer(), boss_list_1[wave_number - 1]);
					iv_is_portal = false;
					is_pathfinding_disabled = false;
				}
				else
				{
					ForcePlayerHero(EventPlayer(), Hero.Torbjorn);
					iv_is_portal = true;
					is_pathfinding_disabled = true;
					objective_phase_number = 1;
					BigMessage(AllPlayers(Team.All), "Portal Opened!");
				}
			}
			else
			{
				ForcePlayerHero(EventPlayer(), boss_list_1[wave_number - 1]);
				objective_phase_number = 1;
				hvt_dom_objective_killed_count = false;
				is_using_boss_aggression = true;
				gmut_fortified_bypass_end_t = false;
				BigMessage(AllPlayers(Team.All), "High Value Target located!");
			}
		}
		else if (gamemode == 2 && objective_phase_number == 0)
		{
			is_living_boss = true;
			is_using_boss_aggression = true;
			enable_objective_enemy_spawn -= 1;
			if (SlotOf(EventPlayer()) == 2)
			{
				ForcePlayerHero(EventPlayer(), boss_list_1[wave_number - 1]);
			}
			else
			{
				ForcePlayerHero(EventPlayer(), boss_list_2[wave_number - 1]);
			}
			if (enable_objective_enemy_spawn <= 0)
			{
				objective_phase_number = 1;
				BigMessage(AllPlayers(Team.All), "Control Points located!");
			}
		}
		else if (special_spawns_count > 0)
		{
			special_spawns_count -= 1;
			if (tier_4_spawns_block_end_t >= TotalTimeElapsed() || wave_number < 5)
			{
				ForcePlayerHero(EventPlayer(), FirstOf(SortedArray(FilteredArray([Hero.Roadhog, mut_yakuza ? Hero.Hanzo : false, mut_yakuza ? Hero.Genji : false, mut_yakuza ? Hero.Kiriko : false, wave_number >= 2 ? Hero.Sigma : false, wave_number >= 2 ? Hero.Orisa : false, wave_number >= 3 ? Hero.Dva : false, wave_number >= 3 ? Hero.Tracer : false, wave_number >= 4 ? Hero.Ana : false, wave_number >= 4 ? Hero.Mei : false, wave_number >= 6 ? Hero.WreckingBall : false], ArrayElement()), RandomReal(0, 0.5) + IsHeroBeingPlayed(ArrayElement(), Team.Team2))));
			}
			else
			{
				tier_4_spawns_block_end_t = TotalTimeElapsed() + 10;
				ForcePlayerHero(EventPlayer(), FirstOf(SortedArray(FilteredArray([Hero.Hanzo, Hero.Genji, Hero.Kiriko, wave_number >= 10 ? Hero.Reinhardt : false], ArrayElement()), RandomReal(0, 0.5) + NumberOfHeroes(ArrayElement(), Team.Team2))));
			}
		}
		else
		{
			temp_1 = base_tier + (mut_promotion && RandomInteger(1, 100) <= 20);
			if (temp_1 == 1)
			{
				ForcePlayerHero(EventPlayer(), FirstOf(SortedArray(FilteredArray([Hero.Cassidy, wave_number >= 3 ? Hero.Brigitte : false], ArrayElement()), RandomReal(0, 0.5) + IsHeroBeingPlayed(ArrayElement(), Team.Team2))));
			}
			else if (temp_1 == 2)
			{
				ForcePlayerHero(EventPlayer(), FirstOf(SortedArray(FilteredArray([Hero.Widowmaker, Hero.Baptiste, Hero.Zarya, Hero.Pharah, wave_number >= 5 ? Hero.Echo : false, wave_number >= 7 ? Hero.Sombra : false, wave_number >= 11 ? Hero.Reaper : false, wave_number >= 8 ? Hero.Lucio : false], ArrayElement()), RandomReal(0, 0.5) + IsHeroBeingPlayed(ArrayElement(), Team.Team2))));
			}
			else
			{
				ForcePlayerHero(EventPlayer(), FirstOf(SortedArray(FilteredArray([Hero.Roadhog, Hero.WreckingBall, Hero.Mei, wave_number >= 6 ? Hero.Orisa : false, wave_number >= 4 ? Hero.Sigma : false, wave_number >= 8 ? Hero.Tracer : false, wave_number >= 9 ? Hero.Ana : false, wave_number >= 9 ? Hero.Dva : false], ArrayElement()), RandomReal(0, 0.5) + IsHeroBeingPlayed(ArrayElement(), Team.Team2))));
			}
		}
		# Selected Hero is the same as current Hero
		if (IsDead(EventPlayer()))
		{
			Resurrect(EventPlayer());
			SetAmmo(EventPlayer(), false, MaxAmmo(EventPlayer(), false));
			# D.Va is resurrected without mech, so remech
			if (HeroOf(EventPlayer()) == Hero.Dva)
			{
				SetUltimateCharge(EventPlayer(), 100);
				PressButton(EventPlayer(), Button.Ultimate);
			}
		}
		if (HeroOf(EventPlayer()) == Hero.Cassidy || HeroOf(EventPlayer()) == Hero.Baptiste)
		{
			combat_pathfinding_type = 0;
			is_ranged = true;
			can_dodge = false;
		}
		else if (HeroOf(EventPlayer()) == Hero.Brigitte || HeroOf(EventPlayer()) == Hero.Reinhardt || HeroOf(EventPlayer()) == Hero.WreckingBall)
		{
			combat_pathfinding_type = 1;
			is_ranged = false;
			can_dodge = false;
		}
		else if (HeroOf(EventPlayer()) == Hero.Orisa)
		{
			combat_pathfinding_type = 2;
			is_ranged = true;
			can_dodge = false;
		}
		else if (HeroOf(EventPlayer()) == Hero.Sombra || HeroOf(EventPlayer()) == Hero.Dva || HeroOf(EventPlayer()) == Hero.Kiriko)
		{
			combat_pathfinding_type = 3;
			is_ranged = false;
			can_dodge = false;
			if (HeroOf(EventPlayer()) == Hero.Sombra)
			{
				CreateBeamEffect(ab_player ? AllPlayers(Team.All) : [], BeamType.BadBeam, EventPlayer(), ab_player, Color.Red, EffectRev.VisibleToPositionAndRadius);
				ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
			}
			if (HeroOf(EventPlayer()) == Hero.Kiriko)
			{
				is_ranged = true;
				CreateEffect(ab_var_1 ? AllPlayers(Team.All) : [], Effect.Sphere, Color.Turquoise, EventPlayer(), ab_var_1, EffectRev.VisibleToPositionAndRadius);
				ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
			}
		}
		else if (HeroOf(EventPlayer()) == Hero.Widowmaker || HeroOf(EventPlayer()) == Hero.Ana || HeroOf(EventPlayer()) == Hero.Pharah)
		{
			combat_pathfinding_type = 4;
			is_ranged = true;
			can_dodge = true;
		}
		else if (HeroOf(EventPlayer()) == Hero.Roadhog || HeroOf(EventPlayer()) == Hero.Reaper || HeroOf(EventPlayer()) == Hero.Sigma || HeroOf(EventPlayer()) == Hero.Mei || HeroOf(EventPlayer()) == Hero.Zarya)
		{
			combat_pathfinding_type = 5;
			is_ranged = false;
			can_dodge = true;
		}
		else if (HeroOf(EventPlayer()) == Hero.Tracer || HeroOf(EventPlayer()) == Hero.Genji || HeroOf(EventPlayer()) == Hero.Lucio)
		{
			combat_pathfinding_type = 6;
			is_ranged = false;
			can_dodge = false;
			if (HeroOf(EventPlayer()) == Hero.Tracer)
			{
				recall_block_end_t = TotalTimeElapsed() + 4;
			}
		}
		else if (HeroOf(EventPlayer()) == Hero.Echo || HeroOf(EventPlayer()) == Hero.Hanzo)
		{
			combat_pathfinding_type = 7;
			is_ranged = true;
			can_dodge = false;
		}
		else if (iv_is_portal)
		{
			can_dodge = false;
		}
		if (HeroOf(EventPlayer()) == Hero.Brigitte || HeroOf(EventPlayer()) == Hero.Cassidy)
		{
			real_tier = 1;
		}
		else if (HeroOf(EventPlayer()) == Hero.Echo || HeroOf(EventPlayer()) == Hero.Baptiste || HeroOf(EventPlayer()) == Hero.Reaper || HeroOf(EventPlayer()) == Hero.Sombra || HeroOf(EventPlayer()) == Hero.Widowmaker || HeroOf(EventPlayer()) == Hero.Pharah || HeroOf(EventPlayer()) == Hero.Lucio || HeroOf(EventPlayer()) == Hero.Zarya)
		{
			real_tier = 2;
			if (mut_bulletproof == true)
			{
				AddHealthPoolToPlayer(EventPlayer(), HealthType.Health, 0.9 * health_percent, false, false);
				HP_Pool[5] = LastCreatedHealthPool();
			}
		}
		else if (HeroOf(EventPlayer()) == Hero.Dva || HeroOf(EventPlayer()) == Hero.Orisa || HeroOf(EventPlayer()) == Hero.Roadhog || HeroOf(EventPlayer()) == Hero.Ana || HeroOf(EventPlayer()) == Hero.Tracer || HeroOf(EventPlayer()) == Hero.Mei || HeroOf(EventPlayer()) == Hero.WreckingBall || HeroOf(EventPlayer()) == Hero.Sigma)
		{
			real_tier = 3;
		}
		else
		{
			real_tier = 4;
		}
		is_fortified = gmut_fortified || is_living_boss;
		can_stagger = !is_fortified && (HeroOf(EventPlayer()) == Hero.Cassidy || HeroOf(EventPlayer()) == Hero.Baptiste || HeroOf(EventPlayer()) == Hero.Pharah || HeroOf(EventPlayer()) == Hero.Widowmaker);
		can_quick_melee = HeroOf(EventPlayer()) != Hero.Brigitte && HeroOf(EventPlayer()) != Hero.Roadhog && HeroOf(EventPlayer()) != Hero.WreckingBall && HeroOf(EventPlayer()) != Hero.Reinhardt && !iv_is_portal;
		if (is_living_boss)
		{
			health_percent = (is_mutator_mode_enabled ? 1.2 : 1) * (length == 0 ? 1.25 : 1.5) * [4, 2.25, 2.25, 1][real_tier - 1];
			Damage_Dealt = (is_mutator_mode_enabled ? 1.2 : 1) * ((gamemode == 0 ? 1.5 : 1.3) + wave_number / 35) * [3.5, 2.25, 1.7, 1.05][real_tier - 1];
		}
		else
		{
			if (mut_mutation && mut_mutation < TotalTimeElapsed() && RandomInteger(1, 100) <= 15 && real_tier < 4)
			{
				StartScalingPlayer(EventPlayer(), 1.3, false);
				StartModifyingHeroVoiceLines(EventPlayer(), 0.5, false);
				mut_mutation = 100000;
				is_mutated = true;
				health_percent = 2.5;
				Damage_Dealt = 1.3;
				CreateEffect(AllPlayers(Team.All), Effect.WinstonPrimalRageEffect, Color.Team2, EventPlayer(), 1, EffectRev.VisibleTo);
				ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
			}
			else
			{
				health_percent = 1;
				Damage_Dealt = 1;
			}
		}
		if (mut_hardwired)
		{
			if (HeroOf(EventPlayer()) == Hero.Echo || HeroOf(EventPlayer()) == Hero.Orisa || HeroOf(EventPlayer()) == Hero.Dva || HeroOf(EventPlayer()) == Hero.Genji || HeroOf(EventPlayer()) == Hero.WreckingBall)
			{
				is_hardwired = true;
				if (HeroOf(EventPlayer()) == Hero.Dva)
				{
					AddHealthPoolToPlayer(EventPlayer(), HealthType.Shields, IsInAlternateForm(EventPlayer()) ? 0 : 0.75 * health_percent, true, true);
				}
				else
				{
					AddHealthPoolToPlayer(EventPlayer(), HealthType.Shields, 0.75 * health_percent, true, true);
				}
				HP_Pool[4] = LastCreatedHealthPool();
			}
			else
			{
				is_hardwired = false;
			}
		}
		if (mut_yakuza)
		{
			if (HeroOf(EventPlayer()) == Hero.Kiriko || HeroOf(EventPlayer()) == Hero.Hanzo || HeroOf(EventPlayer()) == Hero.Genji)
			{
				AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, 0.75 * health_percent, true, true);
				HP_Pool[7] = LastCreatedHealthPool();
			}
		}
		StopHoldingButton(EventPlayer(), Button.PrimaryFire);
		StopHoldingButton(EventPlayer(), Button.SecondaryFire);
		SetDamageReceived(EventPlayer(), is_living_boss ? 50 : 100);
		if (HeroOf(EventPlayer()) == Hero.Dva && is_living_boss)
		{
			SetDamageReceived(EventPlayer(), 100);
		}
	}
	start_facing();
	if (SlotOf(EventPlayer()) == 1)
	{
		StartThrottleInDirection(EventPlayer(), VectorTowards(EventPlayer(), nav_pos), (Slowed_until >= TotalTimeElapsed() ? 0.3 : 1) * (DistanceBetween(EventPlayer(), Vector(XOf(nav_pos), YOf(PositionOf(EventPlayer())), ZOf(nav_pos))) >= 0.5 ? is_aggressive ? 1 : 0.9 : 0), Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
	}
	else if (!iv_is_portal)
	{
		StartThrottleInDirection(EventPlayer(), VectorTowards(EventPlayer(), nav_pos), (Slowed_until >= TotalTimeElapsed() ? 0.3 : 1) * (DistanceBetween(EventPlayer(), Vector(XOf(nav_pos), YOf(PositionOf(EventPlayer())), ZOf(nav_pos))) >= 0.5), Relative.ToWorld, ThrottleBehavior.ReplaceExistingThrottle, ThrottleRev.DirectionAndMagnitude);
	}
	# health_percent value in percent, health does not scale during a bot's live
	health_percent *= diff_health_mult * (is_mutator_mode_enabled ? 1.1 : 1) * (100 + 5 * (wave_number - 1 + Max(0, wave_number - 9))) * (0.111 + 0.222 * combatants_count);
	SetMaxHealth(EventPlayer(), health_percent);
	# Damage_Dealt value as a factor, damage can scale during a bot's live
	Damage_Dealt *= diff_damage_mult;
	SetDamageDealt(EventPlayer(), Damage_Dealt * (mut_emp_rounds ? 2 : 1) * (20 + 9.25 * (wave_number - 1 + Max(0, wave_number - 9))) * (0.111 + 0.222 * combatants_count) * 9 / NumberOfPlayers(Team.Team2));
	SetHealingReceived(EventPlayer(), iv_is_portal ? 0 : diff_health_mult * (is_living_boss ? 0.5 : 1) * (is_mutator_mode_enabled ? 1.1 : 1) * (100 + 4 * (wave_number - 1 + Max(0, wave_number - 9))) * (0.111 + 0.222 * combatants_count));
	SetKnockbackReceived(EventPlayer(), is_fortified ? 60 : 100);
	SetStatus(EventPlayer(), null, Status.Rooted, 1);
	if (combat_pathfinding_type == 9)
	{
		SetMoveSpeed(EventPlayer(), mut_amped ? 161 : 140);
	}
	else
	{
		SetMoveSpeed(EventPlayer(), mut_amped ? 115 : 100);
	}
	if (mut_lock_n_load)
	{
		SetMaxAmmo(EventPlayer(), false, 600);
		SetAmmo(EventPlayer(), false, 600);
	}
	find_chase_target();
	ab_player = null;
	ab_var_1 = false;
	ab_var_2 = false;
	fear_end_t = iv_is_portal ? 100000 : gamemode == 2 && is_living_boss ? TotalTimeElapsed() + 3 : 0;
	is_aggressive = !is_using_boss_aggression;
	if (gmut_storm_raging)
	{
		gmut_var = !is_living_boss && real_tier < 3 && RandomInteger(1, 3) > CountOf(FilteredArray(AllLivingPlayers(Team.Team2), ArrayElement().gmut_var));
	}
	else if (gmut_adaptive_shield)
	{
		gmut_var = false;
	}
	if (!iv_is_portal)
	{
		SetPlayerHealth(EventPlayer(), 100000);
	}
	is_alive = true;
	AbortIf(!is_living_boss);
	StartForcingPlayerOutlines(EventPlayer(), AllPlayers(Team.All), true, Color.Yellow, OutlineType.Always);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	if (is_alive)
	{
		# Workaround: Sometimes outlines don't appear when set too early
		StartForcingPlayerOutlines(EventPlayer(), AllPlayers(Team.All), true, Color.Yellow, OutlineType.Always);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2: Enable Combat Pathfinding"
Event.OngoingPlayer
Team.Team2
if (is_load_limit_reached == false)
if (is_pathfinding_disabled == false)
if (is_using_combat_pathfinding == 0)
if (is_target_in_los >= 5)
if (is_aggressive == true)
if (IsOnGround(EventPlayer()) == true)
if ((YOf(PositionOf(target)) - YOf(PositionOf(EventPlayer())) <= 2 || YOf(nodes[target.best_nav_idx]) - YOf(PositionOf(EventPlayer())) <= 1) == true)
if ((is_ranged || DistanceBetween(EventPlayer(), target) <= 1 + DistanceBetween(target, nodes[target.best_nav_idx])) == true)
{
	if (target.last_nav_update_t + combatants_count * 0.4 < TotalTimeElapsed())
	{
		update_target_nav();
		AbortIfConditionIsFalse();
	}
	if (IsTrueForAny(elevator_nodes, DistanceBetween(EventPlayer(), Vector(XOf(ArrayElement()), YOf(PositionOf(EventPlayer())), ZOf(ArrayElement()))) < 1.5))
	{
		Wait(1, WaitBehavior.IgnoreCondition);
		AbortIfConditionIsFalse();
	}
	is_using_combat_pathfinding = 3;
	target_last_seen_pos = PositionOf(target);
	is_nav_reachable_node = false;
	MinWait();
	LoopIfConditionIsTrue();
}

rule: "Team 2: Disable Combat Pathfinding"
Event.OngoingPlayer
Team.Team2
if (is_using_combat_pathfinding == true)
if ((is_aggressive && is_target_in_los) == 0)
{
	is_using_combat_pathfinding = 0;
}

rule: "Team 2: Set Nav (Not in Combat), Get Back to Node, Set Nav is Node"
Event.OngoingPlayer
Team.Team2
if (is_alive == true)
if (is_using_combat_pathfinding == 0)
if (is_nav_reachable_node == false)
{
	if (!(is_load_limit_reached || is_pathfinding_disabled))
	{
		if (combat_pathfinding_type == 0)
		{
			SetMoveSpeed(EventPlayer(), mut_amped ? 115 : 100);
		}
		nav_pos = FirstOf(SortedArray(FilteredArray(nodes, IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock)), DistanceBetween(EventPlayer(), ArrayElement())));
		if (nav_pos == false)
		{
			nav_pos = FirstOf(SortedArray(nodes, DistanceBetween(EventPlayer(), ArrayElement())));
		}
		nav_idx = IndexOfArrayValue(nodes, nav_pos);
		is_nav_reachable_node = true;
	}
	Wait(0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Set Nav (Not in Combat), Select Next Node, Set Last Time at Node"
Event.OngoingPlayer
Team.Team2
if (is_alive == true)
if (is_using_combat_pathfinding == 0)
if (is_nav_reachable_node == true)
if (DistanceBetween(EventPlayer(), nav_pos) <= 1)
{
	last_time_at_node_t = TotalTimeElapsed();
	if (!(is_load_limit_reached || is_pathfinding_disabled))
	{
		if (gamemode == 2 && is_living_boss && !is_aggressive)
		{
			if (nav_idx == dom_nav_guard_idx)
			{
				Wait(0.5, WaitBehavior.IgnoreCondition);
				LoopIfConditionIsTrue();
			}
			else
			{
				nav_idx = FirstOf(SortedArray(edges[nav_idx], RandomReal(0, 0.5) + IndexOfStringChar(char_string, CharInString(distance_matrix[RoundToInteger((ArrayElement() * nodes_count + dom_nav_guard_idx) / 128, Rounding.Down)], (ArrayElement() * nodes_count + dom_nav_guard_idx) % 128))));
				nav_pos = nodes[nav_idx];
			}
		}
		else if (target.is_combatant)
		{
			if (target.last_nav_update_t + combatants_count * 0.4 < TotalTimeElapsed())
			{
				update_target_nav();
			}
			if (nav_idx == target.best_nav_idx && is_aggressive && fear_end_t < TotalTimeElapsed())
			{
				is_target_in_los = 5;
				is_using_combat_pathfinding = 3;
				target_last_seen_pos = PositionOf(target);
				is_nav_reachable_node = false;
			}
			else
			{
				nav_idx = FirstOf(SortedArray(edges[nav_idx], (is_aggressive && fear_end_t < TotalTimeElapsed() ? 1 : -1) * (RandomReal(0, 0.5) + IndexOfStringChar(char_string, CharInString(distance_matrix[RoundToInteger((ArrayElement() * nodes_count + target.best_nav_idx) / 128, Rounding.Down)], (ArrayElement() * nodes_count + target.best_nav_idx) % 128)))));
				nav_pos = nodes[nav_idx];
			}
		}
		else
		{
			nav_idx = RandomValueInArray(edges[nav_idx]);
			nav_pos = nodes[nav_idx];
		}
	}
	Wait(0.5, WaitBehavior.AbortWhenFalse);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Set Nav (in Combat)"
Event.OngoingPlayer
Team.Team2
if (is_using_combat_pathfinding == true)
{
	if (!(is_load_limit_reached || is_pathfinding_disabled || HasStatus(EventPlayer(), Status.Rooted) || HasStatus(EventPlayer(), Status.Stunned)))
	{
		if (IsInLineOfSight(EyePosition(EventPlayer()), EyePosition(target) + target.eye_offset, BarrierLOS.NoBarriersBlock))
		{
			target_last_seen_pos = PositionOf(target);
			if (is_flying)
			{
				nav_pos = RayCastHitPosition(EyePosition(target), EyePosition(target) + 12 * DirectionFromAngles(HorizontalFacingAngleOf(target) + (RandomInteger(0, 1) ? -45 : 45), -60), null, null, false);
				Wait(0.5, WaitBehavior.IgnoreCondition);
			}
			else if (target.is_flying && combat_pathfinding_type != 4)
			{
				# Roam
				nav_pos = PositionOf(EventPlayer()) + 3.5 * DirectionFromAngles(RandomInteger(-179, 180), 0);
				find_wp_near_nav();
			}
			else
			{
				# Long Range, roam randomly, slow
				if (combat_pathfinding_type == 0)
				{
					if (DistanceBetween(EventPlayer(), target) <= (HeroOf(EventPlayer()) == Hero.Baptiste ? 20 : 15))
					{
						nav_pos = PositionOf(EventPlayer()) + 2.5 * DirectionFromAngles(RandomInteger(-179, 180), 0);
					}
					else
					{
						nav_pos = PositionOf(EventPlayer()) + 2.5 * DirectionFromAngles(HorizontalAngleFromDirection(DirectionTowards(EventPlayer(), target)) + RandomValueInArray([-45, 0, 45]), 0);
					}
					find_wp_near_nav();
				}
				else if (combat_pathfinding_type == 1)
				{
					if (YOf(PositionOf(target)) - YOf(PositionOf(EventPlayer())) > -2)
					{
						nav_pos = PositionOf(EventPlayer()) + Min(3.5, DistanceBetween(EventPlayer(), target) - 2) * DirectionTowards(EventPlayer(), target);
						find_wp_near_nav();
					}
					else
					{
						nav_pos = PositionOf(target) + 2 * DirectionTowards(target, EventPlayer());
						check_drop();
					}
				}
				else if (combat_pathfinding_type == 2)
				{
					nav_pos = PositionOf(EventPlayer()) + Min(1.5, DistanceBetween(EventPlayer(), target) - 2) * DirectionTowards(EventPlayer(), target);
					find_wp_near_nav();
				}
				else if (combat_pathfinding_type == 3)
				{
					nav_pos = PositionOf(target) + 5 * DirectionFromAngles(HorizontalFacingAngleOf(target) + RandomValueInArray([-45, 45]), 0);
					if (YOf(PositionOf(target)) - YOf(PositionOf(EventPlayer())) > -2)
					{
						nav_pos = PositionOf(EventPlayer()) + Min(3.5, DistanceBetween(EventPlayer(), nav_pos)) * DirectionTowards(EventPlayer(), nav_pos);
						find_wp_near_nav();
					}
					else
					{
						check_drop();
					}
				}
				else if (combat_pathfinding_type == 4)
				{
					if (DistanceBetween(EventPlayer(), target) <= 12)
					{
						nav_pos = PositionOf(EventPlayer()) + 3.5 * DirectionFromAngles(HorizontalAngleFromDirection(DirectionTowards(target, EventPlayer())) + (DistanceBetween(EventPlayer(), target) <= 8 && real_speed <= 1 ? RandomValueInArray([-135, 135]) : 0), 0);
						find_wp_near_nav();
					}
					else
					{
						nav_pos = PositionOf(EventPlayer());
					}
				}
				else if (combat_pathfinding_type == 5)
				{
					nav_pos = PositionOf(target) + 3 * DirectionFromAngles(HorizontalFacingAngleOf(target), 0);
					if (YOf(PositionOf(target)) - YOf(PositionOf(EventPlayer())) > -2)
					{
						nav_pos = PositionOf(EventPlayer()) + Min(3.5, DistanceBetween(EventPlayer(), nav_pos)) * DirectionTowards(EventPlayer(), nav_pos);
						find_wp_near_nav();
					}
					else
					{
						check_drop();
					}
				}
				else if (combat_pathfinding_type == 6)
				{
					nav_pos = PositionOf(target) + 1.5 * DirectionFromAngles(HorizontalFacingAngleOf(target) + (HorizontalAngleTowards(target, EventPlayer()) > 0 ? 90 : -90), 0);
					if (YOf(PositionOf(target)) - YOf(PositionOf(EventPlayer())) > -2)
					{
						nav_pos = PositionOf(EventPlayer()) + Min(3.5, DistanceBetween(EventPlayer(), nav_pos)) * DirectionTowards(EventPlayer(), nav_pos);
						find_wp_near_nav();
					}
					else
					{
						check_drop();
					}
				}
				else if (combat_pathfinding_type == 7)
				{
					if (DistanceBetween(EventPlayer(), target) <= 17)
					{
						nav_pos = PositionOf(EventPlayer()) + 3.5 * DirectionFromAngles(RandomInteger(-179, 180), 0);
					}
					else
					{
						nav_pos = PositionOf(EventPlayer()) + 3.5 * DirectionFromAngles(HorizontalAngleFromDirection(DirectionTowards(EventPlayer(), target)) + RandomValueInArray([-45, 0, 45]), 0);
					}
					find_wp_near_nav();
				}
				else if (combat_pathfinding_type == 8)
				{
					temp_1 = RemoveFromArray(FilteredArray(PlayersWithinRadius(EventPlayer(), 3, Team.Team2, RadiusLOS.Off), ArrayElement().is_alive), EventPlayer());
					if (CountOf(temp_1))
					{
						nav_pos = PositionOf(EventPlayer()) + 3.5 * DirectionTowards(FirstOf(SortedArray(temp_1, DistanceBetween(EventPlayer(), ArrayElement()))), EventPlayer());
						find_wp_near_nav();
					}
					else
					{
						nav_pos = PositionOf(EventPlayer());
					}
				}
				else if (combat_pathfinding_type == 9)
				{
					if (ab_var_1)
					{
						if (YOf(PositionOf(target)) - YOf(PositionOf(EventPlayer())) > -2)
						{
							nav_pos = PositionOf(EventPlayer()) + 6 * DirectionTowards(EventPlayer(), target);
							find_wp_near_nav();
						}
						else
						{
							nav_pos = PositionOf(target);
							check_drop();
						}
					}
					else
					{
						if (ab_var_2)
						{
							nav_pos = PositionOf(target) + 3 * DirectionFromAngles(HorizontalFacingAngleOf(target), 0);
						}
						else
						{
							nav_pos = PositionOf(target) + 5 * DirectionFromAngles(HorizontalFacingAngleOf(target) + RandomValueInArray([-45, 45]), 0);
						}
						if (YOf(PositionOf(target)) - YOf(PositionOf(EventPlayer())) > -2)
						{
							nav_pos = PositionOf(EventPlayer()) + Min(4, DistanceBetween(EventPlayer(), nav_pos)) * DirectionTowards(EventPlayer(), nav_pos);
							find_wp_near_nav();
						}
						else
						{
							check_drop();
						}
					}
				}
			}
			if (combat_pathfinding_type == 0)
			{
				SetMoveSpeed(EventPlayer(), mut_amped ? 75.5 : 65);
			}
		}
		else
		{
			if (DistanceBetween(EventPlayer(), Vector(XOf(target_last_seen_pos), YOf(PositionOf(EventPlayer())), ZOf(target_last_seen_pos))) < 0.5)
			{
				target_last_seen_pos = PositionOf(target);
			}
			if (is_flying)
			{
				nav_pos = target_last_seen_pos;
			}
			else
			{
				nav_pos = PositionOf(EventPlayer()) + Min(3.5, DistanceBetween(EventPlayer(), target_last_seen_pos)) * DirectionTowards(EventPlayer(), target_last_seen_pos);
				find_wp_near_nav();
			}
			if (combat_pathfinding_type == 0)
			{
				SetMoveSpeed(EventPlayer(), mut_amped ? 115 : 100);
			}
		}
	}
	Wait(is_load_limit_reached ? 1 : 0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Find Target"
Event.OngoingPlayer
Team.Team2
if (is_alive == true)
{
	if (!(fear_end_t >= TotalTimeElapsed() || is_wraith || HeroOf(EventPlayer()) == Hero.Sombra && ab_player))
	{
		if (is_ignoring_other_targets)
		{
			temp_1 = target.is_combatant && !target.downed_start_t && !target.active_ab_is_cloaked && !(target.is_invisible && DistanceBetween(EventPlayer(), target) > 2.4) && IsInLineOfSight(EyePosition(EventPlayer()), EyePosition(target) + target.eye_offset, BarrierLOS.NoBarriersBlock) ? target : null;
		}
		else
		{
			temp_1 = FirstOf(SortedArray(FilteredArray(combatants, !ArrayElement().downed_start_t && !ArrayElement().active_ab_is_cloaked && !(ArrayElement().is_invisible && DistanceBetween(EventPlayer(), ArrayElement()) > 2.4) && IsInLineOfSight(EyePosition(EventPlayer()), EyePosition(ArrayElement()) + ArrayElement().eye_offset, BarrierLOS.NoBarriersBlock)), [1, 0.25, 2, 4][ArrayElement().ab_priority] * (ArrayElement() == target ? 0.25 : 1) * DistanceBetween(EventPlayer(), ArrayElement()) + (!is_ranged && ArrayElement().is_flying ? 500 : 0) + (HasStatus(ArrayElement(), Status.Asleep) ? 1000 : 0) + (HasStatus(ArrayElement(), Status.Invincible) || HasStatus(ArrayElement(), Status.PhasedOut) ? 2000 : 0) + (ArrayElement().active_ab_is_frenzied ? -5000 : 0)));
		}
		if (temp_1)
		{
			is_target_in_los = 5;
			target = temp_1;
			target_last_seen_pos = PositionOf(target);
		}
		else
		{
			if (target.downed_start_t || !target.is_combatant || target.active_ab_is_cloaked || !(target.is_invisible && DistanceBetween(EventPlayer(), target) > 2.4))
			{
				find_chase_target();
				is_target_in_los = 0;
			}
			else if (is_target_in_los)
			{
				if (!is_flying && YOf(PositionOf(target)) - YOf(PositionOf(EventPlayer())) > 2)
				{
					is_using_combat_pathfinding = 0;
				}
				is_target_in_los -= 1;
			}
			if (!is_target_in_los && Ammo(EventPlayer(), 0) < 0.5 * MaxAmmo(EventPlayer(), 0))
			{
				PressButton(EventPlayer(), Button.Reload);
			}
		}
	}
	Wait(is_load_limit_reached ? 1 : 0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Calculate Real Speed"
Event.OngoingPlayer
Team.Team2
if (is_alive == true)
{
	if (is_load_limit_reached || is_pathfinding_disabled)
	{
		# Larger than 1.5 to not trigger stuck rules
		real_speed = 1.6;
		Wait(0.5, WaitBehavior.AbortWhenFalse);
	}
	else
	{
		real_speed_pos_1 = PositionOf(EventPlayer());
		if (IsJumping(EventPlayer()))
		{
			last_jump_t = TotalTimeElapsed();
		}
		if (last_jump_t + 0.15 >= TotalTimeElapsed())
		{
			real_speed = DistanceBetween(Vector(XOf(real_speed_pos_1), YOf(real_speed_pos_2), ZOf(real_speed_pos_1)), real_speed_pos_2) / 0.112;
		}
		else
		{
			real_speed = DistanceBetween(real_speed_pos_1, real_speed_pos_2) / 0.112;
		}
		Wait(0.112, WaitBehavior.AbortWhenFalse);
		real_speed_pos_2 = PositionOf(EventPlayer());
		if (IsJumping(EventPlayer()))
		{
			last_jump_t = TotalTimeElapsed();
		}
		if (last_jump_t + 0.15 >= TotalTimeElapsed())
		{
			real_speed = DistanceBetween(Vector(XOf(real_speed_pos_1), YOf(real_speed_pos_2), ZOf(real_speed_pos_1)), real_speed_pos_2) / 0.112;
		}
		else
		{
			real_speed = DistanceBetween(real_speed_pos_1, real_speed_pos_2) / 0.112;
		}
		Wait(0.112, WaitBehavior.AbortWhenFalse);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2: Bot is stuck"
Event.OngoingPlayer
Team.Team2
if (is_alive == true)
if (real_speed <= 1.5)
if (is_flying == false)
if (Slowed_until < TotalTimeElapsed())
if (HasStatus(EventPlayer(), Status.Rooted) == false)
if (HasStatus(EventPlayer(), Status.Stunned) == false)
if (DistanceBetween(EventPlayer(), Vector(XOf(nav_pos), YOf(is_using_combat_pathfinding ? PositionOf(EventPlayer()) : nav_pos), ZOf(nav_pos))) >= 0.5)
{
	Wait(0.5, WaitBehavior.AbortWhenFalse);
	LoopIf(HeroOf(EventPlayer()) == Hero.Reinhardt && IsUsingUltimate(EventPlayer()));
	if (IsTrueForAny(elevator_nodes, DistanceBetween(EventPlayer(), Vector(XOf(ArrayElement()), YOf(PositionOf(EventPlayer())), ZOf(ArrayElement()))) < 1.5))
	{
		Wait(1.5, WaitBehavior.AbortWhenFalse);
	}
	AbortIfConditionIsFalse();
	if (is_using_combat_pathfinding)
	{
		if (AbsoluteValue(HorizontalAngleFromDirection(ThrottleOf(EventPlayer()))) <= 45)
		{
			PressButton(EventPlayer(), Button.Jump);
		}
	}
	else
	{
		PressButton(EventPlayer(), Button.Jump);
		if (!(is_target_in_los || fear_end_t >= TotalTimeElapsed()))
		{
			DisableMovementCollisionWithPlayers(EventPlayer());
			Wait(0.5, WaitBehavior.IgnoreCondition);
			EnableMovementCollisionWithPlayers(EventPlayer());
		}
		Wait(0.5, WaitBehavior.AbortWhenFalse);
		is_nav_reachable_node = false;
	}
	Wait(0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Teleport if Target not in LOS and hasn't reached Node for 8 seconds"
Event.OngoingPlayer
Team.Team2
if (is_alive == true)
if (HasStatus(EventPlayer(), Status.Rooted) == false)
if (HasStatus(EventPlayer(), Status.Stunned) == false)
if (is_pathfinding_disabled == false)
if (is_target_in_los == 0)
if (fear_end_t < TotalTimeElapsed())
if (last_time_at_node_t < TotalTimeElapsed())
{
	Wait(8, WaitBehavior.AbortWhenFalse);
	LoopIf(is_load_limit_reached);
	teleport_to_free_spawn();
}

rule: "Team 2: Bot took damage, Dodge"
Event.OnDamageTaken
Team.Team2
{
	AbortIf(is_load_limit_reached);
	AbortIf(is_pathfinding_disabled);
	AbortIf(!can_dodge);
	AbortIf(!is_using_combat_pathfinding);
	if (!(is_load_limit_reached || HasStatus(EventPlayer(), Status.Rooted) || HasStatus(EventPlayer(), Status.Stunned)))
	{
		if (combat_pathfinding_type == 4)
		{
			nav_pos = PositionOf(EventPlayer()) - mut_artful_dodger ? 7 : 3.5 * DirectionFromAngles(HorizontalAngleFromDirection(VectorTowards(EventPlayer(), target)) + RandomInteger(-90, 90), false);
		}
		else
		{
			nav_pos = PositionOf(EventPlayer()) + mut_artful_dodger ? 7 : 3.5 * DirectionFromAngles(HorizontalAngleFromDirection(VectorTowards(EventPlayer(), target)) + RandomInteger(-90, 90), false);
		}
		find_wp_near_nav();
	}
	Wait(mut_artful_dodger ? 0.6 : 1.2, WaitBehavior.IgnoreCondition);
}

rule: "Team 2: Is Hacked, Tase Bot"
Event.OngoingPlayer
Team.Team2
if (HasStatus(EventPlayer(), Status.Hacked) == true)
{
	AbortIf(is_living_boss);
	AbortIf(is_hardwired);
	soldier_espionage = true;
	SetReloadEnabled(EventPlayer(), false);
	SetStatus(EventPlayer(), null, Status.Burning, 9999);
	SetStatus(EventPlayer(), null, Status.Rooted, 9999);
	StartFacing(EventPlayer(), DirectionFromAngles(EvaluateOnce(HorizontalFacingAngleOf(EventPlayer())) + RandomInteger(-75, -15), RandomInteger(35, 55) + Max(-90, (EvaluateOnce(TotalTimeElapsed()) - TotalTimeElapsed()) * 18)), HasStatus(EventPlayer(), Status.Stunned) ? 0 : EvaluateOnce(TotalTimeElapsed()) - TotalTimeElapsed() > -0.2 ? 1000 : 100, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
	WaitUntil(!HasStatus(EventPlayer(), Status.Hacked), 3.5);
	SetReloadEnabled(EventPlayer(), true);
	ClearStatus(EventPlayer(), Status.Burning);
	ClearStatus(EventPlayer(), Status.Rooted);
	Wait(0.1, WaitBehavior.IgnoreCondition);
	AbortIf(!is_alive);
	start_facing();
}

rule: "Team 2: Is Hacked, effect"
Event.OngoingPlayer
Team.Team2
if (HasStatus(EventPlayer(), Status.Hacked) == true)
{
	soldier_espionage = true;
	WaitUntil(!HasStatus(EventPlayer(), Status.Hacked), 99999);
	Wait(0.1, WaitBehavior.IgnoreCondition);
	soldier_espionage = false;
	LoopIfConditionIsTrue();
}

rule: "Team 2: Quick Melee"
Event.OngoingPlayer
Team.Team2
if (can_quick_melee == true)
if (is_target_in_los == true)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(IsReloading(EventPlayer()));
	LoopIf(HasStatus(EventPlayer(), Status.Hacked));
	LoopIf(DistanceBetween(EventPlayer(), target) >= 3);
	PressButton(EventPlayer(), Button.Melee);
	Wait(10, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Bot is feared"
Event.OngoingPlayer
Team.Team2
if (fear_end_t >= TotalTimeElapsed())
{
	is_target_in_los = 0;
	if (is_living_boss)
	{
		StartForcingPlayerOutlines(EventPlayer(), AllPlayers(Team.All), true, Color.Violet, OutlineType.Always);
	}
	else
	{
		StartForcingPlayerOutlines(EventPlayer(), AllPlayers(Team.All), true, Color.Violet, OutlineType.Default);
	}
	WaitUntil(fear_end_t < TotalTimeElapsed(), 99999);
	if (is_living_boss)
	{
		StartForcingPlayerOutlines(EventPlayer(), AllPlayers(Team.All), true, Color.Yellow, OutlineType.Always);
	}
	else
	{
		StopForcingPlayerOutlines(EventPlayer(), AllPlayers(Team.All));
	}
}

rule: "MUT Team 2 (Gamechanging Mutator): Gamechanging Mutator was enabled"
Event.OngoingPlayer
Team.Team2
if (is_gmut_enabled == true)
{
	Wait(0.5, WaitBehavior.IgnoreCondition);
	if (gmut_storm_raging)
	{
		CreateEffect(gmut_var ? AllPlayers(Team.All) : [], Effect.AnaNanoBoostedEffect, Color.Team2, EventPlayer(), 1, EffectRev.VisibleTo);
	}
	if (gmut_adaptive_shield)
	{
		CreateEffect(gmut_var == 1 ? AllPlayers(Team.All) : [], Effect.WreckingBallAdaptiveShieldTargetEffect, Color.Team2, EventPlayer(), 1, EffectRev.VisibleTo);
	}
	if (gmut_fortified)
	{
		AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, 0.4 * health_percent, true, true);
	}
	is_gmut_enabled = false;
}

rule: "MUT Team 2 (Gamechanging Mutator): Adaptive Shield"
Event.OngoingPlayer
Team.Team2
if (gmut_adaptive_shield == true)
if (IsAlive(EventPlayer()) == true)
if (gmut_var == false)
if (NormalizedHealth(EventPlayer()) <= 0.5)
{
	AbortIf(iv_is_portal);
	if (SlotOf(EventPlayer()) == 1)
	{
		# Set Player Health converts the shield into regular HP, so wait until after
		Wait(0.016, WaitBehavior.AbortWhenFalse);
		AbortIfConditionIsFalse();
	}
	temp_1 = CountOf(FilteredArray(combatants, DistanceBetween(EventPlayer(), ArrayElement()) <= 8 && IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.EnemyBarriersBlock)));
	if (temp_1)
	{
		PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.Blue, EventPlayer(), 1);
		AddHealthPoolToPlayer(EventPlayer(), HealthType.Shields, 0.75 * temp_1 / combatants_count * MaxHealth(EventPlayer()), false, false);
		HP_Pool[3] = LastCreatedHealthPool();
		gmut_var = 1;
		WaitUntil(!HealthOfType(EventPlayer(), HealthType.Shields), 7);
		RemoveHealthPoolFromPlayer(HP_Pool[3]);
		gmut_var = 2;
	}
	else
	{
		gmut_var = 2;
	}
}

rule: "MUT Team 2 (Gamechanging Mutator): Sympathy Gains"
Event.OnDeath
Team.Team2
if (gmut_sympathy_gains == true)
if (iv_is_portal == false)
{
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.Black, EventPlayer(), 1);
	Wait(0.15, WaitBehavior.AbortWhenFalse);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.White, PositionOf(EventPlayer()), 1);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Yellow, PositionOf(EventPlayer()), real_tier * 8 + 6);
	Heal(PlayersWithinRadius(EventPlayer(), real_tier * 4 + 3, Team.Team2, RadiusLOS.Off), null, Min(MaxHealth(EventPlayer()) * 0.3, 500));
}

rule: "MUT Team 2 (Gamechanging Mutator): Fortified"
Event.OngoingPlayer
Team.Team2
if (is_fortified == true)
if (HasStatus(EventPlayer(), Status.Stunned) == true)
if (gmut_fortified_bypass_end_t < TotalTimeElapsed())
{
	if (HasStatus(EventPlayer(), Status.KnockedDown))
	{
		ClearStatus(EventPlayer(), Status.KnockedDown);
		Wait(1, WaitBehavior.IgnoreCondition);
	}
	else if (HasStatus(EventPlayer(), Status.Asleep))
	{
		WaitUntil(!HasStatus(EventPlayer(), Status.Asleep), 3);
		if (HasStatus(EventPlayer(), Status.Asleep))
		{
			ClearStatus(EventPlayer(), Status.Asleep);
			Wait(0.5, WaitBehavior.IgnoreCondition);
		}
	}
	else if (HasStatus(EventPlayer(), Status.Frozen))
	{
		WaitUntil(!HasStatus(EventPlayer(), Status.Frozen), 1);
		ClearStatus(EventPlayer(), Status.Frozen);
	}
	else
	{
		WaitUntil(!HasStatus(EventPlayer(), Status.Stunned), 0.5);
		ClearStatus(EventPlayer(), Status.Stunned);
	}
	Wait(0.25, WaitBehavior.AbortWhenFalse);
	LoopIfConditionIsTrue();
}

rule: "MUT Team 2 (Gamechanging Mutator): Salvation"
Event.OngoingPlayer
Team.Team2
if (gmut_salvation == true)
if (IsAlive(EventPlayer()) == true)
if (is_living_boss == false)
{
	SetStatus(EventPlayer(), null, Status.Unkillable, 9999);
	WaitUntil(Health(EventPlayer()) <= 1, 99999);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.Purple, PositionOf(EventPlayer()), 1);
	SetStatus(EventPlayer(), null, Status.Stunned, 1.333);
	SetStatus(EventPlayer(), null, Status.Invincible, 0.1);
	Heal(EventPlayer(), null, MaxHealth(EventPlayer()) * 0.05);
	ClearStatus(EventPlayer(), Status.Unkillable);
}

rule: "Team 2 (Ability): Heavy Impact / Damage Stagger"
Event.OnDamageTaken
Team.Team2
{
	AbortIf(!(can_stagger || Attacker().ab_heavy_impact));
	# the lower the minimum, the higher the chance
	AbortIf(RandomReal(0.003, 0.75) > EventDamage() / MaxHealth(EventPlayer()));
	gmut_fortified_bypass_end_t = Max(TotalTimeElapsed() + 0.5 * Max(0.8, Attacker().ab_heavy_impact), gmut_fortified_bypass_end_t);
	SetStatus(EventPlayer(), Attacker(), Status.Stunned, (is_fortified ? 0.5 : 1) * Max(0.8, Attacker().ab_heavy_impact));
	Wait(5.5, WaitBehavior.IgnoreCondition);
}

rule: "Team 2 Brigitte: Hold / Drop Shield if Target and Distance to Target >= 6m"
Event.OngoingPlayer
Team.Team2
Player.Brigitte
if (is_target_in_los == true)
if (DistanceBetween(EventPlayer(), target) >= 6)
{
	StartHoldingButton(EventPlayer(), Button.SecondaryFire);
	WaitUntil(!(is_target_in_los && DistanceBetween(EventPlayer(), target) >= 6), 99999);
	StopHoldingButton(EventPlayer(), Button.SecondaryFire);
}

rule: "Team 2 Brigitte: Start / Stop Attacking if Distance to Target < 6m"
Event.OngoingPlayer
Team.Team2
Player.Brigitte
if (is_target_in_los == true)
if (DistanceBetween(EventPlayer(), target) < 6)
{
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	WaitUntil(!(is_target_in_los && DistanceBetween(EventPlayer(), target) < 6), 99999);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
}

rule: "Team 2 Brigitte: Increase / Normalize Move Speed while holding Shield"
Event.OngoingPlayer
Team.Team2
Player.Brigitte
if (IsFiringSecondary(EventPlayer()) == true)
{
	SetMoveSpeed(EventPlayer(), mut_amped ? 164.286 : 142.857);
	WaitUntil(!IsFiringSecondary(EventPlayer()), 99999);
	SetMoveSpeed(EventPlayer(), mut_amped ? 115 : 100);
}

rule: "Team 2 Brigitte: Whip Shot"
Event.OngoingPlayer
Team.Team2
Player.Brigitte
if (is_target_in_los >= 4)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > (target.is_flying ? 100 : 50));
	LoopIf(DistanceBetween(EventPlayer(), target) <= 6 || DistanceBetween(EventPlayer(), target) >= 20);
	PressButton(EventPlayer(), Button.Ability1);
	Wait(3, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Zarya: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Zarya
if (is_target_in_los >= 4)
{
	Wait(AngleBetweenVectors(FacingDirectionOf(EventPlayer()), VectorTowards(EventPlayer(), target)) / 300, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	if (DistanceBetween(EventPlayer(), target) > 10)
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
		Wait(1.5, WaitBehavior.IgnoreCondition);
	}
	else
	{
		StartHoldingButton(EventPlayer(), Button.PrimaryFire);
		Wait(3, WaitBehavior.IgnoreCondition);
		StopHoldingButton(EventPlayer(), Button.PrimaryFire);
		PressButton(EventPlayer(), Button.SecondaryFire);
		Wait(0.5, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2 Zarya: Self Bubble"
Event.OngoingPlayer
Team.Team2
Player.Zarya
if (is_target_in_los >= 4)
{
	Wait(10, WaitBehavior.IgnoreCondition);
	PressButton(EventPlayer(), Button.Ability1);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Zarya: Team Bubble"
Event.OngoingPlayer
Team.Team2
Player.Zarya
if (is_target_in_los >= 4)
if (AbilityCooldown(EventPlayer(), Button.Ability2) <= 0)
{
	PressButton(EventPlayer(), Button.Ability2);
	Wait(10, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Zarya: Grav"
Event.OngoingPlayer
Team.Team2
Player.Zarya
if (is_target_in_los >= 5)
if (IsUsingAbility1(EventPlayer()) == false)
if ((wave_number >= 12 || is_living_boss) == true)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	SetProjectileSpeed(EventPlayer(), 30);
	SetProjectileGravity(EventPlayer(), 60);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(0.1, WaitBehavior.IgnoreCondition);
	SetProjectileSpeed(EventPlayer(), 100);
	SetProjectileGravity(EventPlayer(), 100);
	Wait(RandomReal(60, 80), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Lucio: Swap to heal and shoot"
Event.OngoingPlayer
Team.Team2
Player.Lucio
if (is_target_in_los >= 4)
{
	Wait(AngleBetweenVectors(FacingDirectionOf(EventPlayer()), VectorTowards(EventPlayer(), target)) / 300, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	PressButton(EventPlayer(), Button.Ability1);
	if (DistanceBetween(EventPlayer(), FirstOf(SortedArray(FilteredArray(AllLivingPlayers(Team.Team1), IsInViewAngle(EventPlayer(), ArrayElement(), 45)), ArrayElement()))) <= 4)
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
		Wait(0.7, WaitBehavior.IgnoreCondition);
	}
	else
	{
		StartHoldingButton(EventPlayer(), Button.PrimaryFire);
		Wait(2, WaitBehavior.IgnoreCondition);
	}
	PressButton(EventPlayer(), Button.Ability2);
	LoopIfConditionIsTrue();
	PressButton(EventPlayer(), Button.Ability1);
}

rule: "Team 2 Lucio: Ultimate"
Event.OngoingPlayer
Team.Team2
Player.Lucio
if (is_target_in_los >= 4)
if (IsUsingAbility1(EventPlayer()) == false)
if ((wave_number >= 12 || is_living_boss) == true)
{
	AbortIfConditionIsFalse();
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(RandomReal(40, 60), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Kiriko: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Kiriko
if (is_target_in_los >= 4)
{
	PressButton(EventPlayer(), Button.SecondaryFire);
	Wait(0.6, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Kiriko: Swift Step"
Event.OngoingPlayer
Team.Team2
Player.Kiriko
if ((is_alive && NormalizedHealth(EventPlayer()) <= 0.5) == is_aggressive)
{
	is_aggressive = !is_aggressive;
	ab_var_1 = 1;
	ChaseVariableOverTime(ab_var_1, 0, 3, TimeChaseReevaluation.DestinationAndDuration);
	Wait(3, WaitBehavior.IgnoreCondition);
	StopChasingVariable(ab_var_1);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.Turquoise, PositionOf(EventPlayer()), 1);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadPickupEffect, Color.White, PositionOf(EventPlayer()), 200);
	MinWait();
	SkipIf(HasStatus(EventPlayer(), Status.Stunned), 1);
	teleport_to_free_spawn();
	is_aggressive = true;
	WaitUntil(is_target_in_los, 15);
	Wait(RandomInteger(16, 22), WaitBehavior.IgnoreCondition);
}

rule: "Team 2 Kiriko: Jump"
Event.OngoingPlayer
Team.Team2
Player.Kiriko
if (is_using_combat_pathfinding == true)
if (target.is_flying == false)
if (IsOnGround(EventPlayer()) == true)
{
	StartHoldingButton(EventPlayer(), Button.Jump);
	Wait(1, WaitBehavior.IgnoreCondition);
	StopHoldingButton(EventPlayer(), Button.Jump);
	Wait(RandomReal(0.8, 1.2), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Kiriko: Suzu"
Event.OngoingPlayer
Team.Team2
Player.Kiriko
if (DistanceBetween(EventPlayer(), target) <= 40)
if (is_target_in_los >= 3)
{
	Wait(RandomInteger(7, 15), WaitBehavior.IgnoreCondition);
	PressButton(EventPlayer(), Button.Ability2);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Kiriko: Ult"
Event.OngoingPlayer
Team.Team2
Player.Kiriko
if (is_target_in_los >= 5)
if (DistanceBetween(EventPlayer(), target) <= 20)
if ((wave_number >= 6 || is_living_boss) == true)
{
	AbortIfConditionIsFalse();
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(RandomReal(18, 30), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Wrecking Ball: Explode"
Event.OngoingPlayer
Team.Team2
Player.WreckingBall
if (is_target_in_los >= 4)
if (DistanceBetween(EventPlayer(), target) <= 2.4)
{
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.White, EventPlayer(), 1);
	SetUltimateCharge(EventPlayer(), 100);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	StartDamageOverTime(EventPlayer(), null, 9999, MaxHealth(EventPlayer()) * 0.05);
	while (IsAlive(EventPlayer()))
	{
		SetUltimateCharge(EventPlayer(), 100);
		MinWait();
		PressButton(EventPlayer(), Button.Ultimate);
		Wait(0.25, WaitBehavior.IgnoreCondition);
		SetStatus(EventPlayer(), null, Status.Stunned, 0.1);
		Wait(5, WaitBehavior.IgnoreCondition);
	}
	Kill(EventPlayer(), null);
}

rule: "Team 2 Cassidy: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Cassidy
if (is_target_in_los >= 4)
if (IsUsingUltimate(EventPlayer()) == false)
{
	Wait(AngleBetweenVectors(FacingDirectionOf(EventPlayer()), VectorTowards(EventPlayer(), target)) / 300, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	if (mut_lock_n_load || DistanceBetween(EventPlayer(), target) > 5)
	{
		StartHoldingButton(EventPlayer(), Button.PrimaryFire);
		Wait(0.6, WaitBehavior.IgnoreCondition);
		StopHoldingButton(EventPlayer(), Button.PrimaryFire);
	}
	else
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
	}
	Wait(RandomReal(0.8, 1.2), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Cassidy: Combat Roll"
Event.OnDamageTaken
Team.Team2
Player.Cassidy
{
	AbortIf(is_load_limit_reached);
	AbortIf(!is_using_combat_pathfinding);
	AbortIf(RandomInteger(1, 100) > 30);
	temp_1 = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + 6 * WorldVectorOf(ThrottleOf(EventPlayer()) == Vector(false, false, false) ? Forward() : ThrottleOf(EventPlayer()), EventPlayer(), LocalVector.Rotation), null, null, false);
	if (DistanceBetween(temp_1, RayCastHitPosition(temp_1, temp_1 + 5 * Down(), null, null, false)) < 5)
	{
		PressButton(EventPlayer(), Button.Ability1);
		Wait(10, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Wait(2, WaitBehavior.IgnoreCondition);
	}
}

rule: "Team 2 Soldier: Shoot, Is Charging (1), Protecting Charge Target (2), Has Used Ability (3)"
Event.OngoingPlayer
Team.Team2
Player.Soldier76
if (ab_var_1 == false)
if (is_target_in_los >= 4)
{
	Wait(AngleBetweenVectors(FacingDirectionOf(EventPlayer()), VectorTowards(EventPlayer(), target)) / 300, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	if (real_tier == 3)
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
		if (mut_lock_n_load)
		{
			Wait(0.5, WaitBehavior.IgnoreCondition);
			PressButton(EventPlayer(), Button.SecondaryFire);
			Wait(1, WaitBehavior.IgnoreCondition);
		}
		else
		{
			if (IsFiringSecondary(EventPlayer()))
			{
				Wait(0.5, WaitBehavior.IgnoreCondition);
				PressButton(EventPlayer(), Button.SecondaryFire);
				SetAmmo(EventPlayer(), 0, false);
			}
			else
			{
				Wait(0.5, WaitBehavior.IgnoreCondition);
				PressButton(EventPlayer(), Button.SecondaryFire);
				if (IsFiringSecondary(EventPlayer()))
				{
					SetAmmo(EventPlayer(), 0, false);
				}
			}
			Wait(2, WaitBehavior.IgnoreCondition);
		}
	}
	else if (real_tier == 4)
	{
		StartHoldingButton(EventPlayer(), Button.PrimaryFire);
		Wait(1.6, WaitBehavior.IgnoreCondition);
		StopHoldingButton(EventPlayer(), Button.PrimaryFire);
		if (Ammo(EventPlayer(), false) <= 4)
		{
			PressButton(EventPlayer(), Button.Reload);
		}
		Wait(ab_var_2 ? 0.2 : RandomReal(1.2, 1.6), WaitBehavior.IgnoreCondition);
	}
	else
	{
		StartHoldingButton(EventPlayer(), Button.PrimaryFire);
		Wait(0.5, WaitBehavior.IgnoreCondition);
		StopHoldingButton(EventPlayer(), Button.PrimaryFire);
		if (Ammo(EventPlayer(), false) <= 2)
		{
			PressButton(EventPlayer(), Button.Reload);
		}
		Wait(real_tier == 1 ? RandomReal(1.2, 1.8) : RandomReal(0.5, 0.9), WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2 Soldier: Biotic Field (Heavy Trooper), Emit Smoke (Grenadier)"
Event.OngoingPlayer
Team.Team2
Player.Soldier76
if (ab_var_3 == false)
if (NormalizedHealth(EventPlayer()) <= 0.5)
{
	ab_var_3 = true;
	if (real_tier == 3)
	{
		for (p_i = 5; 0; -1)
		{
			PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.White, EventPlayer(), 0.1);
			if (IsDead(EventPlayer()))
			{
				p_i = 0;
				break;
			}
			Wait(0.2, WaitBehavior.IgnoreCondition);
		}
		PlayersWithinRadius(EyePosition(EventPlayer()), 7, Team.Team1, RadiusLOS.Surfaces).Smoked_Screen = true;
		PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.White, EventPlayer(), 7);
		PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Gray, EventPlayer(), 7);
		PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.White, EventPlayer(), 200);
	}
	else
	{
		PressButton(EventPlayer(), Button.Ability2);
	}
}

rule: "Team 1: Smoke Screen"
Event.OngoingPlayer
Team.Team1
if (Smoked_Screen == true)
if (downed_start_t == false)
{
	StartForcingPlayerOutlines(AllPlayers(Team.All), EventPlayer(), false, Color.White, OutlineType.Default);
	WaitUntil(IsDead(EventPlayer()), 4);
	StopForcingPlayerOutlines(AllPlayers(Team.All), EventPlayer());
	Smoked_Screen = false;
	StartForcingPlayerOutlines(FilteredArray(AllPlayers(Team.Team2), ArrayElement().is_living_boss), EventPlayer(), true, Color.Yellow, OutlineType.Always);
}

rule: "Team 2 Soldier (Cloaker): Tactical Visor"
Event.OngoingPlayer
Team.Team2
Player.Soldier76
if (real_tier == 4)
if (is_target_in_los >= 5)
if (target.is_flying == false)
if (DistanceBetween(EventPlayer(), target) <= 40)
{
	Wait(0.5, WaitBehavior.IgnoreCondition);
	if (CountOf(FilteredArray(combatants, ArrayElement().downed_start_t)) <= (combatants_count >= 4 ? 1 : 0) && RandomInteger(1, 100) > 50)
	{
		SetUltimateCharge(EventPlayer(), 100);
		PressButton(EventPlayer(), Button.Ultimate);
		if (IsUsingUltimate(EventPlayer()))
		{
			DisableMovementCollisionWithPlayers(EventPlayer());
			temp_1 = DistanceBetween(EventPlayer(), target) <= 10 ? 2 : 1.5;
			SetStatus(EventPlayer(), null, Status.Rooted, temp_1);
			is_ignoring_other_targets = true;
			ab_var_1 = 1;
			WaitUntil(target.downed_start_t || !target.is_combatant || target.active_ab_is_cloaked || !(target.is_invisible && DistanceBetween(EventPlayer(), target) > 2.4) || !ab_var_1 || !IsUsingUltimate(EventPlayer()) || HasStatus(EventPlayer(), Status.Stunned) || fear_end_t >= TotalTimeElapsed(), temp_1 + 0.05);
			ab_var_1 = 2;
			WaitUntil(target.downed_start_t || !target.is_combatant || target.active_ab_is_cloaked || !(target.is_invisible && DistanceBetween(EventPlayer(), target) > 2.4) || !ab_var_1 || !IsUsingUltimate(EventPlayer()) || HasStatus(EventPlayer(), Status.Stunned) || fear_end_t >= TotalTimeElapsed(), 99999);
			is_ignoring_other_targets = false;
			ab_var_1 = false;
			EnableMovementCollisionWithPlayers(EventPlayer());
			WaitUntil(!IsUsingUltimate(EventPlayer()), 99999);
			Wait(12, WaitBehavior.IgnoreCondition);
		}
	}
	else
	{
		Wait(4, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2 Soldier (Cloaker): Stuck while charging"
Event.OngoingPlayer
Team.Team2
Player.Soldier76
if (ab_var_1 == 2)
if ((real_speed <= 1.5 || target.is_flying) == true)
{
	Wait(2, WaitBehavior.AbortWhenFalse);
	ab_var_1 = false;
}

rule: "Team 2 Soldier (Cloaker): Sprint"
Event.OngoingPlayer
Team.Team2
Player.Soldier76
if (ab_var_1 == 2)
if (IsUsingAbility1(EventPlayer()) == false)
if (MagnitudeOf(ThrottleOf(EventPlayer())) > 0)
if (AbsoluteValue(HorizontalAngleFromDirection(ThrottleOf(EventPlayer()))) <= 60)
{
	PressButton(EventPlayer(), Button.Ability1);
	Wait(0.5, WaitBehavior.AbortWhenFalse);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Soldier (Cloaker): Quick Melee"
Event.OngoingPlayer
Team.Team2
Player.Soldier76
if (ab_var_1 == 2)
if (DistanceBetween(EventPlayer(), target) <= 3)
{
	nav_pos = PositionOf(target) + 2.5 * DirectionTowards(EventPlayer(), target);
	ab_var_1 = false;
	PressButton(EventPlayer(), Button.Melee);
}

rule: "Team 2 Soldier (Cloaker): Quick Melee, apply Stun"
Event.PlayerDealtKnockback
Team.Team2
Player.Soldier76
{
	AbortIf(EventAbility() != Button.Melee);
	AbortIf(real_tier != 4);
	AbortIf(target != Victim());
	if (Victim().perk_brass_knuckles && IsMeleeing(Victim()))
	{
		Wait(2, WaitBehavior.IgnoreCondition);
	}
	else if (HeroOf(Victim()) == Hero.Reinhardt && IsUsingAbility1(Victim()) && AbsoluteValue(HorizontalAngleTowards(Victim(), EventPlayer())) <= 60)
	{
		gmut_fortified_bypass_end_t = Max(TotalTimeElapsed() + 2, gmut_fortified_bypass_end_t);
		SetStatus(EventPlayer(), Victim(), Status.KnockedDown, 2);
		SetStatus(Victim(), EventPlayer(), Status.KnockedDown, 2);
		Wait(1, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Damage(Victim(), EventPlayer(), 150);
		# Stun Sound
		SetStatus(Victim(), EventPlayer(), Status.Stunned, 3.5);
		Wait(0.05, WaitBehavior.IgnoreCondition);
		SetStatus(Victim(), EventPlayer(), Status.KnockedDown, 3.5);
		ab_var_2 = true;
		StartHoldingButton(EventPlayer(), Button.Crouch);
		Wait(1, WaitBehavior.IgnoreCondition);
		WaitUntil(!(is_target_in_los && target == Victim() && HasStatus(Victim(), Status.KnockedDown)), 2);
		ab_var_2 = false;
		StopHoldingButton(EventPlayer(), Button.Crouch);
	}
}

rule: "Team 2 Baptiste: Shoot, Has Used Immortality Field (1), Revive last time used (2)"
Event.OngoingPlayer
Team.Team2
Player.Baptiste
if (is_target_in_los >= 4)
{
	Wait(AngleBetweenVectors(FacingDirectionOf(EventPlayer()), VectorTowards(EventPlayer(), target)) / 300, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	PressButton(EventPlayer(), Button.PrimaryFire);
	Wait(RandomReal(0.7, 1.1), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Baptiste: Immortality Field"
Event.OngoingPlayer
Team.Team2
Player.Baptiste
if (is_target_in_los == true)
if (ab_var_1 == false)
if (NormalizedHealth(EventPlayer()) <= 0.25)
if ((wave_number >= 10 || is_living_boss) == true)
if (HasStatus(EventPlayer(), Status.Hacked) == false)
if (HasStatus(EventPlayer(), Status.Stunned) == false)
{
	ab_var_1 = true;
	AbortIf(!is_living_boss && RandomInteger(1, 100) > 40);
	PressButton(EventPlayer(), Button.Ability2);
}

rule: "Team 2 Echo: Shoot, Is Landing (1)"
Event.OngoingPlayer
Team.Team2
Player.Echo
if (is_target_in_los >= 4)
{
	Wait(AngleBetweenVectors(FacingDirectionOf(EventPlayer()), VectorTowards(EventPlayer(), target)) / 300, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	Wait(1.1, WaitBehavior.IgnoreCondition);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
	Wait(RandomReal(0.4, 0.6), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Echo: Sticky Bombs"
Event.OngoingPlayer
Team.Team2
Player.Echo
if (is_target_in_los >= 4)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 50);
	LoopIf(DistanceBetween(EventPlayer(), target) >= 20);
	PressButton(EventPlayer(), Button.SecondaryFire);
	Wait(6, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Echo: Flight"
Event.OngoingPlayer
Team.Team2
Player.Echo
if (is_target_in_los >= 5)
if (is_aggressive == true)
if (DistanceBetween(EventPlayer(), target) <= 40)
{
	is_using_combat_pathfinding = 3;
	is_nav_reachable_node = false;
	PressButton(EventPlayer(), Button.Jump);
	PressButton(EventPlayer(), Button.Ability1);
	if (IsUsingAbility1(EventPlayer()))
	{
		is_flying = true;
		WaitUntil(!IsUsingAbility1(EventPlayer()), 99999);
		if (is_living_boss)
		{
			# Without a wait the second flight is silent
			MinWait();
			PressButton(EventPlayer(), Button.Jump);
			PressButton(EventPlayer(), Button.Ability1);
			WaitUntil(!IsUsingAbility1(EventPlayer()), 99999);
		}
		nav_pos = FirstOf(SortedArray(FilteredArray(nodes, IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock)), 2 * DistanceBetween(EventPlayer(), ArrayElement()) - VerticalAngleTowards(EventPlayer(), ArrayElement())));
		if (nav_pos == false)
		{
			nav_pos = FirstOf(SortedArray(nodes, DistanceBetween(EventPlayer(), ArrayElement())));
		}
		is_flying = false;
		ab_var_1 = true;
		is_pathfinding_disabled = true;
		WaitUntil(IsOnGround(EventPlayer()) || !is_alive, 99999);
		ab_var_1 = false;
		is_pathfinding_disabled = false;
		Wait(4, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Wait(2, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2 Echo: Ascend / Descend"
Event.OngoingPlayer
Team.Team2
Player.Echo
if (is_flying == true)
if (AbsoluteValue(YOf(PositionOf(EventPlayer())) - YOf(nav_pos)) >= 1)
{
	if (YOf(PositionOf(EventPlayer())) < YOf(nav_pos))
	{
		StartHoldingButton(EventPlayer(), Button.Jump);
		WaitUntil(!(is_flying && YOf(nav_pos) - YOf(PositionOf(EventPlayer())) >= 1), 99999);
		StopHoldingButton(EventPlayer(), Button.Jump);
	}
	else
	{
		StartHoldingButton(EventPlayer(), Button.Crouch);
		WaitUntil(!(is_flying && YOf(PositionOf(EventPlayer())) - YOf(nav_pos) >= 1), 99999);
		StopHoldingButton(EventPlayer(), Button.Crouch);
	}
}

rule: "Team 2 Echo: Glide"
Event.OngoingPlayer
Team.Team2
Player.Echo
if (ab_var_1 == true)
{
	Wait(0.25, WaitBehavior.AbortWhenFalse);
	StartHoldingButton(EventPlayer(), Button.Jump);
	WaitUntil(!ab_var_1, 2.5);
	StopHoldingButton(EventPlayer(), Button.Jump);
}

rule: "Team 2 Mei: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Mei
if (is_target_in_los >= 4)
if (IsUsingAbility1(EventPlayer()) == false)
{
	Wait(AngleBetweenVectors(FacingDirectionOf(EventPlayer()), VectorTowards(EventPlayer(), target)) / 300, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	if (DistanceBetween(EventPlayer(), target) > 8)
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
		Wait(1.5, WaitBehavior.IgnoreCondition);
	}
	else
	{
		StartHoldingButton(EventPlayer(), Button.PrimaryFire);
		Wait(2.468, WaitBehavior.IgnoreCondition);
		StopHoldingButton(EventPlayer(), Button.PrimaryFire);
		PressButton(EventPlayer(), Button.SecondaryFire);
		Wait(0.5, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2 Mei: Ice Block + Wall"
Event.OngoingPlayer
Team.Team2
Player.Mei
if (NormalizedHealth(EventPlayer()) <= 0.499)
if (IsUsingAbility1(EventPlayer()) == false)
{
	PressButton(EventPlayer(), RandomInteger(1, 4) <= 3 ? Button.Ability2 : Button.Ability1);
	if (IsUsingAbility2(EventPlayer()))
	{
		Wait(0.05, WaitBehavior.IgnoreCondition);
		PressButton(EventPlayer(), Button.PrimaryFire);
	}
	Wait(0.5, WaitBehavior.IgnoreCondition);
	if (IsUsingAbility1(EventPlayer()))
	{
		Heal(EventPlayer(), null, MaxHealth(EventPlayer()) * 0.25);
	}
	Wait(7, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Mei: Ult"
Event.OngoingPlayer
Team.Team2
Player.Mei
if (is_target_in_los >= 5)
if (DistanceBetween(EventPlayer(), target) <= 25)
if (IsUsingAbility1(EventPlayer()) == false)
if ((wave_number >= 12 || is_living_boss) == true)
{
	AbortIfConditionIsFalse();
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(RandomReal(18, 40), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sombra: Shoot, Tase Target (Player), Just used Translocater (1), Took Damage (2), Tase / EMP Start Health (3)"
Event.OngoingPlayer
Team.Team2
Player.Sombra
if (is_target_in_los >= 4)
if (ab_player == null)
{
	Wait(AngleBetweenVectors(FacingDirectionOf(EventPlayer()), VectorTowards(EventPlayer(), target)) / 300, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	Wait(0.7, WaitBehavior.IgnoreCondition);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
	if (Ammo(EventPlayer(), false) <= 7)
	{
		PressButton(EventPlayer(), Button.Reload);
	}
	Wait(RandomReal(0.8, 1.2), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sombra: Translocator"
Event.OngoingPlayer
Team.Team2
Player.Sombra
if (is_target_in_los >= 5)
if (is_aggressive == true)
if (target.is_flying == false)
if (DistanceBetween(EventPlayer(), target) >= 7.5)
if (DistanceBetween(EventPlayer(), target) <= 25)
if (YOf(PositionOf(target)) - YOf(PositionOf(EventPlayer())) >= 3)
if (IsInViewAngle(EventPlayer(), target, 5) == true)
{
	if (IsUsingAbility2(EventPlayer()))
	{
		PressButton(EventPlayer(), Button.Interact);
		Wait(0.05, WaitBehavior.IgnoreCondition);
	}
	PressButton(EventPlayer(), Button.Ability2);
	Wait(0.2 + DistanceBetween(EventPlayer(), target) / 25, WaitBehavior.IgnoreCondition);
	AbortIf(!IsUsingAbility2(EventPlayer()));
	PressButton(EventPlayer(), Button.Ability2);
	Wait(0.1, WaitBehavior.IgnoreCondition);
	AbortIf(!HasStatus(EventPlayer(), Status.PhasedOut));
	ab_var_1 = true;
	is_nav_reachable_node = false;
	Wait(2, WaitBehavior.IgnoreCondition);
	ab_var_1 = false;
	Wait(8, WaitBehavior.IgnoreCondition);
}

rule: "Team 2 Sombra: EMP"
Event.OngoingPlayer
Team.Team2
Player.Sombra
if (is_target_in_los >= 5)
if ((wave_number >= 13 || is_living_boss) == true)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > (ab_var_1 ? 60 : 30));
	LoopIf(HasStatus(EventPlayer(), Status.Hacked) || HasStatus(EventPlayer(), Status.Stunned));
	LoopIf(DistanceBetween(EventPlayer(), target) >= 12);
	LoopIf(!IsInLineOfSight(EyePosition(EventPlayer()), EyePosition(target), BarrierLOS.NoBarriersBlock));
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.Purple, EventPlayer(), 1);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	ab_var_2 = false;
	ab_var_3 = Health(EventPlayer());
	WaitUntil(UltimateChargePercent(EventPlayer()) != 100 && (ab_var_2 || Health(EventPlayer()) < ab_var_3), 0.3);
	if (UltimateChargePercent(EventPlayer()) != 100 && (ab_var_2 || Health(EventPlayer()) < ab_var_3))
	{
		gmut_fortified_bypass_end_t = Max(TotalTimeElapsed() + 0.5, gmut_fortified_bypass_end_t);
		SetStatus(EventPlayer(), null, Status.Stunned, 0.5);
		Wait(8, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Wait(14, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sombra: Tase"
Event.OngoingPlayer
Team.Team2
Player.Sombra
if (is_target_in_los == true)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > (target.is_flying ? 80 : 40));
	LoopIf(HasStatus(EventPlayer(), Status.Hacked) || HasStatus(EventPlayer(), Status.Stunned));
	LoopIf(IsDead(EventPlayer()));
	LoopIf(target.tased_end_t >= TotalTimeElapsed());
	LoopIf(HasStatus(target, Status.Invincible) || HasStatus(target, Status.PhasedOut) || IsUsingUltimate(target));
	LoopIf(DistanceBetween(EventPlayer(), target) >= 12);
	LoopIf(!IsInLineOfSight(EyePosition(EventPlayer()), EyePosition(target), BarrierLOS.AllBarriersBlock));
	ab_player = target;
	ab_var_2 = false;
	ab_var_3 = Health(EventPlayer());
	ab_player.tased_end_t = TotalTimeElapsed() + 6;
	SetStatus(EventPlayer(), null, Status.Rooted, 6);
	if (!ab_player.perk_shockproof)
	{
		SmallMessage(ab_player, "A Taser is stunning you! Shoot her to break free!");
	}
	Wait(10, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sombra: Tase times out / Lost Health / Target is downed / Target left / Is CCd / Distance too High / LOS lost"
Event.OngoingPlayer
Team.Team2
Player.Sombra
if (ab_player != null)
if ((ab_player.tased_end_t < TotalTimeElapsed() || ab_var_2 || Health(EventPlayer()) < ab_var_3 || ab_player.downed_start_t || !ab_player.is_combatant || HasStatus(EventPlayer(), Status.Hacked) || HasStatus(EventPlayer(), Status.Stunned) || DistanceBetween(EventPlayer(), ab_player) >= 11 || !IsInLineOfSight(EyePosition(EventPlayer()), EyePosition(ab_player), BarrierLOS.AllBarriersBlock)) == true)
{
	if (ab_player.perk_shockproof)
	{
		Damage(EventPlayer(), ab_player, 50);
		SetStatus(FilteredArray(PlayersWithinRadius(EyePosition(EventPlayer()), 10, Team.Team2, RadiusLOS.Surfaces), !HasStatus(ArrayElement(), Status.PhasedOut)), null, Status.Hacked, 2);
		PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Purple, EventPlayer(), 10);
		PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.White, EventPlayer(), 200);
	}
	ab_player.tased_end_t = false;
	ab_player = null;
	AbortIf(HasStatus(EventPlayer(), Status.Hacked));
	ClearStatus(EventPlayer(), Status.Rooted);
}

rule: "Team 2 Sombra: Took Damage"
Event.OnDamageTaken
Team.Team2
Player.Sombra
{
	ab_var_2 = true;
}

rule: "Team 1: Is Tased, Disable Abilities, Movement, Shake Facing, Set Aimspeed, Shoot"
Event.OngoingPlayer
Team.Team1
if (tased_end_t >= TotalTimeElapsed())
{
	AbortIf(perk_shockproof);
	SetStatus(EventPlayer(), null, Status.Burning, 10);
	SetStatus(EventPlayer(), null, Status.Hacked, 10);
	SetStatus(EventPlayer(), null, Status.Rooted, 10);
	StartFacing(EventPlayer(), DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()) + RandomInteger(-100, 20), VerticalFacingAngleOf(EventPlayer()) + RandomInteger(-100, 80)), 100, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
	PressButton(EventPlayer(), HeroOf(EventPlayer()) == Hero.Moira ? Button.SecondaryFire : Button.PrimaryFire);
	Wait(0.3, WaitBehavior.IgnoreCondition);
	StopFacing(EventPlayer());
	while (tased_end_t >= TotalTimeElapsed())
	{
		SetAimSpeed(EventPlayer(), 50);
		PressButton(EventPlayer(), HeroOf(EventPlayer()) == Hero.Moira ? Button.SecondaryFire : Button.PrimaryFire);
		WaitUntil(tased_end_t < TotalTimeElapsed(), RandomReal(0.1, 0.3));
		SetAimSpeed(EventPlayer(), 200);
		PressButton(EventPlayer(), HeroOf(EventPlayer()) == Hero.Moira ? Button.SecondaryFire : Button.PrimaryFire);
		WaitUntil(tased_end_t < TotalTimeElapsed(), RandomReal(0.1, 0.3));
	}
	SetAimSpeed(EventPlayer(), 100);
	ClearStatus(EventPlayer(), Status.Burning);
	ClearStatus(EventPlayer(), Status.Hacked);
	ClearStatus(EventPlayer(), Status.Rooted);
}

rule: "Team 2 Widowmaker: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Widowmaker
if (is_target_in_los >= 4)
{
	if (DistanceBetween(EventPlayer(), target) < 8 || !is_living_boss && HasStatus(EventPlayer(), Status.Hacked))
	{
		Wait(AngleBetweenVectors(FacingDirectionOf(EventPlayer()), VectorTowards(EventPlayer(), target)) / 300, WaitBehavior.IgnoreCondition);
		AbortIfConditionIsFalse();
		StartHoldingButton(EventPlayer(), Button.PrimaryFire);
		Wait(0.25, WaitBehavior.IgnoreCondition);
		StopHoldingButton(EventPlayer(), Button.PrimaryFire);
		if (Ammo(EventPlayer(), false) <= 1)
		{
			PressButton(EventPlayer(), Button.Reload);
		}
	}
	else
	{
		StartHoldingButton(EventPlayer(), Button.SecondaryFire);
		is_ignoring_other_targets = true;
		WaitUntil(!(IsFiringSecondary(EventPlayer()) && is_target_in_los), 1.3);
		is_ignoring_other_targets = false;
		if (IsFiringSecondary(EventPlayer()) && is_target_in_los >= 4)
		{
			PressButton(EventPlayer(), Button.PrimaryFire);
			MinWait();
		}
		StopHoldingButton(EventPlayer(), Button.SecondaryFire);
	}
	Wait(1, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Widowmaker: Grappling Hook"
Event.OngoingPlayer
Team.Team2
Player.Widowmaker
if (is_using_combat_pathfinding == true)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > (real_speed <= 1 ? 100 : 25));
	LoopIf(IsFiringSecondary(EventPlayer()));
	LoopIf(DistanceBetween(EventPlayer(), target) >= 8);
	PressButton(EventPlayer(), Button.Ability1);
	if (IsUsingAbility1(EventPlayer()))
	{
		facing_override_direction = DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()) + (RandomInteger(0, 1) ? -45 : 45), -5);
		Wait(0.16, WaitBehavior.IgnoreCondition);
		facing_override_direction = false;
		WaitUntil(!IsUsingAbility1(EventPlayer()), 99999);
		nav_pos = PositionOf(EventPlayer());
		Wait(8, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

disabled rule: "Team 2 Widowmaker: Infra-Sight"
Event.OngoingPlayer
Team.Team2
Player.Widowmaker
if (is_target_in_los == true)
if (is_infrasight_on == false)
if ((wave_number >= 1 || is_living_boss) == true)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 20);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(38, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Widowmaker: Infra-Sight if Sombra is stealthed"
Event.OngoingPlayer
Team.Team2
Player.Widowmaker
if (target == 0)
if (is_infrasight_on == false)
if (IsTrueForAny(combatants, ArrayElement().is_invisible == 1) == true)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 40);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
}

rule: "Global: Set / Unset Is Infrasight on (Bots)"
if (is_infrasight_on != IsTrueForAny(PlayersOnHero(Hero.Widowmaker, Team.Team2), IsUsingUltimate(ArrayElement())))
{
	is_infrasight_on = !is_infrasight_on;
	aim_offset = (is_infrasight_on ? 0 : 0.5) * Down();
	MinWait();
	LoopIfConditionIsTrue();
}

rule: "Team 2 Pharah: Flight"
Event.OngoingPlayer
Team.Team2
Player.Pharah
if (is_target_in_los >= 4)
{
	PressButton(EventPlayer(), Button.Ability1);
	StartHoldingButton(EventPlayer(), Button.Jump);
	Wait(RandomReal(0.777, 1.111), WaitBehavior.AbortWhenFalse);
	StopHoldingButton(EventPlayer(), Button.Jump);
	Wait(RandomReal(0.222, 0.555), WaitBehavior.AbortWhenFalse);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Pharah: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Pharah
if (is_target_in_los >= 4)
{
	Wait(AngleBetweenVectors(FacingDirectionOf(EventPlayer()), VectorTowards(EventPlayer(), target)) / 300, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	PressButton(EventPlayer(), Button.PrimaryFire);
	Wait(RandomReal(0.6, 1.3), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Reaper: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Reaper
if (is_target_in_los >= 4)
if (IsUsingAbility1(EventPlayer()) == false)
{
	Wait(AngleBetweenVectors(FacingDirectionOf(EventPlayer()), VectorTowards(EventPlayer(), target)) / 300, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	PressButton(EventPlayer(), Button.PrimaryFire);
	Wait(0.6, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Reaper: Wraith Form, Force Position"
Event.OngoingPlayer
Team.Team2
Player.Reaper
if (is_alive == true)
if (is_aggressive == true)
if (fear_end_t < TotalTimeElapsed())
if (HasStatus(EventPlayer(), Status.Hacked) == false)
if (HasStatus(EventPlayer(), Status.Rooted) == false)
if (HasStatus(EventPlayer(), Status.Stunned) == false)
if (DistanceBetween(EventPlayer(), target) >= 10)
if (DistanceBetween(EventPlayer(), target) <= 40)
{
	PressButton(EventPlayer(), Button.Ability1);
	if (IsUsingAbility1(EventPlayer()))
	{
		ab_wraith_pos = PositionOf(EventPlayer());
		ChaseVariableAtRate(ab_wraith_pos, PositionOf(target) + 0.5 * Up(), 15, RateChaseReevaluation.DestinationAndRate);
		StartForcingPlayerPosition(EventPlayer(), ab_wraith_pos, true);
		DisableMovementCollisionWithEnvironment(EventPlayer(), true);
		is_wraith = true;
		is_pathfinding_disabled = true;
		is_target_in_los = 5;
		Wait(8, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Wait(1, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2 Reaper: Cancel Wraith Form, Stop Forcing Position"
Event.OngoingPlayer
Team.Team2
Player.Reaper
if (is_wraith == true)
if (IsUsingAbility1(EventPlayer()) == true)
if (DistanceBetween(EventPlayer(), target) <= 3)
if (IsInLineOfSight(target, PositionOf(EventPlayer()), BarrierLOS.NoBarriersBlock) == true)
{
	if (DistanceBetween(EventPlayer(), RayCastHitPosition(EventPlayer(), EventPlayer().Position() + 5 * Down(), null, null, false)) >= 5)
	{
		Wait(0.15, WaitBehavior.IgnoreCondition);
		AbortIf(!is_wraith);
	}
	PressButton(EventPlayer(), Button.Ability1);
	StopChasingVariable(ab_wraith_pos);
	StopForcingPlayerPosition(EventPlayer());
	EnableMovementCollisionWithEnvironment(EventPlayer());
	is_wraith = false;
	is_pathfinding_disabled = false;
	nav_pos = PositionOf(target);
	is_nav_reachable_node = false;
}

rule: "Team 2 Reaper: Wraith Form Timed out / Target left / Target is invisible, Stop Forcing Position"
Event.OngoingPlayer
Team.Team2
Player.Reaper
if (is_wraith == true)
if ((!IsUsingAbility1(EventPlayer()) || !target.is_combatant || target.active_ab_is_cloaked) == true)
{
	StopChasingVariable(ab_wraith_pos);
	StopForcingPlayerPosition(EventPlayer());
	EnableMovementCollisionWithEnvironment(EventPlayer());
	is_wraith = false;
	is_pathfinding_disabled = false;
	is_nav_reachable_node = false;
}

rule: "Team 2 Reaper: Death Blossom"
Event.OngoingPlayer
Team.Team2
Player.Reaper
if (is_target_in_los >= 5)
if (IsUsingAbility1(EventPlayer()) == false)
if ((wave_number >= 12 || is_living_boss) == true)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 20);
	LoopIf(DistanceBetween(EventPlayer(), target) >= 7);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(28, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Ana: Shoot, Has Used Nano Boost (1)"
Event.OngoingPlayer
Team.Team2
Player.Ana
if (is_target_in_los >= 4)
{
	if (DistanceBetween(EventPlayer(), target) < 8 || !is_living_boss && HasStatus(EventPlayer(), Status.Hacked))
	{
		StopHoldingButton(EventPlayer(), Button.SecondaryFire);
		Wait(AngleBetweenVectors(FacingDirectionOf(EventPlayer()), VectorTowards(EventPlayer(), target)) / 300, WaitBehavior.IgnoreCondition);
		AbortIfConditionIsFalse();
	}
	else
	{
		if (!IsFiringSecondary(EventPlayer()))
		{
			StartHoldingButton(EventPlayer(), Button.SecondaryFire);
			Wait(0.5, WaitBehavior.IgnoreCondition);
		}
	}
	PressButton(EventPlayer(), Button.PrimaryFire);
	Wait(1, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
	StopHoldingButton(EventPlayer(), Button.SecondaryFire);
}

rule: "Team 2 Ana: Biotic Grenade"
Event.OngoingPlayer
Team.Team2
Player.Ana
if (is_target_in_los >= 4)
{
	Wait(1.75, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 40);
	LoopIf(DistanceBetween(EventPlayer(), target) >= 15);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(9, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Ana: Nano Boost"
Event.OngoingPlayer
Team.Team2
Player.Ana
if (is_target_in_los == true)
if (ab_var_1 == false)
if (NormalizedHealth(EventPlayer()) <= 0.75)
if ((wave_number >= 13 || is_living_boss) == true)
if (HasStatus(EventPlayer(), Status.Hacked) == false)
if (HasStatus(EventPlayer(), Status.Stunned) == false)
{
	ab_var_1 = true;
	AbortIf(!is_living_boss && RandomInteger(1, 100) > 50);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
}

rule: "Team 2 D.Va: Start / Stop Shooting, Has Used Self-Destruct (1), Can remech (2)"
Event.OngoingPlayer
Team.Team2
Player.Dva
if (is_target_in_los >= 3)
if ((DistanceBetween(EventPlayer(), target) <= 10 || IsUsingAbility1(EventPlayer()) || IsStanding(EventPlayer()) || IsInAlternateForm(EventPlayer())) == true)
{
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	WaitUntil(!(is_target_in_los >= 3 && (DistanceBetween(EventPlayer(), target) <= 15 || IsUsingAbility1(EventPlayer()) || IsStanding(EventPlayer()) || IsInAlternateForm(EventPlayer()))), RandomInteger(4, 8));
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
	StartHoldingButton(EventPlayer(), Button.SecondaryFire);
	WaitUntil(AbilityResource(EventPlayer(), Button.SecondaryFire) <= 30, 2);
	StopHoldingButton(EventPlayer(), Button.SecondaryFire);
	LoopIfConditionIsTrue();
}

rule: "Team 2 D.Va: Boosters"
Event.OngoingPlayer
Team.Team2
Player.Dva
if (is_target_in_los >= 5)
if (is_aggressive == true)
if (IsInAlternateForm(EventPlayer()) == false)
if (DistanceBetween(EventPlayer(), target) >= 7.5)
if (DistanceBetween(EventPlayer(), target) <= 25)
if (IsInViewAngle(EventPlayer(), target, 5) == true)
{
	PressButton(EventPlayer(), Button.Ability1);
	is_pathfinding_disabled = true;
	WaitUntil(!IsUsingAbility1(EventPlayer()) || DistanceBetween(EventPlayer(), target) < 1, 3);
	PressButton(EventPlayer(), Button.Ability1);
	is_pathfinding_disabled = false;
	is_nav_reachable_node = false;
	Wait(5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 D.Va: Self-Destruct"
Event.OngoingPlayer
Team.Team2
Player.Dva
if (is_target_in_los >= 5)
if (ab_var_1 == false)
if (wave_number >= 15)
if (IsInAlternateForm(EventPlayer()) == false)
if (NormalizedHealth(EventPlayer()) <= 0.8)
if (Health(EventPlayer()) > 1)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 30);
	LoopIf(DistanceBetween(EventPlayer(), target) >= 15);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	if (IsUsingUltimate(EventPlayer()))
	{
		ab_var_1 = true;
		Wait(3.5, WaitBehavior.IgnoreCondition);
		ab_var_2 = true;
	}
	else
	{
		Loop();
	}
}

rule: "Team 2 D.Va: Boss Self-Destruct"
Event.OngoingPlayer
Team.Team2
Player.Dva
if (is_living_boss == true)
if (ab_var_1 == false)
if (IsInAlternateForm(EventPlayer()) == false)
if (Health(EventPlayer()) < 1)
{
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	AbortIf(!IsUsingUltimate(EventPlayer()));
	ab_var_1 = true;
	Wait(3.5, WaitBehavior.IgnoreCondition);
	ab_var_2 = true;
}

rule: "Team 2 D.Va: Allow Call Mech"
Event.OngoingPlayer
Team.Team2
Player.Dva
if (is_alive == true)
if (IsInAlternateForm(EventPlayer()) == true)
if (ab_var_2 == false)
{
	Wait(is_living_boss ? 25 : 10, WaitBehavior.AbortWhenFalse);
	AbortIfConditionIsFalse();
	ab_var_2 = true;
}

rule: "Team 2 D.Va: Call Mech"
Event.OngoingPlayer
Team.Team2
Player.Dva
if (is_alive == true)
if (IsInAlternateForm(EventPlayer()) == true)
if (ab_var_2 == true)
if (HasStatus(EventPlayer(), Status.Hacked) == false)
if (HasStatus(EventPlayer(), Status.Stunned) == false)
if (IsOnGround(EventPlayer()) == true)
{
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	ab_var_2 = false;
}

rule: "Team 2 D.Va: Set / Unset Is aggressive"
Event.OngoingPlayer
Team.Team2
Player.Dva
if (is_using_boss_aggression == false)
if ((is_alive && IsInAlternateForm(EventPlayer())) == is_aggressive)
{
	is_aggressive = !is_aggressive;
	MinWait();
	LoopIfConditionIsTrue();
}

rule: "Team 2 Orisa: Start / Stop Shooting"
Event.OngoingPlayer
Team.Team2
Player.Orisa
if (is_target_in_los >= 3)
{
	if (RandomInteger(1, 100) > 60)
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
		Wait(0.5, WaitBehavior.IgnoreCondition);
	}
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	WaitUntil(is_target_in_los < 3, 99999);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
}

rule: "Team 2 Orisa: Decrease / Normalize Move Speed while shooting on ground"
Event.OngoingPlayer
Team.Team2
Player.Orisa
if (IsButtonHeld(EventPlayer(), Button.PrimaryFire) == true)
if (IsOnGround(EventPlayer()) == true)
{
	SetMoveSpeed(EventPlayer(), mut_amped ? 57.5 : 50);
	WaitUntil(!(IsButtonHeld(EventPlayer(), Button.PrimaryFire) && IsOnGround(EventPlayer())), 99999);
	SetMoveSpeed(EventPlayer(), mut_amped ? 115 : 100);
}

rule: "Team 2 Orisa: Javelin"
Event.OngoingPlayer
Team.Team2
Player.Orisa
if (is_target_in_los >= 5)
if (DistanceBetween(EventPlayer(), target) <= 15)
if (IsInViewAngle(EventPlayer(), target, 5) == true)
{
	PressButton(EventPlayer(), Button.SecondaryFire);
	Wait(15, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Orisa: Fortify"
Event.OngoingPlayer
Team.Team2
Player.Orisa
if ((SlotOf(EventPlayer()) != 1 || objective_phase_number == 1) == true)
if (IsUsingAbility1(EventPlayer()) == false)
if (NormalizedHealth(EventPlayer()) <= (gmut_fortified ? 0.6 : 0.4))
{
	PressButton(EventPlayer(), Button.Ability1);
	Wait(15, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Orisa: Javelin Spin"
Event.OngoingPlayer
Team.Team2
Player.Orisa
if (is_target_in_los == true)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 20);
	LoopIf(DistanceBetween(EventPlayer(), target) > 20);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(12, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Orisa: Terra-Surge"
Event.OngoingPlayer
Team.Team2
Player.Orisa
if (is_target_in_los == true)
if ((wave_number >= 10 || is_living_boss) == true)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 20);
	LoopIf(DistanceBetween(EventPlayer(), target) > 20);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(20, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Roadhog: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Roadhog
if (is_target_in_los >= 4)
if (IsUsingAbility1(EventPlayer()) == false)
{
	Wait(AngleBetweenVectors(FacingDirectionOf(EventPlayer()), VectorTowards(EventPlayer(), target)) / 300, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	if (DistanceBetween(EventPlayer(), target) > 9)
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
	}
	else
	{
		PressButton(EventPlayer(), Button.PrimaryFire);
	}
	WaitUntil(IsUsingAbility1(EventPlayer()), RandomReal(2, 2.4));
	LoopIfConditionIsTrue();
}

rule: "Team 2 Roadhog: Chain Hook"
Event.OngoingPlayer
Team.Team2
Player.Roadhog
if (is_target_in_los >= 4)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > (target.is_flying ? 80 : 40));
	LoopIf(!Ammo(EventPlayer(), false));
	LoopIf(DistanceBetween(EventPlayer(), target) >= 20);
	PressButton(EventPlayer(), Button.Ability1);
	Wait(8, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Roadhog: Whole Hog"
Event.OngoingPlayer
Team.Team2
Player.Roadhog
if (is_target_in_los >= 5)
if ((wave_number >= 11 || is_living_boss) == true)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 20);
	LoopIf(DistanceBetween(EventPlayer(), target) >= 5);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(28, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Roadhog: Whole Hog Shoot"
Event.OngoingPlayer
Team.Team2
Player.Roadhog
if (IsUsingUltimate(EventPlayer()) == true)
{
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	Wait(RandomReal(0.7, 1.1), WaitBehavior.IgnoreCondition);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Tracer: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Tracer
if (is_target_in_los >= 4)
{
	Wait(AngleBetweenVectors(FacingDirectionOf(EventPlayer()), VectorTowards(EventPlayer(), target)) / 300, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	Wait(0.45, WaitBehavior.IgnoreCondition);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
	if (Ammo(EventPlayer(), false) <= 5)
	{
		PressButton(EventPlayer(), Button.Reload);
	}
	Wait(RandomReal(0.4, 0.6), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Tracer: Blink"
Event.OngoingPlayer
Team.Team2
Player.Tracer
if (is_aggressive == true)
if (is_target_in_los >= 4)
if (DistanceBetween(EventPlayer(), target) <= 5)
if (AbsoluteValue(HorizontalAngleTowards(target, EventPlayer())) <= 45)
{
	if (!is_load_limit_reached && AbilityCharge(EventPlayer(), Button.Ability1))
	{
		temp_1 = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + 7.5 * WorldVectorOf(ThrottleOf(EventPlayer()) == Vector(false, false, false) ? Forward() : ThrottleOf(EventPlayer()), EventPlayer(), LocalVector.Rotation), null, null, false);
		if (DistanceBetween(temp_1, RayCastHitPosition(temp_1, temp_1 + 5 * Down(), null, null, false)) < 5)
		{
			PressButton(EventPlayer(), Button.Ability1);
		}
	}
	Wait(1, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Tracer: Recall to enemy on high ground"
Event.OngoingPlayer
Team.Team2
Player.Tracer
if (is_target_in_los == true)
if (is_aggressive == true)
if (recall_block_end_t < TotalTimeElapsed())
if (target.is_flying == false)
if (DistanceBetween(EventPlayer(), target) <= 20)
if (YOf(PositionOf(target)) - YOf(PositionOf(EventPlayer())) >= 3)
{
	SetAbilityCooldown(EventPlayer(), Button.Ability2, false);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(0.8, WaitBehavior.IgnoreCondition);
	if (IsUsingAbility2(EventPlayer()) && is_target_in_los)
	{
		Teleport(EventPlayer(), RayCastHitPosition(EyePosition(target), PositionOf(target) - 2.5 * DirectionFromAngles(HorizontalFacingAngleOf(target), false), null, null, false) + 0.5 * DirectionFromAngles(HorizontalFacingAngleOf(target), false));
		is_nav_reachable_node = false;
		Wait(15, WaitBehavior.IgnoreCondition);
	}
	Wait(5, WaitBehavior.IgnoreCondition);
}

rule: "Team 2 Tracer: Pulse Bomb, Has Used Pulse Bomb (1)"
Event.OngoingPlayer
Team.Team2
Player.Tracer
if (is_target_in_los == true)
if (is_aggressive == true)
if (ab_var_1 == false)
if (NormalizedHealth(EventPlayer()) <= 0.4)
if (HasStatus(EventPlayer(), Status.Hacked) == false)
if (HasStatus(EventPlayer(), Status.Stunned) == false)
{
	ab_var_1 = true;
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(0.16, WaitBehavior.IgnoreCondition);
	CancelPrimaryAction(EventPlayer());
	if (is_living_boss)
	{
		SetAbilityCharge(EventPlayer(), Button.Ability1, 3);
		PressButton(EventPlayer(), Button.Ability1);
		SetUltimateCharge(EventPlayer(), 100);
		PressButton(EventPlayer(), Button.Ultimate);
		Wait(0.192, WaitBehavior.IgnoreCondition);
		CancelPrimaryAction(EventPlayer());
		PressButton(EventPlayer(), Button.Ability1);
		SetUltimateCharge(EventPlayer(), 100);
		PressButton(EventPlayer(), Button.Ultimate);
		Wait(0.16, WaitBehavior.IgnoreCondition);
		CancelPrimaryAction(EventPlayer());
	}
	AbortIf(recall_block_end_t >= TotalTimeElapsed());
	SetAbilityCooldown(EventPlayer(), Button.Ability2, false);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(0.8, WaitBehavior.IgnoreCondition);
	AbortIf(!(IsUsingAbility2(EventPlayer()) && is_target_in_los));
	Teleport(EventPlayer(), RayCastHitPosition(EyePosition(target), PositionOf(target) - 2.5 * DirectionFromAngles(HorizontalFacingAngleOf(target), false), null, null, false) + 0.5 * DirectionFromAngles(HorizontalFacingAngleOf(target), false));
	is_nav_reachable_node = false;
	Wait(2.8, WaitBehavior.IgnoreCondition);
}

rule: "Team 2 Genji: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Genji
if (is_target_in_los >= 4)
if ((IsUsingUltimate(EventPlayer()) && DistanceBetween(EventPlayer(), target) > 5) == false)
{
	if (DistanceBetween(EventPlayer(), target) > 4 || IsUsingUltimate(EventPlayer()))
	{
		PressButton(EventPlayer(), Button.PrimaryFire);
	}
	else
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
	}
	Wait(1, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Genji: Jump"
Event.OngoingPlayer
Team.Team2
Player.Genji
if (is_using_combat_pathfinding == true)
if (target.is_flying == false)
if (IsOnGround(EventPlayer()) == true)
{
	PressButton(EventPlayer(), Button.Jump);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	PressButton(EventPlayer(), Button.Jump);
	Wait(RandomReal(0.8, 1.2), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Genji: Swift Strike"
Event.OngoingPlayer
Team.Team2
Player.Genji
if (is_target_in_los >= 4)
if (is_aggressive == true)
if (DistanceBetween(EventPlayer(), target) <= 15)
if (AbsoluteValue(HorizontalAngleTowards(EventPlayer(), target)) <= 5)
if (IsUsingAbility2(EventPlayer()) == false)
{
	if (!is_load_limit_reached)
	{
		temp_1 = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + 15 * FacingDirectionOf(EventPlayer()), null, null, false);
		if (DistanceBetween(temp_1, RayCastHitPosition(temp_1, temp_1 + 20 * Down(), null, null, false)) < 20)
		{
			PressButton(EventPlayer(), Button.Ability1);
			Wait(2, WaitBehavior.IgnoreCondition);
		}
	}
	Wait(2, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Genji: Deflect"
Event.OnDamageTaken
Team.Team2
Player.Genji
{
	AbortIf(IsUsingUltimate(EventPlayer()));
	AbortIf(RandomInteger(1, 100) > 30);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(8, WaitBehavior.IgnoreCondition);
}

rule: "Team 2 Genji: Dragonblade"
Event.OngoingPlayer
Team.Team2
Player.Genji
if (is_alive == true)
if (NormalizedHealth(EventPlayer()) <= 0.5)
if (IsUsingUltimate(EventPlayer()) == false)
{
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Hanzo: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Hanzo
if (is_target_in_los >= 4)
{
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	Wait(0.8, WaitBehavior.IgnoreCondition);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
	Wait(0.3, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Hanzo: Lunge"
Event.OnDamageTaken
Team.Team2
Player.Hanzo
{
	AbortIf(is_load_limit_reached);
	AbortIf(!is_using_combat_pathfinding);
	AbortIf(RandomInteger(1, 100) > 50);
	PressButton(EventPlayer(), Button.Jump);
	Wait(0.4, WaitBehavior.IgnoreCondition);
	temp_1 = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + 7.85 * WorldVectorOf(ThrottleOf(EventPlayer()) == Vector(false, false, false) ? Forward() : ThrottleOf(EventPlayer()), EventPlayer(), LocalVector.Rotation), null, null, false);
	if (DistanceBetween(temp_1, RayCastHitPosition(temp_1, temp_1 + 5 * Down(), null, null, false)) < 5)
	{
		PressButton(EventPlayer(), Button.Jump);
		Wait(5.5, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Wait(2, WaitBehavior.IgnoreCondition);
	}
}

rule: "Team 2 Hanzo: Storm Arrows"
Event.OngoingPlayer
Team.Team2
Player.Hanzo
if (is_target_in_los == true)
if (NormalizedHealth(EventPlayer()) <= 0.5)
if (IsUsingAbility2(EventPlayer()) == false)
{
	PressButton(EventPlayer(), Button.Ability2);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Hanzo: Dragonstrike"
Event.OngoingPlayer
Team.Team2
Player.Hanzo
if (is_alive == true)
if (is_target_in_los == 0)
if (fear_end_t < TotalTimeElapsed())
if (DistanceBetween(EventPlayer(), target) >= 15)
{
	Wait(1, WaitBehavior.AbortWhenFalse);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	facing_override_direction = VectorTowards(EventPlayer(), target);
	Wait(0.6, WaitBehavior.IgnoreCondition);
	facing_override_direction = VectorTowards(EventPlayer(), target);
	Wait(0.4, WaitBehavior.IgnoreCondition);
	facing_override_direction = false;
	Wait(35, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Reinhardt: Disable Barrier Field after breaking"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (AbilityCooldown(EventPlayer(), Button.SecondaryFire) > 0)
{
	SetAbilityCooldown(EventPlayer(), Button.SecondaryFire, 1000);
}

rule: "Team 2 Reinhardt: Hold / Drop Shield if Target and Distance to Target >= 5m"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (is_target_in_los == true)
if (DistanceBetween(EventPlayer(), target) >= 5)
# Reinhardt won't automatically raise his shield again after charging or being hacked
if (IsUsingAbility1(EventPlayer()) == false)
if (HasStatus(EventPlayer(), Status.Hacked) == false)
{
	StartHoldingButton(EventPlayer(), Button.SecondaryFire);
	WaitUntil(!(is_target_in_los && DistanceBetween(EventPlayer(), target) >= 5 && !IsUsingAbility1(EventPlayer()) && !HasStatus(EventPlayer(), Status.Hacked)), 99999);
	StopHoldingButton(EventPlayer(), Button.SecondaryFire);
}

rule: "Team 2 Reinhardt: Start / Stop Attacking if Distance to Target < 5m"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (is_target_in_los == true)
if (DistanceBetween(EventPlayer(), target) < 5)
{
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	WaitUntil(!(is_target_in_los && DistanceBetween(EventPlayer(), target) < 5), 99999);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
}

rule: "Team 2 Reinhardt: Fire Strike"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (is_target_in_los >= 4)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 75);
	LoopIf(DistanceBetween(EventPlayer(), target) <= 5 || DistanceBetween(EventPlayer(), target) >= 25);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Reinhardt: Charge"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (is_target_in_los >= 5)
if (is_aggressive == true)
if (target.last_hit_by_shatter_t + 1 >= TotalTimeElapsed())
if (target.last_hit_by_shatter_t + 0.4 < TotalTimeElapsed())
if (AbsoluteValue(HorizontalAngleTowards(EventPlayer(), target)) <= 5)
{
	PressButton(EventPlayer(), Button.Ability1);
	Wait(6, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Reinhardt: Charge into battle (Mut: Lock 'n Load)"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (mut_lock_n_load == true)
if (is_target_in_los >= 4)
if (is_aggressive == true)
if (DistanceBetween(EventPlayer(), target) > 25)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	PressButton(EventPlayer(), Button.Ability1);
}

rule: "Team 2 Reinhardt: Earthshatter"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (is_target_in_los >= 5)
if (target.is_flying == false)
if (IsFiringSecondary(EventPlayer()) == false)
{
	Wait(1, WaitBehavior.AbortWhenFalse);
	LoopIf(RandomInteger(1, 100) <= 100 * NormalizedHealth(EventPlayer()));
	LoopIf(DistanceBetween(EventPlayer(), target) >= 18 || AbsoluteValue(HorizontalAngleTowards(EventPlayer(), target)) >= 30);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(RandomInteger(7, 20), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 1: Is Shattered, Start Accelerating"
Event.OnDamageTaken
Team.Team1
{
	AbortIf(!HasStatus(EventPlayer(), Status.Stunned));
	AbortIf(HeroOf(Attacker()) != Hero.Reinhardt);
	AbortIf(EventAbility() != Button.Ultimate);
	SetStatus(EventPlayer(), Attacker(), Status.Stunned, 5);
	last_hit_by_shatter_t = TotalTimeElapsed();
	ApplyImpulse(EventPlayer(), DirectionFromAngles(HorizontalAngleFromDirection(EventDirection()), 30), 15, Relative.ToWorld, ContraryMotion.CancelXYZ);
	StartAccelerating(EventPlayer(), DirectionFromAngles(HorizontalAngleFromDirection(EventDirection()), 30), IsInAir(EventPlayer()) ? 100 : (1 - (TotalTimeElapsed() - last_hit_by_shatter_t)) * 500, 15, Relative.ToWorld, AccelerateRev.DirectionRateAndMaxSpeed);
	Wait(1, WaitBehavior.IgnoreCondition);
	ClearStatus(EventPlayer(), Status.Stunned);
	StopAccelerating(EventPlayer());
}

rule: "Team 2 Sigma: Flux"
Event.OngoingPlayer
Team.Team2
Player.Sigma
if (is_target_in_los == true)
if ((is_living_boss || wave_number >= 10) == true)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 30);
	LoopIf(DistanceBetween(EventPlayer(), target) >= 25);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(1.75, WaitBehavior.AbortWhenFalse);
	while (IsUsingUltimate(EventPlayer()))
	{
		Wait(0.5, WaitBehavior.AbortWhenFalse);
		PressButton(EventPlayer(), Button.PrimaryFire);
	}
	Wait(28, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sigma: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Sigma
if (is_target_in_los >= 4)
if (IsFiringSecondary(EventPlayer()) == false)
if (IsUsingUltimate(EventPlayer()) == false)
{
	Wait(AngleBetweenVectors(FacingDirectionOf(EventPlayer()), VectorTowards(EventPlayer(), target)) / 300, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	PressButton(EventPlayer(), Button.PrimaryFire);
	Wait(RandomReal(0.9, 1.5), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sigma: Barrier"
Event.OngoingPlayer
Team.Team2
Player.Sigma
if (is_target_in_los >= 4)
if (IsUsingAbility1(EventPlayer()) == false)
if (IsUsingAbility2(EventPlayer()) == false)
if (IsUsingUltimate(EventPlayer()) == false)
{
	if (DistanceBetween(target, EventPlayer()) <= 30)
	{
		StartHoldingButton(EventPlayer(), Button.SecondaryFire);
		Wait(RandomReal(0.2, 2), WaitBehavior.IgnoreCondition);
		StopHoldingButton(EventPlayer(), Button.SecondaryFire);
	}
	Wait(4, WaitBehavior.AbortWhenFalse);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sigma: Grasp"
Event.OngoingPlayer
Team.Team2
Player.Sigma
if (is_target_in_los >= 4)
if (IsFiringSecondary(EventPlayer()) == false)
if (IsUsingAbility2(EventPlayer()) == false)
{
	Wait(10, WaitBehavior.IgnoreCondition);
	PressButton(EventPlayer(), Button.Ability1);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sigma: Rock"
Event.OngoingPlayer
Team.Team2
Player.Sigma
if (mut_lock_n_load == true)
if (is_target_in_los >= 4)
if (IsFiringSecondary(EventPlayer()) == false)
if (IsUsingAbility1(EventPlayer()) == false)
{
	PressButton(EventPlayer(), Button.Ability2);
	Wait(10, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Boss Aggro: Set / Unset Is aggressive"
Event.OngoingPlayer
Team.Team2
if (is_using_boss_aggression == true)
if (is_aggressive != is_target_in_los == 5)
{
	Wait(3, WaitBehavior.AbortWhenFalse);
	AbortIfConditionIsFalse();
	is_aggressive = !is_aggressive;
	MinWait();
	LoopIfConditionIsTrue();
}

rule: "Team 2 Boss Aggro: Set Is aggressive after losing 20% health since Boss last time aggressive"
Event.OngoingPlayer
Team.Team2
if (is_using_boss_aggression == true)
if (is_alive == true)
if (is_aggressive == false)
{
	aggression_health_threshold = NormalizedHealth(EventPlayer()) - 0.2;
	WaitUntil(NormalizedHealth(EventPlayer()) < aggression_health_threshold || is_aggressive || !is_living_boss, 99999);
	AbortIf(is_aggressive || !is_living_boss);
	is_using_boss_aggression = false;
	is_aggressive = true;
	WaitUntil(is_target_in_los || !is_living_boss, 99999);
	AbortIf(!is_living_boss);
	is_using_boss_aggression = true;
}

rule: "Team 2 Boss Aggro: Disengage after killing Player"
Event.OnElimination
Team.Team2
{
	AbortIf(!is_using_boss_aggression);
	is_aggressive = false;
}

rule: "IV Team 2 Slot 0: Create Portal Entities"
Event.OngoingPlayer
Team.Team2
Player.Slot0
{
	CreateProgressBarHudText(objective_phase_number == 1 || objective_phase_number == 2 ? AllPlayers(Team.All) : [], objective_phase_number == 1 ? 200 * NormalizedHealth(EventPlayer()) : objective_progress, objective_phase_number == 1 ? "Destroy the Portal" : "Portal closing", Location.Top, -97, objective_phase_number == 1 ? special_spawns_count > 0 ? Color.Blue : CustomColor(Max(200, 255 - (TotalTimeElapsed() - ab_var_2) * 165), Max(0, 255 - (TotalTimeElapsed() - ab_var_2) * 765), Max(19, 255 - (TotalTimeElapsed() - ab_var_2) * 708), 255) : Color.Yellow, Color.White, ProgressBarHudEvaluation.VisibleToValuesAndColor, Spectators.DefaultVisibility);
	CreateIcon(objective_phase_number == 1 || objective_phase_number == 2 ? AllPlayers(Team.All) : [], iv_dom_objective_pos + 2 * Up(), Icon.ExclamationMark, IconRev.VisibleToAndPosition, Color.Yellow, true);
	CreateInWorldText(objective_phase_number == 1 || objective_phase_number == 2 ? AllPlayers(Team.All) : [], objective_phase_number == 1 ? "Destroy the Portal" : "Portal closing", iv_dom_objective_pos + 1.7 * Up(), 1.5, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString, Color.Yellow, Spectators.DefaultVisibility);
	CreateEffect(objective_phase_number == 1 || objective_phase_number == 2 ? AllPlayers(Team.All) : [], Effect.Sphere, objective_phase_number == 1 ? Color.Red : Color.Yellow, iv_dom_objective_pos + 1.11 * Up(), 0.85 + (objective_phase_number == 1 ? 0 : 0.3 * SineFromRadians(6 * TotalTimeElapsed())), EffectRev.VisibleToPositionRadiusAndColor);
	CreateEffect(objective_phase_number == 1 || objective_phase_number == 2 ? AllPlayers(Team.All) : [], Effect.BadAura, Color.Red, iv_dom_objective_pos + 1.11 * Up(), 1, EffectRev.VisibleToPositionAndRadius);
	CreateEffect(objective_phase_number == 1 && (ab_var_2 >= TotalTimeElapsed() || special_spawns_count > 0) ? AllPlayers(Team.All) : [], Effect.LightShaft, Color.White, iv_dom_objective_pos - 2 * Up(), 1, EffectRev.VisibleToPositionAndRadius);
}

rule: "IV Team 2 Torbjörn: Start Portal Mode, Open (Phase 1), Breakpoint End Time (2), Set Health to half to remove armour"
Event.OngoingPlayer
Team.Team2
Player.Torbjorn
{
	iv_dom_objective_pos = RandomValueInArray(RemoveFromArray(iv_dom_objective_all_pos_list, iv_dom_objective_pos));
	StartForcingPlayerPosition(EventPlayer(), iv_dom_objective_pos, false);
	DisableMovementCollisionWithEnvironment(EventPlayer(), true);
	SetInvisible(EventPlayer(), InvisibleTo.All);
	SetStatus(EventPlayer(), null, Status.Unkillable, 9999);
	SetPlayerHealth(EventPlayer(), 0.5 * MaxHealth(EventPlayer()));
}

rule: "IV Team 2: Force portal to shoot lava"
Event.OngoingPlayer
Team.Team2
Player.Torbjorn
if (IsUsingUltimate(EventPlayer()) == true)
{
	SetFacing(EventPlayer(), DirectionTowards(EyePosition(EventPlayer()), Vector(RandomInteger(-500, 500), RandomInteger(-500, 500), RandomInteger(-500, 500))), Relative.ToWorld);
	PressButton(EventPlayer(), Button.PrimaryFire);
	Wait(0.25, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "IV Team 2 Torbjörn: Health reaches Breakpoint, Is Dead -> Portal Closing (Phase 2)"
Event.OngoingPlayer
Team.Team2
Player.Torbjorn
if (NormalizedHealth(EventPlayer()) <= 0.333)
{
	SetPlayerHealth(EventPlayer(), 0.333 * MaxHealth(EventPlayer()));
	iv_defend_portal();
	WaitUntil(NormalizedHealth(EventPlayer()) <= 0.166, 99999);
	SetPlayerHealth(EventPlayer(), 0.166 * MaxHealth(EventPlayer()));
	iv_defend_portal();
	ClearStatus(EventPlayer(), Status.Unkillable);
	WaitUntil(IsDead(EventPlayer()), 99999);
	objective_phase_number = 2;
	iv_defend_portal();
	upgrade_health_and_healing();
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Red, iv_dom_objective_pos + 1.11 * Up(), 10);
	PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.White, EventPlayer(), 200);
	BigMessage(AllPlayers(Team.All), "Portal is closing! Gained bonus health");
	StopForcingPlayerPosition(EventPlayer());
	EnableMovementCollisionWithEnvironment(EventPlayer());
	Wait(0.25, WaitBehavior.IgnoreCondition);
	Teleport(EventPlayer(), 1000 * Down());
	SetInvisible(EventPlayer(), InvisibleTo.None);
}

rule: "IV Team 2 Slot 0: Portal Closing (Phase 2) -> Kill remaining (Phase 3)"
Event.OngoingPlayer
Team.Team2
Player.Slot0
if (objective_phase_number == 2)
{
	for (objective_progress = 100; 25; -1)
	{
		Wait(0.096, WaitBehavior.IgnoreCondition);
	}
	enable_normal_spawns = true;
	async! play_incoming_sound_twice();
	for (objective_progress = 25; 10; -1)
	{
		Wait(0.096, WaitBehavior.IgnoreCondition);
	}
	enable_objective_enemy_spawn = true;
	for (objective_progress = 10; 0; -1)
	{
		Wait(0.096, WaitBehavior.IgnoreCondition);
	}
	start_kill_remaining_phase();
}

rule: "IV Team 2 Torbjörn: Set Breakpoint Damage Reduction"
Event.OngoingPlayer
Team.Team2
Player.Torbjorn
if (objective_phase_number == 1)
if ((ab_var_2 >= TotalTimeElapsed() || special_spawns_count > 0) == true)
{
	SetDamageReceived(EventPlayer(), 5);
	WaitUntil(!(objective_phase_number == 1 && (ab_var_2 >= TotalTimeElapsed() || special_spawns_count > 0)), 99999);
	SetDamageReceived(EventPlayer(), 50);
}

rule: "HVT Team 2 Slot 1: Create HVT Entities"
Event.OngoingPlayer
Team.Team2
Player.Slot1
{
	CreateProgressBarHudText(objective_phase_number == 1 || objective_phase_number == 2 ? AllPlayers(Team.All) : [], objective_phase_number == 1 ? 100 * NormalizedHealth(EventPlayer()) : (downed_start_t ? objective_progress : revive_timer) / 1.5, objective_phase_number == 1 ? "Subdue the High Value Target" : downed_start_t ? ArrayContains(revivers, LocalPlayer()) ? "Capturing..." : "Capture the High Value Target" : "High Value Target is being revived", Location.Top, -97, objective_phase_number == 1 ? CustomColor(Max(200, 255 - (TotalTimeElapsed() - hvt_call_reinforcements_end_t) * 165), Max(0, 255 - (TotalTimeElapsed() - hvt_call_reinforcements_end_t) * 765), Max(19, 255 - (TotalTimeElapsed() - hvt_call_reinforcements_end_t) * 708), 255) : downed_start_t ? downed_start_t == 2 ? Color.Green : Color.Blue : Color.Red, objective_phase_number == 1 ? Color.Blue : downed_start_t ? Color.Blue : Color.Yellow, ProgressBarHudEvaluation.VisibleToValuesAndColor, Spectators.DefaultVisibility);
	CreateIcon(objective_phase_number == 1 || objective_phase_number == 2 ? AllPlayers(Team.All) : [], EventPlayer(), Icon.ExclamationMark, IconRev.VisibleTo, Color.Yellow, true);
	CreateInWorldText(objective_phase_number == 1 || objective_phase_number == 2 ? AllPlayers(Team.All) : [], hvt_call_reinforcements_end_t >= TotalTimeElapsed() ? "Calling Reinforcements" : objective_phase_number == 1 ? "Subdue Target" : "Capture Target", EventPlayer(), 1.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.Yellow, Spectators.DefaultVisibility);
	CreateEffect(objective_phase_number == 2 ? AllPlayers(Team.All) : [], Effect.Ring, downed_start_t ? downed_start_t == 2 ? Color.Green : Color.White : Color.Red, PositionOf(EventPlayer()) + 0.65 * Up(), 10, EffectRev.VisibleToPositionRadiusAndColor);
	CreateEffect(objective_phase_number == 2 ? AllPlayers(Team.All) : [], Effect.Ring, downed_start_t ? downed_start_t == 2 ? Color.Green : Color.White : Color.Red, PositionOf(EventPlayer()) + 0.65 * Down(), 10, EffectRev.VisibleToPositionRadiusAndColor);
	CreateEffect(objective_phase_number == 2 ? AllPlayers(Team.All) : [], Effect.Ring, downed_start_t ? downed_start_t == 2 ? Color.Green : Color.White : Color.Red, PositionOf(EventPlayer()), (TotalTimeElapsed() % 1.333 < 0.666) * 15 * TotalTimeElapsed() % 10, EffectRev.VisibleToPositionRadiusAndColor);
	CreateEffect(hvt_call_reinforcements_end_t >= TotalTimeElapsed() ? AllPlayers(Team.All) : [], Effect.LightShaft, Color.White, UpdateEveryFrame(PositionOf(EventPlayer())), 1, EffectRev.VisibleToPositionAndRadius);
}

rule: "HVT Team 2 Slot 1: HVT subdued fallback"
Event.OngoingPlayer
Team.Team2
Player.Slot1
if (objective_phase_number == 2)
if (HasStatus(EventPlayer(), Status.Stunned) == false)
{
	Wait(0.25, WaitBehavior.AbortWhenFalse);
	AbortIfConditionIsFalse();
	while (objective_phase_number == 2 && !HasStatus(EventPlayer(), Status.Stunned))
	{
		ClearStatus(EventPlayer(), Status.PhasedOut);
		CancelPrimaryAction(EventPlayer());
		SetStatus(EventPlayer(), null, Status.KnockedDown, 9999);
		Wait(0.25, WaitBehavior.IgnoreCondition);
	}
	if (objective_phase_number == 2)
	{
		SetStatus(EventPlayer(), null, Status.PhasedOut, 9999);
	}
	LoopIfConditionIsTrue();
}

rule: "HVT Team 2 Slot 1: Subdued, check Player in Radius"
Event.OngoingPlayer
Team.Team2
Player.Slot1
if (objective_phase_number == 2)
{
	revivers = FilteredArray(combatants, !ArrayElement().downed_start_t && !(ArrayElement().is_invisible % 3) && DistanceBetween(EventPlayer(), Vector(XOf(PositionOf(ArrayElement())), YOf(PositionOf(EventPlayer())), ZOf(PositionOf(ArrayElement())))) <= 10 && AbsoluteValue(YOf(PositionOf(EventPlayer())) - YOf(PositionOf(ArrayElement()))) <= 5 && IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock));
	if (CountOf(revivers))
	{
		downed_start_t = 2;
		objective_progress += 1.5;
	}
	else if (hvt_dom_objective_killed_count >= 3)
	{
		downed_start_t = 1;
		objective_progress += 0.6;
	}
	else if (downed_start_t > 0)
	{
		downed_start_t -= 0.2;
	}
	else
	{
		revive_timer += hvt_dom_objective_killed_count == 1 ? 3 : 2;
	}
	if (objective_progress >= 150)
	{
		ClearStatus(EventPlayer(), Status.KnockedDown);
		ClearStatus(EventPlayer(), Status.PhasedOut);
		ClearStatus(EventPlayer(), Status.Invincible);
		PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.Yellow, PositionOf(EventPlayer()), 1);
		PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.White, PositionOf(EventPlayer()), 200);
		Teleport(EventPlayer(), 1000 * Down());
		start_kill_remaining_phase();
		objective_progress = false;
	}
	else if (revive_timer >= 150)
	{
		objective_phase_number = 1;
		objective_progress = false;
		gmut_fortified_bypass_end_t = false;
		BigMessage(AllPlayers(Team.All), "The HVT has been revived!");
		SetPlayerHealth(EventPlayer(), 0.6 * MaxHealth(EventPlayer()));
		ClearStatus(EventPlayer(), Status.KnockedDown);
		ClearStatus(EventPlayer(), Status.PhasedOut);
		ClearStatus(EventPlayer(), Status.Invincible);
	}
	Wait(0.2, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "HVT Team 2 Slot 1: Call Reinforcements"
Event.OngoingPlayer
Team.Team2
Player.Slot1
if (objective_phase_number == 1)
if (NormalizedHealth(EventPlayer()) > 0.5)
{
	WaitUntil(NormalizedHealth(EventPlayer()) <= 0.5 || objective_phase_number == 2, 99999);
	if (objective_phase_number == 2)
	{
		enable_normal_spawns = true;
		call_reinforcements();
		async! play_incoming_sound_twice();
	}
	else
	{
		PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.Red, EventPlayer(), 1);
		hvt_call_reinforcements_end_t = TotalTimeElapsed() + 10;
		SetDamageReceived(EventPlayer(), 5);
		SetPlayerHealth(EventPlayer(), 0.5 * MaxHealth(EventPlayer()));
		Wait(1, WaitBehavior.IgnoreCondition);
		enable_normal_spawns = true;
		call_reinforcements();
		async! play_incoming_sound_twice();
		Wait(4, WaitBehavior.IgnoreCondition);
		SetDamageReceived(EventPlayer(), 50);
	}
	WaitUntil(objective_phase_number == 3, 99999);
}

rule: "HVT Team 2 Slot 1: Capture Breakpoints"
Event.OngoingPlayer
Team.Team2
Player.Slot1
if (objective_phase_number == 2)
{
	upgrade_health_and_healing();
	money_amount += 105;
	WaitUntil(objective_progress >= 140, 99999);
	enable_normal_spawns = true;
	call_reinforcements();
	async! play_incoming_sound_twice();
	WaitUntil(objective_phase_number == 3, 99999);
	money_amount += 105;
}

rule: "DOM Team 2 Slot 2: Create Guard and Control Point Entities"
Event.OngoingPlayer
Team.Team2
Player.Slot2
{
	CreateProgressBarHudText(objective_phase_number == 1 ? AllPlayers(Team.All) : [], ArrayContains(dom_point_A_contesters, LocalPlayer()) ? FirstOf(objective_progress) : ArrayContains(dom_point_B_contesters, LocalPlayer()) ? objective_progress[1] : 0.25 * (100 * ((PlayersInSlot(2, Team.Team2).is_living_boss ? 1 - NormalizedHealth(PlayersInSlot(2, Team.Team2)) : 1) + (PlayersInSlot(3, Team.Team2).is_living_boss ? 1 - NormalizedHealth(PlayersInSlot(3, Team.Team2)) : 1)) + FirstOf(objective_progress) + objective_progress[1]), ArrayContains(dom_point_A_contesters, LocalPlayer()) ? PlayersInSlot(2, Team.Team2).is_living_boss ? "Kill the Guard to unlock this point" : "Capturing..." : ArrayContains(dom_point_B_contesters, LocalPlayer()) ? PlayersInSlot(3, Team.Team2).is_living_boss ? "Kill the Guard to unlock the point" : "Capturing..." : IsTrueForAny(AllPlayers(Team.Team2), ArrayElement().is_living_boss) ? "Kill the guards and capture the points" : "Capture the points", Location.Top, -97, ArrayContains(dom_point_A_contesters, LocalPlayer()) || ArrayContains(dom_point_B_contesters, LocalPlayer()) ? Color.Green : Color.Blue, ArrayContains(dom_point_A_contesters, LocalPlayer()) && PlayersInSlot(2, Team.Team2).is_living_boss || ArrayContains(dom_point_B_contesters, LocalPlayer()) && PlayersInSlot(3, Team.Team2).is_living_boss ? Color.Yellow : Color.Blue, ProgressBarHudEvaluation.VisibleToValuesAndColor, Spectators.DefaultVisibility);
	CreateEffect(objective_phase_number == 1 && FirstOf(objective_progress) < 100 ? AllPlayers(Team.All) : [], Effect.Ring, PlayersInSlot(2, Team.Team2).is_living_boss ? Color.Red : CountOf(dom_point_A_contesters) ? Color.Green : Color.White, FirstOf(iv_dom_objective_pos), 3, EffectRev.VisibleToPositionRadiusAndColor);
	CreateEffect(objective_phase_number == 1 && objective_progress[1] < 100 ? AllPlayers(Team.All) : [], Effect.Ring, PlayersInSlot(3, Team.Team2).is_living_boss ? Color.Red : CountOf(dom_point_B_contesters) ? Color.Green : Color.White, iv_dom_objective_pos[1], 3, EffectRev.VisibleToPositionRadiusAndColor);
	CreateIcon(objective_phase_number == 1 && FirstOf(objective_progress) < 100 ? AllPlayers(Team.All) : [], FirstOf(iv_dom_objective_pos) + 2 * Up(), Icon.ExclamationMark, IconRev.VisibleToPositionAndColor, PlayersInSlot(2, Team.Team2).is_living_boss ? Color.Orange : Color.Yellow, true);
	CreateIcon(objective_phase_number == 1 && objective_progress[1] < 100 ? AllPlayers(Team.All) : [], iv_dom_objective_pos[1] + 2 * Up(), Icon.ExclamationMark, IconRev.VisibleToPositionAndColor, PlayersInSlot(3, Team.Team2).is_living_boss ? Color.Orange : Color.Yellow, true);
	CreateInWorldText(objective_phase_number == 1 && FirstOf(objective_progress) < 100 ? AllPlayers(Team.All) : [], PlayersInSlot(2, Team.Team2).is_living_boss ? "Kill Guard" : "Capture point", PlayersInSlot(2, Team.Team2).is_living_boss ? PlayersInSlot(2, Team.Team2) : FirstOf(iv_dom_objective_pos) + 1.7 * Up(), 1.5, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString, Color.Yellow, Spectators.DefaultVisibility);
	CreateInWorldText(objective_phase_number == 1 && objective_progress[1] < 100 ? AllPlayers(Team.All) : [], PlayersInSlot(3, Team.Team2).is_living_boss ? "Kill Guard" : "Capture point", PlayersInSlot(3, Team.Team2).is_living_boss ? PlayersInSlot(3, Team.Team2) : iv_dom_objective_pos[1] + 1.7 * Up(), 1.5, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString, Color.Yellow, Spectators.DefaultVisibility);
}

rule: "DOM Team 2 Slot 2: Contest Control Point A"
Event.OngoingPlayer
Team.Team2
Player.Slot2
if (objective_phase_number == 1)
if (FirstOf(objective_progress) < 100)
{
	dom_point_A_contesters = FilteredArray(combatants, !ArrayElement().downed_start_t && !(ArrayElement().is_invisible % 3) && DistanceBetween(FirstOf(iv_dom_objective_pos), Vector(XOf(PositionOf(ArrayElement())), YOf(FirstOf(iv_dom_objective_pos)), ZOf(PositionOf(ArrayElement())))) <= 3 && AbsoluteValue(YOf(PositionOf(FirstOf(iv_dom_objective_pos))) - YOf(PositionOf(ArrayElement()))) <= 3 && IsInLineOfSight(FirstOf(iv_dom_objective_pos) + Up(), ArrayElement(), BarrierLOS.NoBarriersBlock));
	if (!PlayersInSlot(2, Team.Team2).is_living_boss && CountOf(dom_point_A_contesters))
	{
		objective_progress[0] += 2;
		Wait(0.25, WaitBehavior.IgnoreCondition);
		objective_progress[0] += 2;
		if (FirstOf(objective_progress) >= 100)
		{
			PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.Yellow, FirstOf(iv_dom_objective_pos), 3);
			PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.White, FirstOf(iv_dom_objective_pos), 200);
			dom_point_A_contesters = [];
			money_amount += 70;
			if (objective_progress[1] >= 100)
			{
				objective_phase_number = 2;
				enable_normal_spawns = true;
				call_reinforcements();
				async! play_incoming_sound_twice();
				Wait(2, WaitBehavior.IgnoreCondition);
				start_kill_remaining_phase();
			}
		}
		Wait(0.25, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Wait(0.5, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "DOM Team 2 Slot 2: Contest Control Point B"
Event.OngoingPlayer
Team.Team2
Player.Slot2
if (objective_phase_number == 1)
if (objective_progress[1] < 100)
{
	dom_point_B_contesters = FilteredArray(combatants, !ArrayElement().downed_start_t && !(ArrayElement().is_invisible % 3) && DistanceBetween(iv_dom_objective_pos[1], Vector(XOf(PositionOf(ArrayElement())), YOf(iv_dom_objective_pos[1]), ZOf(PositionOf(ArrayElement())))) <= 3 && AbsoluteValue(YOf(PositionOf(iv_dom_objective_pos[1])) - YOf(PositionOf(ArrayElement()))) <= 3 && IsInLineOfSight(iv_dom_objective_pos[1] + Up(), ArrayElement(), BarrierLOS.NoBarriersBlock));
	if (!PlayersInSlot(3, Team.Team2).is_living_boss && CountOf(dom_point_B_contesters))
	{
		objective_progress[1] += 2;
		Wait(0.25, WaitBehavior.IgnoreCondition);
		objective_progress[1] += 2;
		if (objective_progress[1] >= 100)
		{
			PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.Yellow, iv_dom_objective_pos[1], 3);
			PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.White, iv_dom_objective_pos[1], 200);
			dom_point_B_contesters = [];
			money_amount += 70;
			if (FirstOf(objective_progress) >= 100)
			{
				objective_phase_number = 2;
				enable_normal_spawns = true;
				call_reinforcements();
				async! play_incoming_sound_twice();
				Wait(2, WaitBehavior.IgnoreCondition);
				start_kill_remaining_phase();
			}
		}
		Wait(0.25, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Wait(0.5, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "[Info] Ana"
Event.OngoingPlayer
Player.Ana
{
	# T1
	talent_text[1] = "multinade";
	talent_text[2] = "throw 3 biotic grenades instead of 1";
	# T2
	talent_text[3] = "sleep paralysis";
	talent_text[4] = "enemies slept by sleep dart receive large damage when they wake up";
	StartForcingDummyBotName(EventPlayer(), "Shrike");
}

rule: "[Info] Ashe"
Event.OngoingPlayer
Player.Ashe
{
	# T1
	talent_text[1] = "black gunpowder";
	talent_text[2] = "coach gun stuns and sets enemies on fire";
	# T2
	talent_text[3] = "dancing flames";
	talent_text[4] = "eliminated enemies exlpode and burn others nearby";
}

rule: "[Info] Baptiste"
Event.OngoingPlayer
Player.Baptiste
{
	# T1
	talent_text[1] = "corrode";
	talent_text[2] = "regenerative burst inflicts poison damage to enemies";
	# T2
	talent_text[3] = "aerial ace";
	talent_text[4] = "exo-boots allow for gliding and deal bonus damage while gliding";
	StartForcingDummyBotName(EventPlayer(), "Medic");
}

rule: "[Info] Bastion"
Event.OngoingPlayer
Player.Bastion
{
	# T1
	talent_text[1] = "fusillade";
	talent_text[2] = "start firing barrages of rockets when shooting in assault form";
	# T2
	talent_text[3] = "trickshot";
	talent_text[4] = "landing tactical grenade on an enemy deals more damage and heals health";
}

rule: "[Info] Brigitte"
Event.OngoingPlayer
Player.Brigitte
{
	# T1
	talent_text[1] = "endeavor";
	talent_text[2] = "gain a boost in damage, armour and speed when your barrier breaks";
	# T2
	talent_text[3] = "whiplash";
	talent_text[4] = "endpoint of whip shot generates a stunning shockwave";
	StartForcingDummyBotName(EventPlayer(), "Shield");
}

rule: "[Info] DVa"
Event.OngoingPlayer
Player.Dva
{
	# T1
	talent_text[1] = "voltage grid";
	talent_text[2] = "defense matrix damages and roots enemies";
	# T2
	talent_text[3] = "shooting star";
	talent_text[4] = "boosters set enemies on fire";
	StartForcingDummyBotName(EventPlayer(), "Aeronaut");
	Wait(0.5, WaitBehavior.IgnoreCondition);
	SetPlayerHealth(EventPlayer(), 100000);
}

rule: "[Info] Doomfist"
Event.OngoingPlayer
Player.Doomfist
{
	# T1
	talent_text[1] = "punch card";
	talent_text[2] = "rocket punch deals triple damage at full charge";
	# T2
	talent_text[3] = "fire quake";
	talent_text[4] = "seismic slam sends out two massive wave of flames";
}

rule: "[Info] Echo"
Event.OngoingPlayer
Player.Echo
{
	# T1
	talent_text[1] = "bomblet jacket";
	talent_text[2] = "send out mini-bombs to enemies while flight is active";
	# T2
	talent_text[3] = "focusing optics";
	talent_text[4] = "focusing beam boost starts at 90% hp instead of 50%";
	StartForcingDummyBotName(EventPlayer(), "Hoverbird");
}

rule: "[Info] Genji"
Event.OngoingPlayer
Player.Genji
{
	# T1
	talent_text[1] = "venomous strike";
	talent_text[2] = "swift strike deals bleed damage; heal for bleed damage";
	# T2
	talent_text[3] = "sharpened storm";
	talent_text[4] = "double the amount of shurikens fired";
	StartForcingDummyBotName(EventPlayer(), "Shinobi");
}

rule: "[Info] Hanzo"
Event.OngoingPlayer
Player.Hanzo
{
	# T1
	talent_text[1] = "Arrow Rain";
	talent_text[2] = "fire more arrows per shot during Storm Arrows";
	# T2
	talent_text[3] = "stormbreak";
	talent_text[4] = "storm arrows have no cooldown for a short duration when earning a kill";
	StartForcingDummyBotName(EventPlayer(), "Bowmaster");
}

rule: "[Info] Junkrat"
Event.OngoingPlayer
Player.Junkrat
{
	# T1
	talent_text[1] = "pyromania";
	talent_text[2] = "All explosive attacks deal fire damage";
	# T2
	talent_text[3] = "trigger happy";
	talent_text[4] = "Gain +1 Concussion Mine every 4s, up to 5 max";
}

rule: "[Info] Junker Queen"
Event.OngoingPlayer
Player.JunkerQueen
{
	# T1
	talent_text[1] = "Shout Louder";
	talent_text[2] = "commanding shout wounds enemies in the area";
	# T2
	talent_text[3] = "Grace Period";
	talent_text[4] = "gracie deals can pull multiple enemies back at once";
}

rule: "[Info] Lifeweaver"
Event.OngoingPlayer
Player.Lifeweaver
{
	# T1
	talent_text[1] = "Autumn Blossoms";
	talent_text[2] = "Deal more damage and eliminations cause enemies to drop heal orbs";
	# T2
	talent_text[3] = "Pressure Therapy";
	talent_text[4] = "Deal 50% more damage to enemies you're above and behind";
}

rule: "[Info] Kiriko"
Event.OngoingPlayer
Player.Kiriko
{
	# T1
	talent_text[1] = "Shinobi Tactics";
	talent_text[2] = "healing health with abilities create energy explosions around the target";
	# T2
	talent_text[3] = "recession";
	talent_text[4] = "protection suzu damages for 20% of health and freezes enemies";
	StartForcingDummyBotName(EventPlayer(), "Yokai");
}

rule: "[Info] Lucio"
Event.OngoingPlayer
Player.Lucio
{
	# T1
	talent_text[1] = "Chord Cadence";
	talent_text[2] = "amp it up triggers twice and adds more shots to your attack";
	# T2
	talent_text[3] = "reverse amp";
	talent_text[4] = "amp it up inflicts the opposite song effect to enemies";
	StartForcingDummyBotName(EventPlayer(), "Gunrunner");
}

rule: "[Info] Cassidy"
Event.OngoingPlayer
Player.Cassidy
{
	# T1
	talent_text[1] = "standoff";
	talent_text[2] = "enemies cannot move once their skull is locked during deadeye";
	# T2
	talent_text[3] = "flashpoint";
	talent_text[4] = "magnetic grenade will heavily stun enemies if it sticks";
	StartForcingDummyBotName(EventPlayer(), "Gunslinger");
}

rule: "[Info] Mei"
Event.OngoingPlayer
Player.Mei
{
	# T1
	talent_text[1] = "cold snap";
	talent_text[2] = "instantly freeze nearby enemies once cryo-freeze breaks";
	# T2
	talent_text[3] = "fractical strike";
	talent_text[4] = "shoot more icicles at once but at slightly less damage";
	StartForcingDummyBotName(EventPlayer(), "Subzero");
}

rule: "[Info] Mercy"
Event.OngoingPlayer
Player.Mercy
{
	# T1
	talent_text[1] = "wings of grand";
	talent_text[2] = "guardian angel damages and knocks enemies down in its path";
	# T2
	talent_text[3] = "holy light missiles";
	talent_text[4] = "launch powerful light charges during valkyrie";
}

rule: "[Info] Moira"
Event.OngoingPlayer
Player.Moira
{
	# T1
	talent_text[1] = "flourish";
	talent_text[2] = "fading through allies heals and through enemies damages them";
	# T2
	talent_text[3] = "catalyst";
	talent_text[4] = "holding primary during coalescence costs energy and speed, but boosts effectiveness";
}

rule: "[Info] Orisa"
Event.OngoingPlayer
Player.Orisa
{
	# T1
	talent_text[1] = "spinning shreddies";
	talent_text[2] = "javelin spin sends projectile shards that knock back enemies";
	# T2
	talent_text[3] = "metalhead";
	talent_text[4] = "energy javelin also affects enemies around the stuck target and stuns longer";
	StartForcingDummyBotName(EventPlayer(), "Bulldozer");
}

rule: "[Info] Pharah"
Event.OngoingPlayer
Player.Pharah
{
	# T1
	talent_text[1] = "head trauma";
	talent_text[2] = "concussive blast deals damage and tazes enemies below half health";
	# T2
	talent_text[3] = "weaponized storm";
	talent_text[4] = "every 6th rocket flies faster and detonates several clusters";
	StartForcingDummyBotName(EventPlayer(), "Skirmisher");
}

rule: "[Info] Ramattra"
Event.OngoingPlayer
Player.Ramattra
{
	# T1
	talent_text[1] = "vile dominance";
	talent_text[2] = "move faster and root enemies with every punch in nemesis form";
	# T2
	talent_text[3] = "nether sector";
	talent_text[4] = "heal health and gain bonus ultimate charge for every grounded enemy with vortex";
	StartForcingDummyBotName(EventPlayer(), "tyrant");
}

rule: "[Info] Reaper"
Event.OngoingPlayer
Player.Reaper
{
	# T1
	talent_text[1] = "wrathful wraith";
	talent_text[2] = "allow shooting during wraith form";
	# T2
	talent_text[3] = "paranoia";
	talent_text[4] = "tase and damage enemies in sight during wraith form";
	StartForcingDummyBotName(EventPlayer(), "Spook");
}

rule: "[Info] Reinhardt"
Event.OngoingPlayer
Player.Reinhardt
{
	# T1
	talent_text[1] = "fire blast";
	talent_text[2] = "fire strike explodes as it deals damage, igniting enemies";
	# T2
	talent_text[3] = "epicenter";
	talent_text[4] = "earthshatter travels in all directions";
	StartForcingDummyBotName(EventPlayer(), "Crusader");
}

rule: "[Info] Roadhog"
Event.OngoingPlayer
Player.Roadhog
{
	# T1
	talent_text[1] = "stench";
	talent_text[2] = "constantly inflict toxic damage to nearby enemeis";
	# T2
	talent_text[3] = "chainsnap";
	talent_text[4] = "chain hook deals 4x more damage; resets upon eliminations";
	StartForcingDummyBotName(EventPlayer(), "Juggernaut");
}

rule: "[Info] Sigma"
Event.OngoingPlayer
Player.Sigma
{
	# T1
	talent_text[1] = "accretion disk";
	talent_text[2] = "accretion flies straight and has increased damage and stun";
	# T2
	talent_text[3] = "string theory";
	talent_text[4] = "when kinetic grasp ends, fire a blast that scales based on the amount of damage collected";
	StartForcingDummyBotName(EventPlayer(), "Graviton");
}

rule: "[Info] Sojourn"
Event.OngoingPlayer
Player.Sojourn
{
	# T1
	talent_text[1] = "Thunderous kicks";
	talent_text[2] = "kickslide jump initiates a powerful energy blast";
	# T2
	talent_text[3] = "Matter Splatter";
	talent_text[4] = "critical railgun hits are explosive";
}

rule: "[Info] Soldier: 76"
Event.OngoingPlayer
Player.Soldier76
{
	# T1
	talent_text[1] = "triple threat";
	talent_text[2] = "helix rockets fires two adjacent mini rockets";
	# T2
	talent_text[3] = "Espionage";
	talent_text[4] = "allies in biotic field revive faster and become harder to hit";
}

rule: "[Info] Sombra"
Event.OngoingPlayer
Player.Sombra
{
	# T1
	talent_text[1] = "stack overflow";
	talent_text[2] = "cancelling stealth will temporarily boost damage and cause melees to stun";
	# T2
	talent_text[3] = "cyberattack";
	talent_text[4] = "using translocator will damage and hack nearby enemies";
	StartForcingDummyBotName(EventPlayer(), "Taser");
}

rule: "[Info] Symmetra"
Event.OngoingPlayer
Player.Symmetra
{
	# T1
	talent_text[1] = "sentry paragon";
	talent_text[2] = "each sentry turret deals 50% more damage";
	# T2
	talent_text[3] = "shield generator";
	talent_text[4] = "gain increased damage and speed, and grant all players shields with kills";
}

rule: "[Info] Torbjorn"
Event.OngoingPlayer
Player.Torbjorn
{
	# T1
	talent_text[1] = "heatwaves";
	talent_text[2] = "unleash waves of fire when overload or molten core is active";
	# T2
	talent_text[3] = "foundry";
	talent_text[4] = "run 40% faster and deal 40% damage with forge hammer equipped";
	StartForcingDummyBotName(EventPlayer(), "Portal");
}

rule: "[Info] Tracer"
Event.OngoingPlayer
Player.Tracer
{
	# T1
	talent_text[1] = "vortex";
	talent_text[2] = "recall drags and roots nearby enemies to its activation point";
	# T2
	talent_text[3] = "chain reaction";
	talent_text[4] = "pulse bomb explosions can chain onto other enemies";
	StartForcingDummyBotName(EventPlayer(), "Playmaker");
}

rule: "[Info] Widowmaker"
Event.OngoingPlayer
Player.Widowmaker
{
	# T1
	talent_text[1] = "baiser de soie";
	talent_text[2] = "scoped critical hits instantly kill enemies below 30% hp";
	# T2
	talent_text[3] = "parting gift";
	talent_text[4] = "leave a line of grenades while using grappling hook";
	StartForcingDummyBotName(EventPlayer(), "Sniper");
}

rule: "[Info] Winston"
Event.OngoingPlayer
Player.Winston
{
	# T1
	talent_text[1] = "next generation";
	talent_text[2] = "primal rage damage is doubled and recharges 5% ult per hit";
	# T2
	talent_text[3] = "quake";
	talent_text[4] = "jump pack landing force is much more powerful and stuns enemies";
}

rule: "[Info] Wrecking Ball"
Event.OngoingPlayer
Player.WreckingBall
{
	# T1
	talent_text[1] = "orbital strike";
	talent_text[2] = "piledriver deals more damage the higher you drop";
	# T2
	talent_text[3] = "distortion";
	talent_text[4] = "adaptive shields triggers explosions and tazes nearby enemies";
	StartForcingDummyBotName(EventPlayer(), "Detonator");
}

rule: "[Info] Zarya"
Event.OngoingPlayer
Player.Zarya
{
	# T1
	talent_text[1] = "combusta-bubble";
	talent_text[2] = "barriers explode when they expire";
	# T2
	talent_text[3] = "power surge";
	talent_text[4] = "personal barrier grants energy upon activation";
	StartForcingDummyBotName(EventPlayer(), "Amazon");
}

rule: "[Info] Zenyatta"
Event.OngoingPlayer
Player.Zenyatta
{
	# T1
	talent_text[1] = "stress relief";
	talent_text[2] = "fully charged orb volleys deal 50% more damage";
	# T2
	talent_text[3] = "perfect balance";
	talent_text[4] = "transcendence damages enemies in the area of effect";
}

rule: "Ana: Multinade"
Event.OngoingPlayer
Team.Team1
Player.Ana
if (Talent1 == true)
if (IsUsingAbility2(EventPlayer()) == true)
{
	for (p_i = 0; 4; 1)
	{
		Wait(0.03, WaitBehavior.IgnoreCondition);
		SetAbilityCooldown(EventPlayer(), Button.Ability2, false);
		CancelPrimaryAction(EventPlayer());
		Wait(0.05, WaitBehavior.IgnoreCondition);
		PressButton(EventPlayer(), Button.Ability2);
	}
	Wait(2, WaitBehavior.IgnoreCondition);
}

rule: "Ana: Sleep Paralysis"
Event.OnDamageDealt
Team.Team1
Player.Ana
{
	AbortIf(!Talent2);
	AbortIf(EventAbility() != Button.Ability1);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Black, Victim(), 2);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	WaitUntil(!HasStatus(Victim(), Status.Asleep), 5);
	PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.Black, EyePosition(Victim()), 150);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Black, Victim(), 6);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Black, Victim(), 12);
	Damage(PlayersWithinRadius(Victim(), 6, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 150);
	SetStatus(PlayersWithinRadius(EyePosition(Victim()), 6, Team.Team2, RadiusLOS.Surfaces), null, Status.Hacked, 1.5);
}

rule: "Zenyatta: Stress Relief"
Event.OngoingPlayer
Team.Team1
Player.Zenyatta
if (Talent1 == true)
if (IsFiringSecondary(EventPlayer()) == true)
{
	Wait(2, WaitBehavior.AbortWhenFalse);
	PlayEffect(EventPlayer(), PlayEffect.ExplosionSound, Color.Black, EventPlayer(), 150);
	Damage_Dealt += 50;
	Wait(0.75, WaitBehavior.IgnoreCondition);
	Damage_Dealt -= 50;
}

rule: "Zenyatta: Perfect Balance"
Event.OngoingPlayer
Team.Team1
Player.Zenyatta
if (IsUsingUltimate(EventPlayer()) == true)
if (Talent2 == true)
{
	StartDamageOverTime(PlayersWithinRadius(EventPlayer(), 12, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 1, 100);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Orange, EventPlayer(), 24);
	Wait(1, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Orisa- Spinning Shreddies"
Event.OngoingPlayer
Team.Team1
Player.Orisa
if (Talent1 == true)
if (IsUsingAbility2(EventPlayer()) == true)
{
	while (IsUsingAbility2(EventPlayer()))
	{
		CreateProjectile(ProjectileType.OrisaFusionDriver, EventPlayer(), EyePosition(EventPlayer()) + WorldVectorOf(Vector(RandomReal(-0.8, 0.8), RandomReal(-0.8, -0.8), 0), EventPlayer(), LocalVector.Rotation), null, Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 25, 2, 0, PlayEffect.GoodExplosion, PlayEffect.ExplosionSound, 0, 60, 2, 10, 1, 0);
		Wait(0.02, WaitBehavior.IgnoreCondition);
	}
	CreateProjectile(ProjectileType.OrisaFusionDriver, EventPlayer(), null, null, Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 80, 2, 0, PlayEffect.GoodExplosion, PlayEffect.ExplosionSound, 0.15, 60, 2, 20, 1, 0);
}

rule: "Orisa: metalhead"
Event.PlayerDealtKnockback
Team.Team1
Player.Orisa
if (EventAbility() == Button.SecondaryFire)
if (Talent2 == true)
{
	Damage(PlayersWithinRadius(Victim(), 6, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 50);
	ApplyImpulse(RemoveFromArray(PlayersWithinRadius(Victim(), 6, Team.Team2, RadiusLOS.Surfaces), Victim()), DirectionTowards(Victim(), EventPlayer()), -15, Relative.ToWorld, ContraryMotion.Cancel);
	ApplyImpulse(RemoveFromArray(PlayersWithinRadius(Victim(), 6, Team.Team2, RadiusLOS.Surfaces), Victim()), Up(), 2, Relative.ToWorld, ContraryMotion.Cancel);
	SetStatus(PlayersWithinRadius(Victim(), 6, Team.Team2, RadiusLOS.Surfaces), null, Status.Stunned, 1.2);
}

rule: "Sigma: Accretion Disk"
Event.OngoingPlayer
Team.Team1
Player.Sigma
if (Talent1 == true)
if (IsUsingAbility2(EventPlayer()) == true)
{
	SetProjectileSpeed(EventPlayer(), 150);
	SetProjectileGravity(EventPlayer(), 0);
	WaitUntil(!Talent1 || !IsUsingAbility2(EventPlayer()), 5);
	SetProjectileSpeed(EventPlayer(), 100);
	SetProjectileGravity(EventPlayer(), 100);
}

rule: "Sigma: Accretion Disk"
Event.PlayerDealtKnockback
Team.Team1
Player.Sigma
{
	AbortIf(!Talent1);
	AbortIf(EventAbility() != Button.Ability2);
	AbortIf(Victim() == EventPlayer());
	SetStatus(Victim(), EventPlayer(), Status.KnockedDown, 1.5);
	Damage(Victim(), EventPlayer(), EventDamage() * 0.75);
}

rule: "Sigma: String Theory"
Event.OngoingPlayer
Team.Team1
Player.Sigma
if (Talent2 == true)
if (IsUsingAbility1(EventPlayer()) == true)
{
	Wait(1.8, WaitBehavior.AbortWhenFalse);
	Ability_Projectile1 = EyePosition(EventPlayer());
	Ability_End = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * 50, AllPlayers(Team.Team2), EventPlayer(), true);
	ChaseVariableAtRate(Ability_Projectile1, Ability_End, 40, RateChaseReevaluation.DestinationAndRate);
	CreateEffect(AllPlayers(Team.All), Effect.Sphere, Color.Violet, Ability_Projectile1, 0.6, EffectRev.VisibleToPositionAndRadius);
	Effects_[1] = LastCreatedEntity();
	CreateEffect(AllPlayers(Team.All), Effect.GoodAura, Color.Violet, Ability_Projectile1, 0.6, EffectRev.VisibleToPositionAndRadius);
	Effects_[2] = LastCreatedEntity();
	Wait(0.25, WaitBehavior.IgnoreCondition);
	Ability_Countdown = HealthOfType(EventPlayer(), HealthType.Shields);
	WaitUntil(!Talent2 || Ability_Projectile1 == Ability_End, 5);
	StopChasingVariable(Ability_Projectile1);
	DestroyEffect(Effects_[1]);
	DestroyEffect(Effects_[2]);
	Damage(PlayersWithinRadius(Ability_Projectile1, Min(10, 1.5 + Ability_Countdown * 0.017), Team.Team2, RadiusLOS.Off), EventPlayer(), Min(200, 100 + Ability_Countdown / 5));
	PlayEffect(AllPlayers(Team.All), PlayEffect.DebuffImpactSound, Color.Violet, Ability_Projectile1, 150);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Violet, Ability_Projectile1, Min(10, 1.5 + Ability_Countdown * 0.017));
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Purple, Ability_Projectile1, Min(10, 1.5 + Ability_Countdown * 0.017));
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Violet, Ability_Projectile1, Min(20, 3 + Ability_Countdown * 0.017));
}

rule: "Ashe: Black Gunpowder"
Event.PlayerDealtKnockback
Team.Team1
Player.Ashe
if (Talent1 == true)
if (EventAbility() == Button.Ability1)
if (Victim() != EventPlayer())
{
	StartDamageOverTime(Victim(), EventPlayer(), 3, EventDamage() * 2.5);
	SetStatus(Victim(), null, Status.Burning, 3);
}

rule: "Ashe: Dancing Flames"
Event.OnElimination
Team.Team1
Player.Ashe
if (Talent2 == true)
{
	PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.Orange, EyePosition(Victim()), 120);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Orange, Victim(), 5);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadPickupEffect, Color.Yellow, Victim(), 5);
	StartDamageOverTime(PlayersWithinRadius(Victim(), 5, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 3, 15);
	SetStatus(PlayersWithinRadius(Victim(), 5, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), Status.Burning, 3);
	Damage(PlayersWithinRadius(Victim(), 5, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 30);
}

rule: "Widowmaker: Widowmaker Ult"
Event.OngoingPlayer
Team.Team1
Player.Widowmaker
if (IsUsingUltimate(EventPlayer()) == true)
{
	AllPlayers(Team.Team2).Slowed_until = 9999 + TotalTimeElapsed();
	WaitUntil(!IsUsingUltimate(EventPlayer()), 9999);
	AllPlayers(Team.Team2).Slowed_until = TotalTimeElapsed();
}

rule: "Widowmaker: Baiser De Soie"
Event.OnDamageDealt
Team.Team1
Player.Widowmaker
{
	AbortIf(!Talent1);
	AbortIf(EventAbility() != Button.PrimaryFire);
	AbortIf(!IsFiringSecondary(EventPlayer()));
	AbortIf(!EventWasCriticalHit());
	AbortIf(NormalizedHealth(Victim()) > 0.3);
	AbortIf(Victim().is_living_boss);
	AbortIf(Victim().iv_is_portal);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadPickupEffect, Color.Violet, Victim(), 3);
	Damage(Victim(), EventPlayer(), 10000);
	Damage(PlayersWithinRadius(Victim(), 3, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), EventDamage());
}

rule: "Widowmaker: Parting Gift"
Event.OngoingPlayer
Team.Team1
Player.Widowmaker
if (Talent2 == true)
if (IsUsingAbility1(EventPlayer()) == true)
if (SpeedOf(EventPlayer()) >= 20)
{
	while (IsUsingAbility1(EventPlayer()))
	{
		CreateProjectile(ProjectileType.RamattraRavenousVortexSphere, EventPlayer(), null, Up(), Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 50, 2, 4, PlayEffect.RingExplosion, PlayEffect.ExplosionSound, 0.05, 15, 3, 8, 1, 100);
		Wait(0.15, WaitBehavior.IgnoreCondition);
	}
	for (p_i = 0; 4; 1)
	{
		Wait(0.15, WaitBehavior.IgnoreCondition);
		CreateProjectile(ProjectileType.RamattraRavenousVortexSphere, EventPlayer(), null, Up(), Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 50, 2, 4, PlayEffect.RingExplosion, PlayEffect.ExplosionSound, 0.05, 15, 3, 8, 1, 100);
	}
}

rule: "Torbjorn: Heatwave"
Event.OngoingPlayer
Team.Team1
Player.Torbjorn
if (Talent1 == true)
if ((IsUsingAbility2(EventPlayer()) || IsUsingUltimate(EventPlayer())) == true)
{
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Orange, PositionOf(EventPlayer()), 11);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Orange, PositionOf(EventPlayer()), 12);
	StartDamageOverTime(RemoveFromArray(PlayersWithinRadius(EventPlayer(), 6, Team.Team2, RadiusLOS.Surfaces), EventPlayer()), EventPlayer(), 3, 20);
	SetStatus(RemoveFromArray(PlayersWithinRadius(EventPlayer(), 6, Team.Team2, RadiusLOS.Surfaces), EventPlayer()), EventPlayer(), Status.Burning, 3);
	Damage(PlayersWithinRadius(EventPlayer(), 6, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 15);
	Wait(0.75, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "[Torbjorn] Foundry"
Event.OnDamageDealt
Team.Team1
Player.Torbjorn
{
	AbortIf(!Talent2);
	AbortIf(EventAbility() != Button.PrimaryFire);
	AbortIf(Weapon(EventPlayer()) != 2);
	AbortIf(DistanceBetween(EventPlayer(), Victim()) > 2.5);
	Damage(Victim(), EventPlayer(), EventDamage() * 0.4);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Orange, Victim(), 0.25);
}

rule: "[Torbjorn] Foundry - Bonus Speed"
Event.OngoingPlayer
Team.Team1
Player.Torbjorn
if (Talent2 == true)
if (Weapon(EventPlayer()) == 2)
{
	Move_Speed += 40;
	WaitUntil(Weapon(EventPlayer()) != 2 || IsDead(EventPlayer()) || !Talent2, 99999);
	Move_Speed -= 40;
}

rule: "Reinhardt: Fire Blast"
Event.OnDamageDealt
Team.Team1
Player.Reinhardt
{
	AbortIf(!Talent1);
	AbortIf(EventAbility() != Button.Ability2);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Orange, Victim(), 5);
	StartDamageOverTime(PlayersWithinRadius(Victim(), 5, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 5, 20);
	SetStatus(PlayersWithinRadius(Victim(), 5, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), Status.Burning, 5);
}

rule: "Reinhardt: Epicenter"
Event.OngoingPlayer
Team.Team1
Player.Reinhardt
if (Talent2 == true)
if (IsUsingUltimate(EventPlayer()) == true)
if (IsOnGround(EventPlayer()) == true)
{
	SetStatus(PlayersWithinRadius(EventPlayer(), 20, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), Status.KnockedDown, 2.5);
	for (p_i = 0; 3; 1)
	{
		Wait(0.032, WaitBehavior.IgnoreCondition);
		Damage(PlayersWithinRadius(EventPlayer(), p_i * 10, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 50);
		PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Orange, PositionOf(EventPlayer()), p_i * 20);
	}
	Wait(5, WaitBehavior.IgnoreCondition);
}

rule: "Brigitte: Endeavor"
Event.OngoingPlayer
Team.Team1
Player.Brigitte
if (Talent1 == true)
if (Ability_Available == true)
{
	CreateEffect(AllPlayers(Team.All), Effect.EchoCloningEffect, Team.Team1, EventPlayer(), 0.4, EffectRev.VisibleToPositionAndRadius);
	Effects_[1] = LastCreatedEntity();
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Orange, EyePosition(EventPlayer()), 15);
	Heal(PlayersWithinRadius(EventPlayer(), 15, Team.Team1, RadiusLOS.Off), EventPlayer(), 200);
	Damage_Dealt += 150;
	Move_Speed += 75;
	AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, MaxHealth(EventPlayer()) / 3, false, true);
	HP_Pool[1] = LastCreatedHealthPool();
	Wait(1, WaitBehavior.IgnoreCondition);
	WaitUntil(!Talent1 || IsDead(EventPlayer()) || Ability_Available, 6);
	Damage_Dealt -= 150;
	Move_Speed -= 75;
	RemoveHealthPoolFromPlayer(HP_Pool[1]);
	DestroyEffect(Effects_[1]);
	Wait(0.1, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Brigitte: Endeavor"
Event.OngoingPlayer
Team.Team1
Player.Brigitte
if (Talent1 == true)
if (AbilityCooldown(EventPlayer(), Button.SecondaryFire) >= 0.1)
{
	Ability_Available = true;
	Wait(0.25, WaitBehavior.IgnoreCondition);
	Ability_Available = false;
}

rule: "Brigitte: Whiplash"
Event.PlayerDealtKnockback
Team.Team1
Player.Brigitte
if (Talent2 == true)
if (IsUsingAbility1(EventPlayer()) == true)
{
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosionSound, Color.Green, Victim(), 100);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Orange, Victim(), 2.5);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadPickupEffect, Color.Orange, Victim(), 2.5);
	Damage(PlayersWithinRadius(Victim(), 2.5, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 100);
	SetStatus(PlayersWithinRadius(Victim(), 2.5, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), Status.Stunned, 1.5);
}

rule: "Genji: Venomous Strike"
Event.OnDamageDealt
Team.Team1
Player.Genji
{
	AbortIf(!Talent1);
	AbortIf(EventAbility() != Button.Ability1);
	StartHealOverTime(EventPlayer(), EventPlayer(), 3, 15);
	StartDamageOverTime(Victim(), EventPlayer(), 3, 15);
	Heal(EventPlayer(), EventPlayer(), 5);
	Wait(0.25, WaitBehavior.RestartWhenTrue);
	Wait(2, WaitBehavior.IgnoreCondition);
}

rule: "Genji: Sharpened Storm - Primary"
Event.OngoingPlayer
Team.Team1
Player.Genji
if (Talent2 == true)
if (IsFiringPrimary(EventPlayer()) == true)
if (IsUsingUltimate(EventPlayer()) == false)
{
	Wait(0.25, WaitBehavior.IgnoreCondition);
	CreateProjectile(ProjectileType.GenjiShuriken, EventPlayer(), null, null, Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 27, 2, 0, PlayEffect.GoodExplosion, PlayEffect.ExplosionSound, 0, 60, 4, 0, 0, 0);
	Wait(0.1, WaitBehavior.IgnoreCondition);
	CreateProjectile(ProjectileType.GenjiShuriken, EventPlayer(), null, null, Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 27, 2, 0, PlayEffect.GoodExplosion, PlayEffect.ExplosionSound, 0, 60, 4, 0, 0, 0);
	Wait(0.1, WaitBehavior.IgnoreCondition);
	CreateProjectile(ProjectileType.GenjiShuriken, EventPlayer(), null, null, Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 27, 2, 0, PlayEffect.GoodExplosion, PlayEffect.ExplosionSound, 0, 60, 4, 0, 0, 0);
}

rule: "Genji: Sharpened Storm - Secondary"
Event.OngoingPlayer
Team.Team1
Player.Genji
if (Talent2 == true)
if (IsFiringSecondary(EventPlayer()) == true)
{
	MinWait();
	CreateProjectile(ProjectileType.GenjiShuriken, EventPlayer(), null, DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()) + 4.5, VerticalFacingAngleOf(EventPlayer())), Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 27, 2, 0, PlayEffect.GoodExplosion, PlayEffect.ExplosionSound, 0, 60, 4, 0, 0, 0);
	CreateProjectile(ProjectileType.GenjiShuriken, EventPlayer(), null, DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()) - 4.5, VerticalFacingAngleOf(EventPlayer())), Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 27, 2, 0, PlayEffect.GoodExplosion, PlayEffect.ExplosionSound, 0, 60, 4, 0, 0, 0);
	CreateProjectile(ProjectileType.GenjiShuriken, EventPlayer(), null, null, Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 27, 2, 0, PlayEffect.GoodExplosion, PlayEffect.ExplosionSound, 0, 60, 4, 0, 0, 0);
}

rule: "Mercy: Wings of Grand"
Event.OngoingPlayer
Team.Team1
Player.Mercy
if (Talent1 == true)
if (IsAlive(EventPlayer()) == true)
if (IsUsingAbility1(EventPlayer()) == true)
{
	if (SpeedOf(EventPlayer()) > 10)
	{
		Damage(FilteredArray(PlayersWithinRadius(EventPlayer(), 4, Team.Team2, RadiusLOS.Surfaces), !HasStatus(ArrayElement(), Status.KnockedDown)), EventPlayer(), 35);
		SetStatus(PlayersWithinRadius(EventPlayer(), 4, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), Status.KnockedDown, 0.8);
		ApplyImpulse(PlayersWithinRadius(EventPlayer(), 4, Team.Team2, RadiusLOS.Surfaces), Normalize(VelocityOf(EventPlayer())) + DirectionTowards(EventPlayer(), ThrottleOf(EventPlayer())) + Up() * 1.1, 7.5, Relative.ToWorld, ContraryMotion.Cancel);
		PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Yellow, PositionOf(EventPlayer()), 0.15);
	}
	Wait(0.25, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Mercy: Holy Light Missiles"
Event.OngoingPlayer
Team.Team1
Player.Mercy
if (Talent2 == true)
if (IsUsingUltimate(EventPlayer()) == true)
{
	CreateEffect(AllPlayers(Team.All), Effect.Orb, Color.Yellow, Ability_Projectile1, 1, EffectRev.VisibleToPositionAndRadius);
	Effects_[1] = LastCreatedEntity();
	Ability_Projectile1 = EyePosition(EventPlayer());
	ChaseVariableAtRate(Ability_Projectile1, Ability_End, 100, RateChaseReevaluation.DestinationAndRate);
	Ability_End = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * 60, AllLivingPlayers(Team.Team2), AllPlayers(Team.Team1), true);
	WaitUntil(!Talent2 || Ability_End == Ability_Projectile1, 1);
	DestroyEffect(Effects_[1]);
	StopChasingVariable(Ability_Countdown);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosionSound, Color.Green, Ability_Projectile1, 100);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Yellow, Ability_Projectile1, 6);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodPickupEffect, Color.White, Ability_Projectile1, 6);
	Damage(PlayersWithinRadius(Ability_Projectile1, 6, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 150);
	Heal(PlayersWithinRadius(Ability_Projectile1, 6, Team.Team1, RadiusLOS.Surfaces), EventPlayer(), 150);
	Wait(1.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Tracer: Vortex"
Event.OngoingPlayer
Team.Team1
Player.Tracer
if (IsUsingAbility2(EventPlayer()) == true)
if (Talent1 == true)
{
	Heal(PlayersWithinRadius(EventPlayer(), 10, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 1);
	Damage(PlayersWithinRadius(EventPlayer(), 10, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 25);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Red, PositionOf(EventPlayer()), 20);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Yellow, PositionOf(EventPlayer()), 18);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Green, PositionOf(EventPlayer()), 16);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Aqua, PositionOf(EventPlayer()), 14);
	SetEnvironmentCreditPlayer(PlayersWithinRadius(EventPlayer(), 10, Team.Team2, RadiusLOS.Surfaces), EventPlayer());
}

rule: "Tracer: Vortex 2"
Event.OnHealingTaken
Team.Team2
{
	AbortIf(!Healer().Talent1);
	AbortIf(is_living_boss);
	AbortIf(!IsUsingAbility2(Healer()));
	DisableMovementCollisionWithPlayers(EventPlayer());
	ApplyImpulse(EventPlayer(), Up(), 3, Relative.ToWorld, ContraryMotion.Cancel);
	SetGravity(EventPlayer(), false);
	Wait(0.05, WaitBehavior.IgnoreCondition);
	ApplyImpulse(EventPlayer(), DirectionTowards(EventPlayer(), Healer()), DistanceBetween(EventPlayer(), Healer()) * 3.4, Relative.ToWorld, ContraryMotion.Cancel);
	SetStatus(EventPlayer(), null, Status.Rooted, 1);
	Wait(0.23, WaitBehavior.IgnoreCondition);
	SetGravity(EventPlayer(), 100);
	EnableMovementCollisionWithPlayers(EventPlayer());
	Cancel_Momentum();
}

rule: "Tracer: Chain Reaction"
Event.OngoingPlayer
Team.Team2
if (IsTrueForAny(FilteredArray(AllLivingPlayers(Team.Team2), ArrayElement().Chain_Reaction_On), DistanceBetween(EventPlayer(), ArrayElement()) <= 7) == true)
if (Chain_Reaction_Immune == false)
if (Chain_Reaction_On == false)
if (IsAlive(EventPlayer()) == true)
{
	Wait(0.25, WaitBehavior.IgnoreCondition);
	Chain_Reaction_On = true;
}

rule: "Tracer: Chain Reaction 2"
Event.OngoingPlayer
Team.Team2
if (Chain_Reaction_On == true)
{
	Wait(0.1, WaitBehavior.IgnoreCondition);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Aqua, EventPlayer(), 3);
	//Damage(EventPlayer(), PlayersOnHero(Hero.Tracer, Team.Team1), 200);
	# Picks the first person on tracer (bad)
	Damage(EventPlayer(), PlayersOnHero(Hero.Tracer, Team.Team1)[0], 200);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	Chain_Reaction_Immune = true;
	Chain_Reaction_On = false;
	Wait(2, WaitBehavior.IgnoreCondition);
	Chain_Reaction_Immune = false;
}

rule: "Tracer: Chain Reaction 3"
Event.OnDamageDealt
Team.Team1
Player.Tracer
{
	AbortIf(!Talent2);
	AbortIf(EventAbility() != Button.Ultimate);
	AbortIf(EventDamage() <= 20);
	Victim().Chain_Reaction_On = true;
}

rule: "Symmetra: Sentry Paragon"
Event.OngoingPlayer
Team.Team1
Player.Symmetra
if (Talent1 == true)
if (IsAlive(EventPlayer()) == true)
{
	Wait(0.5, WaitBehavior.AbortWhenFalse);
	StartDamageModification(AllPlayers(Team.Team2), EventPlayer(), 66.667, DamageModificationRev.ReceiversDamagersAndDamagePercent);
	damage_mod[1] = LastDamageModificationID();
	Damage_Dealt += 50;
	WaitUntil(!Talent1 || IsDead(EventPlayer()), 99999);
	Damage_Dealt -= 50;
	StopDamageModification(damage_mod[1]);
	Wait(0.1, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Symmetra: Shield Generator"
Event.OnFinalBlow
Team.Team1
Player.Symmetra
if (Talent2 == true)
{
	Damage_Dealt += 30;
	Move_Speed += 30;
	AddHealthPoolToPlayer(AllPlayers(Team.Team1), HealthType.Shields, Min(200, MaxHealth(EventPlayer()) * 0.25), false, false);
	HP_Pool[6] = LastCreatedHealthPool();
	CreateEffect(AllPlayers(Team.All), Effect.AnaNanoBoostedEffect, Color.Team1, EventPlayer(), 1, EffectRev.VisibleToPositionAndRadius);
	Effects_[1] = LastCreatedEntity();
	WaitUntil(!Talent2 || IsDead(EventPlayer()), 10);
	DestroyEffect(Effects_[1]);
	RemoveHealthPoolFromPlayer(HP_Pool[6]);
	Damage_Dealt -= 30;
	Move_Speed -= 30;
}

rule: "[Hanzo] Arrow Rain"
Event.OngoingPlayer
Team.Team1
Player.Hanzo
if (Talent1 == true)
if (IsFiringPrimary(EventPlayer()) == true)
if (IsUsingAbility2(EventPlayer()) == true)
{
	for (p_i = 0; 2; 1)
	{
		CreateProjectile(ProjectileType.MeiIcicle, EventPlayer(), EyePosition(EventPlayer()) + Down() * 0.5, DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()) + RandomReal(-2, 2), VerticalFacingAngleOf(EventPlayer()) + RandomReal(-2, 2)), Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 70, 2, 0, PlayEffect.BadExplosion, PlayEffect.ExplosionSound, 0, 110, 5, 0, 1, 5);
		CreateProjectile(ProjectileType.MeiIcicle, EventPlayer(), EyePosition(EventPlayer()) + Down() * 0.5, DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()) + RandomReal(-2, 2), VerticalFacingAngleOf(EventPlayer()) + RandomReal(-2, 2)), Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 70, 2, 0, PlayEffect.BadExplosion, PlayEffect.ExplosionSound, 0, 110, 5, 0, 1, 5);
	}
}

rule: "Hanzo: Stormbreak"
Event.OnFinalBlow
Team.Team1
Player.Hanzo
if (Talent2 == true)
{
	Ability_Countdown = 4;
	ChaseVariableAtRate(Ability_Countdown, 0, 1, RateChaseReevaluation.DestinationAndRate);
}

rule: "Hanzo: Stormbreak - Boost"
Event.OngoingPlayer
Team.Team1
Player.Hanzo
if (Talent2 == true)
if (Ability_Countdown > 0)
{
	CreateEffect(AllPlayers(Team.All), Effect.WinstonPrimalRageEffect, Color.Team1, EventPlayer(), 1, EffectRev.VisibleToPositionAndRadius);
	Effects_[1] = LastCreatedEntity();
	WaitUntil(IsDead(EventPlayer()) || !Ability_Countdown || !Talent2, 99999);
	Ability_Countdown = false;
	DestroyEffect(Effects_[1]);
	StopChasingVariable(Ability_Countdown);
}

rule: "Hanzo: Stormbreak - Reset Cooldowns For Storm Arrows"
Event.OngoingPlayer
Team.Team1
Player.Hanzo
if (Ability_Countdown > 0)
if (AbilityCooldown(EventPlayer(), Button.Ability2) > 0)
{
	SetAbilityCooldown(EventPlayer(), Button.Ability2, false);
}

rule: "Echo: Bomber Jacket"
Event.OngoingPlayer
Team.Team1
Player.Echo
if (Talent1 == true)
if (IsUsingAbility1(EventPlayer()) == true)
{
	CreateHomingProjectile(ProjectileType.EchoStickyBomb, EventPlayer(), EyePosition(EventPlayer()) + WorldVectorOf(Vector(-0.5, false, false), EventPlayer(), LocalVector.Rotation), Down(), Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 30, 1, 1.5, PlayEffect.RingExplosion, PlayEffect.ExplosionSound, 0, 20, 5, 0, FirstOf(SortedArray(FilteredArray(AllPlayers(Team.Team2), IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock) && ArrayElement().is_alive), DistanceBetween(EventPlayer(), ArrayElement()))), 1);
	CreateHomingProjectile(ProjectileType.EchoStickyBomb, EventPlayer(), EyePosition(EventPlayer()) + WorldVectorOf(Vector(0.5, false, false), EventPlayer(), LocalVector.Rotation), Down(), Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 30, 1, 1.5, PlayEffect.RingExplosion, PlayEffect.ExplosionSound, 0, 20, 5, 0, FirstOf(SortedArray(FilteredArray(AllPlayers(Team.Team2), IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock) && ArrayElement().is_alive), DistanceBetween(EventPlayer(), ArrayElement()))), 1);
	Wait(0.25, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Echo: Focusing Optics"
Event.OnDamageDealt
Team.Team1
Player.Echo
{
	AbortIf(!Talent2);
	AbortIf(EventAbility() != Button.Ability2);
	AbortIf(IsDuplicating(EventPlayer()));
	AbortIf(NormalizedHealth(Victim()) <= 0.5);
	AbortIf(NormalizedHealth(Victim()) > 0.9);
	Damage(Victim(), EventPlayer(), EventDamage() * 3);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Violet, Victim(), 0.5);
}

rule: "[Lucio] Chord Cadence"
Event.OngoingPlayer
Team.Team1
Player.Lucio
if (Talent1 == true)
if (IsUsingAbility2(EventPlayer()) == true)
{
	WaitUntil(!IsUsingAbility2(EventPlayer()), 4);
	SetAbilityCooldown(EventPlayer(), Button.Ability2, 0);
	AbortIf(IsDead(EventPlayer()));
	CancelPrimaryAction(EventPlayer());
	PressButton(EventPlayer(), Button.Ability2);
	Wait(4, WaitBehavior.IgnoreCondition);
}

rule: "[Lucio] Chord Cadence burstfire"
Event.OngoingPlayer
Team.Team1
Player.Lucio
if (Talent1 == true)
if (IsFiringPrimary(EventPlayer()) == true)
if (IsUsingAbility2(EventPlayer()) == true)
{
	for (p_i = 0; 4; 1)
	{
		CreateProjectile(ProjectileType.LucioSonicAmplifier, EventPlayer(), EyePosition(EventPlayer()) + Down() * 0.5, DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()) + RandomReal(-1, 1), VerticalFacingAngleOf(EventPlayer()) + RandomReal(-1, 1)), Relative.ToWorld, ModifyHealthType.Damage, OppositeTeamOf(TeamOf(EventPlayer())), 20, 2, 0, PlayEffect.BadExplosion, PlayEffect.ExplosionSound, 0, 50, 5, 0, 0, 0);
		CreateProjectile(ProjectileType.LucioSonicAmplifier, EventPlayer(), EyePosition(EventPlayer()) + Down() * 0.5, DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()) + RandomReal(-1, 1), VerticalFacingAngleOf(EventPlayer()) + RandomReal(-1, 1)), Relative.ToWorld, ModifyHealthType.Damage, OppositeTeamOf(TeamOf(EventPlayer())), 20, 2, 0, PlayEffect.BadExplosion, PlayEffect.ExplosionSound, 0, 50, 5, 0, 0, 0);
		if (!IsFiringPrimary(EventPlayer()))
		{
			break;
		}
		Wait(0.04, WaitBehavior.IgnoreCondition);
	}
	Wait(0.05, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Lucio: Reverse Amp"
Event.OngoingPlayer
Team.Team1
Player.Lucio
if (IsUsingAbility2(EventPlayer()) == true)
if (Talent2 == true)
{
	if (IsUsingAbility1(EventPlayer()))
	{
		SetStatus(PlayersWithinRadius(EventPlayer(), 12, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), Status.Rooted, 0.75);
	}
	else
	{
		Damage(PlayersWithinRadius(EventPlayer(), 12, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 30);
		Wait(0.5, WaitBehavior.IgnoreCondition);
		LoopIfConditionIsTrue();
	}
}

rule: "D.Va: Voltage Grid"
Event.OngoingPlayer
Team.Team1
Player.Dva
if (IsFiringSecondary(EventPlayer()) == true)
if (Talent1 == true)
{
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Turquoise, EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * 2, 0.15);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Turquoise, EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * 5, 0.15);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Turquoise, EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * 8, 0.15);
	Wait(0.3, WaitBehavior.IgnoreCondition);
	Damage(PlayersWithinRadius(EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * 2, 2.5, Team.Team2, RadiusLOS.Off), EventPlayer(), 20);
	Damage(PlayersWithinRadius(EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * 5, 2.5, Team.Team2, RadiusLOS.Off), EventPlayer(), 20);
	Damage(PlayersWithinRadius(EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * 8, 2.5, Team.Team2, RadiusLOS.Off), EventPlayer(), 20);
	SetStatus(PlayersWithinRadius(EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * 2, 2.5, Team.Team2, RadiusLOS.Off), EventPlayer(), Status.Rooted, 0.4);
	SetStatus(PlayersWithinRadius(EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * 5, 2.5, Team.Team2, RadiusLOS.Off), EventPlayer(), Status.Rooted, 0.4);
	SetStatus(PlayersWithinRadius(EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * 8, 2.5, Team.Team2, RadiusLOS.Off), EventPlayer(), Status.Rooted, 0.4);
	LoopIfConditionIsTrue();
}

rule: "D.Va: Shooting Star"
Event.PlayerDealtKnockback
Team.Team1
Player.Dva
if (EventAbility() == Button.Ability1)
if (Talent2 == true)
{
	Damage(Victim(), EventPlayer(), 30);
	SetStatus(Victim(), null, Status.Burning, 3);
	StartDamageOverTime(Victim(), EventPlayer(), 3, 35);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Red, Victim(), 1);
}

rule: "Zarya- Combusta-bubble - Detect Barrier Target"
Event.OngoingPlayer
Team.Team1
Player.Zarya
if (Talent1 == true)
if (IsUsingAbility2(EventPlayer()) == true)
{
	Wait(0.025, WaitBehavior.IgnoreCondition);
	Ability_End = FirstOf(FilteredArray(PlayersWithinRadius(EventPlayer(), 30, Team.Team1, RadiusLOS.Surfaces), HasStatus(ArrayElement(), Status.Invincible) && IsAlive(ArrayElement()) && IsInViewAngle(EventPlayer(), ArrayElement(), 103)));
	WaitUntil(!IsUsingAbility2(EventPlayer()), 2);
	PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.Orange, Ability_End, 120);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Orange, EyePosition(Ability_End), 6);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadPickupEffect, Color.Yellow, EyePosition(Ability_End), 6);
	Damage(PlayersWithinRadius(EyePosition(Ability_End), 6, Team.Team2, RadiusLOS.Surfaces), Ability_End, 100);
}

rule: "Zarya- Combusta-Bubble - Self bubble"
Event.OngoingPlayer
Team.Team1
Player.Zarya
if (Talent1 == true)
if (IsUsingAbility1(EventPlayer()) == true)
{
	Wait(0.1, WaitBehavior.AbortWhenFalse);
	WaitUntil(!IsUsingAbility1(EventPlayer()), 2);
	PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.Orange, EventPlayer(), 120);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Orange, EyePosition(EventPlayer()), 6);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadPickupEffect, Color.Yellow, EyePosition(EventPlayer()), 6);
	Damage(PlayersWithinRadius(EventPlayer(), 6, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 100);
}

rule: "Zarya- Power Surge"
Event.OngoingPlayer
Team.Team1
Player.Zarya
if (Talent2 == true)
if (IsUsingAbility1(EventPlayer()) == true)
{
	AbortIf(!HasStatus(EventPlayer(), Status.Invincible));
	Damage(EventPlayer(), null, 10000);
	Wait(0.1, WaitBehavior.IgnoreCondition);
	SetAbilityCooldown(EventPlayer(), Button.Ability1, false);
	PressButton(EventPlayer(), Button.Ability1);
	Wait(3, WaitBehavior.IgnoreCondition);
}

rule: "Pharah: Head Trauma"
Event.PlayerDealtKnockback
Team.Team1
Player.Pharah
if (Talent1 == true)
if (EventAbility() == Button.Ability2)
if (Victim().iv_is_portal == false)
if (Victim() != EventPlayer())
{
	Damage(Victim(), EventPlayer(), 60);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Gray, Victim(), 1);
	AbortIf(NormalizedHealth(Victim()) > 0.5);
	SetStatus(Victim(), null, Status.Hacked, 1);
}

rule: "[Pharah] Weaponized Storm"
Event.OngoingPlayer
Team.Team1
Player.Pharah
if (Talent2 == true)
if (IsFiringPrimary(EventPlayer()) == true)
if (Ammo(EventPlayer(), false) % 6 == false)
{
	SetProjectileSpeed(EventPlayer(), 125);
	Ability_End = RayCastHitPosition(EyePosition(EventPlayer()), EyePosition(EventPlayer()) + FacingDirectionOf(EventPlayer()) * 100, AllLivingPlayers(Team.All), EventPlayer(), true);
	Ability_Projectile1 = EyePosition(EventPlayer());
	CreateEffect(AllPlayers(Team.All), Effect.BadAura, Color.Orange, Ability_Projectile1, 1, EffectRev.VisibleToPositionAndRadius);
	Effects_[7] = LastCreatedEntity();
	ChaseVariableAtRate(Ability_Projectile1, Ability_End, 35, RateChaseReevaluation.DestinationAndRate);
	WaitUntil(!Talent2 || Ability_Projectile1 == Ability_End, 99999);
	DestroyEffect(Effects_[7]);
	for (p_i = 0; 6; 1)
	{
		PlayEffect(AllPlayers(Team.All), PlayEffect.BadPickupEffect, Color.Orange, Ability_Projectile1 + Vector(RandomReal(-1.5, 1.5), RandomReal(-0.5, 0.5), RandomReal(-1.5, 1.5)), 1);
		PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.Team1, Ability_Projectile1, 25);
		Damage(PlayersWithinRadius(Ability_Projectile1, 4, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 20);
		Wait(0.1, WaitBehavior.IgnoreCondition);
	}
	SetProjectileSpeed(EventPlayer(), 100);
	StopChasingVariable(Ability_Projectile1);
}

rule: "Junkrat: Pyromania"
Event.PlayerDealtKnockback
Team.Team1
Player.Junkrat
{
	AbortIf(!Talent1);
	AbortIf(EventAbility() == Button.Melee);
	AbortIf(Victim() == EventPlayer());
	StartDamageOverTime(Victim(), EventPlayer(), 2, 20);
	SetStatus(Victim(), null, Status.Burning, 2);
}

rule: "Junkrat: Trigger Happy"
Event.OngoingPlayer
Team.Team1
Player.Junkrat
if (Talent2 == true)
if (AbilityCharge(EventPlayer(), Button.Ability1) < 5)
{
	Wait(4, WaitBehavior.AbortWhenFalse);
	SetAbilityCharge(EventPlayer(), Button.Ability1, AbilityCharge(EventPlayer(), Button.Ability1) + 1);
	LoopIfConditionIsTrue();
}

rule: "Roadhog: Stench"
Event.OngoingPlayer
Team.Team1
Player.Roadhog
if (Talent1 == true)
if (IsAlive(EventPlayer()) == true)
{
	CreateEffect(AllPlayers(Team.All), Effect.Ring, Color.Violet, EventPlayer(), 8, EffectRev.VisibleToPositionAndRadius);
	Effects_[1] = LastCreatedEntity();
	WaitUntil(!Talent1 || IsDead(EventPlayer()), 99999);
	DestroyEffect(Effects_[1]);
	Wait(0.1, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Roadhog: Stench effect"
Event.OngoingPlayer
Team.Team1
Player.Roadhog
if (DistanceBetween(EventPlayer(), ClosestPlayerTo(EventPlayer(), Team.Team2)) <= 8)
if (Talent1 == true)
{
	Damage(PlayersWithinRadius(EventPlayer(), 8, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 9);
	Wait(0.4, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Roadhog: Chainsnap"
Event.OngoingPlayer
Team.Team1
Player.Roadhog
if (Talent2 == true)
if (IsUsingAbility1(EventPlayer()) == true)
{
	Damage_Dealt += 400;
	WaitUntil(!Talent2 || !IsUsingAbility1(EventPlayer()), 99999);
	Damage_Dealt -= 400;
	Wait(0.1, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Roadhog: Chainsnap - Reset cooldown"
Event.OnElimination
Team.Team1
Player.Roadhog
if (Talent2 == true)
{
	WaitUntil(!IsUsingAbility1(EventPlayer()), 3);
	SetAbilityCooldown(EventPlayer(), Button.Ability1, false);
}

rule: "Moira: Flourish"
Event.OngoingPlayer
Team.Team1
Player.Moira
if (IsUsingAbility1(EventPlayer()) == true)
if (Talent1 == true)
{
	StartDamageOverTime(PlayersWithinRadius(EventPlayer(), 3, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 2, 25);
	StartHealOverTime(PlayersWithinRadius(EventPlayer(), 3, Team.Team1, RadiusLOS.Surfaces), EventPlayer(), 2, 40);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Black, PositionOf(EventPlayer()), 6);
	Wait(0.2, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "[Moira] Catalyst -"
Event.OngoingPlayer
Team.Team1
Player.Moira
if (Talent2 == true)
if (IsUsingUltimate(EventPlayer()) == true)
if (IsButtonHeld(EventPlayer(), Button.PrimaryFire) == true)
if (AbilityResource(EventPlayer(), Button.PrimaryFire) > 8)
{
	Damage_Dealt += 300;
	healing_dealt_percent += 300;
	Move_Speed -= 40;
	WaitUntil(!IsButtonHeld(EventPlayer(), Button.PrimaryFire) || !Talent2 || !IsUsingUltimate(EventPlayer()), 8);
	Damage_Dealt -= 300;
	Move_Speed += 40;
	healing_dealt_percent -= 300;
	Wait(0.25, WaitBehavior.IgnoreCondition);
}

rule: "[Moira] Catalyst -"
Event.OngoingPlayer
Team.Team1
Player.Moira
if (Talent2 == true)
if (IsUsingUltimate(EventPlayer()) == true)
if (IsButtonHeld(EventPlayer(), Button.PrimaryFire) == true)
if (AbilityResource(EventPlayer(), Button.PrimaryFire) > 8)
{
	SetAbilityResource(EventPlayer(), Button.PrimaryFire, AbilityResource(EventPlayer(), Button.PrimaryFire) - 15);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Purple, EyePosition(EventPlayer()), 10);
	Damage(PlayersWithinRadius(EyePosition(EventPlayer()), 5, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 35);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Mei: Cold Snap"
Event.OngoingPlayer
Team.Team1
Player.Mei
if (Talent1 == true)
if (IsUsingAbility1(EventPlayer()) == true)
{
	Wait(0.5, WaitBehavior.AbortWhenFalse);
	WaitUntil(!IsUsingAbility1(EventPlayer()), 99999);
	Damage(PlayersWithinRadius(EyePosition(EventPlayer()), 10, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 35);
	SetStatus(PlayersWithinRadius(EyePosition(EventPlayer()), 10, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), Status.Frozen, 2);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.SkyBlue, PositionOf(EventPlayer()), 20);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Aqua, PositionOf(EventPlayer()) + Vector(0, 1, false), 20);
}

rule: "[Mei] Fractical Strike"
Event.OngoingPlayer
Team.Team1
Player.Mei
if (Talent2 == true)
if (IsFiringSecondary(EventPlayer()) == true)
{
	Damage_Dealt -= 60;
	Wait(0.3, WaitBehavior.IgnoreCondition);
	Damage_Dealt += 60;
	AbortIfConditionIsFalse();
	for (p_i = 0; 5; 1)
	{
		CreateProjectile(ProjectileType.MeiIcicle, EventPlayer(), EyePosition(EventPlayer()) + WorldVectorOf(Vector(false, -0.25, false), EventPlayer(), LocalVector.Rotation), DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()) + RandomReal(-8, 8), VerticalFacingAngleOf(EventPlayer()) + RandomReal(-8, 8)), Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 75, 2, 0, PlayEffect.BadExplosion, PlayEffect.ExplosionSound, 0, 115, 5, 0, 0, 5);
		CreateProjectile(ProjectileType.MeiIcicle, EventPlayer(), EyePosition(EventPlayer()) + WorldVectorOf(Vector(false, -0.25, false), EventPlayer(), LocalVector.Rotation), DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()) + RandomReal(-8, 8), VerticalFacingAngleOf(EventPlayer()) + RandomReal(-8, 8)), Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 75, 2, 0, PlayEffect.BadExplosion, PlayEffect.ExplosionSound, 0, 115, 5, 0, 0, 5);
	}
}

rule: "[Winston] Next Generation"
Event.PlayerDealtKnockback
Team.Team1
Player.Winston
if (Talent1 == true)
if (EventAbility() == Button.Ultimate)
{
	SetUltimateCharge(EventPlayer(), UltimateChargePercent(EventPlayer()) + 5);
	Damage(Victim(), EventPlayer(), EventDamage());
}

rule: "[Winston] Quake"
Event.OngoingPlayer
Team.Team1
Player.Winston
if (Talent2 == true)
if (IsUsingAbility1(EventPlayer()) == true)
{
	Wait(0.25, WaitBehavior.IgnoreCondition);
	WaitUntil(IsOnGround(EventPlayer()), 99999);
	AbortIf(IsDead(EventPlayer()));
	Damage(PlayersWithinRadius(EventPlayer(), 7.5, Team.Team2, RadiusLOS.SurfacesAndAllBarriers), EventPlayer(), 30);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.White, PositionOf(EventPlayer()), 15);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Gray, PositionOf(EventPlayer()), 14);
	SetStatus(PlayersWithinRadius(EventPlayer(), 7.5, Team.Team2, RadiusLOS.SurfacesAndAllBarriers), EventPlayer(), Status.Stunned, 1);
}

rule: "Reaper: Wraith Wrath"
Event.OngoingPlayer
Team.Team1
Player.Reaper
if (IsUsingAbility1(EventPlayer()) == true)
if (Talent1 == true)
{
	Wait(0.1, WaitBehavior.AbortWhenFalse);
	CancelPrimaryAction(EventPlayer());
	CreateEffect(AllPlayers(Team.All), Effect.ReaperWraithFormEffect, Color.Team1, EventPlayer(), true, EffectRev.VisibleToPositionAndRadius);
	Effects_[1] = LastCreatedEntity();
	Damage_Dealt += 30;
	Move_Speed += 50;
	DisallowButton(EventPlayer(), Button.Ability1);
	SetStatus(EventPlayer(), null, Status.PhasedOut, 3);
	WaitUntil(IsDead(EventPlayer()) || !Talent1, 3);
	AllowButton(EventPlayer(), Button.Ability1);
	SetAbilityCooldown(EventPlayer(), Button.Ability1, 8);
	Damage_Dealt -= 30;
	Move_Speed -= 50;
	DestroyEffect(Effects_[1]);
}

rule: "Reaper: Loom"
Event.OngoingPlayer
Team.Team1
Player.Reaper
if (IsUsingAbility1(EventPlayer()) == true)
if (Talent2 == true)
{
	SetStatus(FilteredArray(PlayersInViewAngle(EventPlayer(), Team.Team2, 45), IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock)), EventPlayer(), Status.Hacked, 2);
	Damage(FilteredArray(PlayersInViewAngle(EventPlayer(), Team.Team2, 45), IsInLineOfSight(ArrayElement(), EventPlayer(), BarrierLOS.NoBarriersBlock)), EventPlayer(), 35);
}

rule: "[Sojourn] Thunderout Kicks"
Event.OngoingPlayer
Team.Team1
Player.Sojourn
if (Talent1 == true)
if (IsUsingAbility1(EventPlayer()) == true)
{
	Ability_Active = 1 + TotalTimeElapsed();
	WaitUntil(AbilityCooldown(EventPlayer(), Button.Ability1) > 1 || IsButtonHeld(EventPlayer(), Button.Jump), 1);
	AbortIf(Ability_Active < TotalTimeElapsed());
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Turquoise, PositionOf(EventPlayer()), 12);
	Damage(PlayersWithinRadius(EventPlayer(), 6, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 75);
}

rule: "Sojourn: Matter Splatter"
Event.OnDamageDealt
Team.Team1
Player.Sojourn
{
	AbortIf(!Talent2);
	AbortIf(EventAbility() != Button.SecondaryFire);
	AbortIf(!EventWasCriticalHit());
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Turquoise, EyePosition(Victim()), 4);
	Damage(PlayersWithinRadius(Victim(), 4, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), EventDamage());
}

rule: "Soldier76: Triple Threat"
Event.OngoingPlayer
Team.Team1
Player.Soldier76
if (Talent1 == true)
if (IsFiringSecondary(EventPlayer()) == true)
{
	CreateProjectile(ProjectileType.PharahRocket, EventPlayer(), null, DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()) + 4.5, VerticalFacingAngleOf(EventPlayer())), Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 60, 1, 2.5, PlayEffect.GoodExplosion, PlayEffect.RingExplosionSound, 0, 60, 4, 0, 0, 0);
	CreateProjectile(ProjectileType.PharahRocket, EventPlayer(), null, DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()) - 4.5, VerticalFacingAngleOf(EventPlayer())), Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 60, 1, 2.5, PlayEffect.GoodExplosion, PlayEffect.RingExplosionSound, 0, 60, 4, 0, 0, 0);
}

rule: "Soldier76: Triple Threat - Init rocket"
Event.OngoingPlayer
Team.Team1
Player.Soldier76
if (Talent1 == true)
{
	Ability_Projectile1 = Ability_Available;
	Ability_Countdown = Ability_End;
}

rule: "Soldier76: Espionage"
Event.OnHealingDealt
Team.Team1
Player.Soldier76
{
	AbortIf(!Talent2);
	AbortIf(EventAbility() != Button.Ability2);
	if (!Healee().soldier_espionage)
	{
		Healee().soldier_espionage = true;
	}
}

rule: "Soldier76: Espionage - Allies effect"
Event.OngoingPlayer
Team.Team1
if (soldier_espionage == true)
{
	soldier_espionage = false;
	if (downed_start_t && CountOf(revivers) > 0)
	{
		revive_timer += 20;
	}
	active_ab_is_smoked = true;
	Wait(0.4, WaitBehavior.IgnoreCondition);
}

rule: "Baptiste: Corrode"
Event.OngoingPlayer
Team.Team1
Player.Baptiste
if (IsUsingAbility1(EventPlayer()) == true)
if (Talent1 == true)
{
	for (p_i = 0; 3; 1)
	{
		PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Purple, PositionOf(EventPlayer()), 20);
		Damage(PlayersWithinRadius(EventPlayer(), 10, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 25);
		StartDamageOverTime(PlayersWithinRadius(EventPlayer(), 10, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 5, 30);
		Wait(0.2, WaitBehavior.IgnoreCondition);
	}
}

rule: "[Baptiste] Aerial Ace - Jump"
Event.OngoingPlayer
Team.Team1
Player.Baptiste
if (Talent2 == true)
if (IsCrouching(EventPlayer()) == true)
if (HasStatus(EventPlayer(), Status.Hacked) == false)
{
	WaitUntil(!IsCrouching(EventPlayer()), 9999);
	WaitUntil(IsJumping(EventPlayer()), 1);
	Ability_Available = true;
	Wait(0.25, WaitBehavior.IgnoreCondition);
	Damage_Dealt += 50;
	WaitUntil(IsOnGround(EventPlayer()), 99999);
	Ability_Available = false;
	Damage_Dealt -= 50;
}

rule: "[Baptiste] Aerial Ace - Slower fall"
Event.OngoingPlayer
Team.Team1
Player.Baptiste
if (Talent2 == true)
if (Ability_Available == true)
if (IsAlive(EventPlayer()) == true)
if (IsButtonHeld(EventPlayer(), Button.Jump) == true)
if ((HasStatus(EventPlayer(), Status.Stunned) && HasStatus(EventPlayer(), Status.Hacked)) == false)
if (AltitudeOf(EventPlayer()) >= 1)
if (VerticalSpeedOf(EventPlayer()) < 0)
{
	SetGravity(EventPlayer(), 7.5);
	Wait(0.333, WaitBehavior.IgnoreCondition);
	PlayEffect(AllPlayers(TeamOf(EventPlayer())), PlayEffect.RingExplosion, Color.Orange, PositionOf(EventPlayer()), 2);
	LoopIfConditionIsTrue();
	SetGravity(EventPlayer(), 100);
}

rule: "[Bastion]- Fusillade"
Event.OngoingPlayer
Team.Team1
Player.Bastion
if (Talent1 == true)
if (IsInAlternateForm(EventPlayer()) == true)
if (IsFiringPrimary(EventPlayer()) == true)
{
	Wait(0.5, WaitBehavior.AbortWhenFalse);
	while (IsFiringPrimary(EventPlayer()) && IsInAlternateForm(EventPlayer()))
	{
		CreateProjectile(ProjectileType.PharahRocket, EventPlayer(), EyePosition(EventPlayer()) + WorldVectorOf(Vector(RandomReal(-0.4, 0.4), RandomReal(-0.4, -0.4), 0), EventPlayer(), LocalVector.Rotation), null, Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 25, 1, 1.5, PlayEffect.GoodExplosion, PlayEffect.ExplosionSound, 0, 35, 2, 0, 0, 0);
		Wait(0.25, WaitBehavior.IgnoreCondition);
	}
}

rule: "[Bastion]: Trickshot"
Event.OnDamageDealt
Team.Team1
Player.Bastion
{
	AbortIf(!Talent2);
	AbortIf(EventAbility() != Button.SecondaryFire);
	AbortIf(EventDamage() > 30);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	SetAbilityCooldown(EventPlayer(), Button.SecondaryFire, AbilityCooldown(EventPlayer(), Button.SecondaryFire) - 3);
	Damage(PlayersWithinRadius(Victim(), 5, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 30);
	Heal(EventPlayer(), EventPlayer(), 50);
}

rule: "[Sombra] Stack Overflow"
Event.OngoingPlayer
Team.Team1
Player.Sombra
if (Talent1 == true)
if (IsUsingAbility1(EventPlayer()) == true)
{
	Wait(0.8, WaitBehavior.AbortWhenFalse);
	WaitUntil(IsButtonHeld(EventPlayer(), Button.PrimaryFire) || IsButtonHeld(EventPlayer(), Button.Ability1) || IsButtonHeld(EventPlayer(), Button.Ultimate) || IsButtonHeld(EventPlayer(), Button.Melee) || IsCommunicatingAnyEmote(EventPlayer()), 99999);
	CancelPrimaryAction(EventPlayer());
	CreateEffect(EventPlayer(), Effect.MercyDamageBoostedEffect, Color.Team1, EventPlayer(), 1, EffectRev.VisibleToPositionRadiusAndColor);
	Damage_Dealt += 50;
	Effects_[1] = LastCreatedEntity();
	Ability_Active = true;
	WaitUntil(IsDead(EventPlayer()) || !Talent1, 3);
	Damage_Dealt -= 50;
	DestroyEffect(Effects_[1]);
	Ability_Active = false;
}

rule: "[Sombra] Stack Overflow - melee"
Event.PlayerDealtKnockback
Team.Team1
Player.Sombra
if (Talent1 == true)
if (Ability_Active == true)
if (EventAbility() == Button.Melee)
{
	SetStatus(Victim(), EventPlayer(), Status.Stunned, 1);
	Damage(Victim(), EventPlayer(), 40);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, Color.Purple, Victim(), 0.25);
}

rule: "[Sombra] Cyberattack"
Event.OngoingPlayer
Team.Team1
Player.Sombra
if (Talent2 == true)
if (IsUsingAbility2(EventPlayer()) == true)
{
	WaitUntil(!IsUsingAbility2(EventPlayer()), 99999);
	AbortIf(IsButtonHeld(EventPlayer(), Button.Interact));
	AbortIf(IsDead(EventPlayer()));
	Wait(0.25, WaitBehavior.IgnoreCondition);
	Damage(PlayersWithinRadius(EventPlayer(), 8, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 50);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosionSound, Color.White, EyePosition(EventPlayer()), 20000);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Purple, EyePosition(EventPlayer()), 8);
	PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Violet, EyePosition(EventPlayer()), 16);
	SetStatus(PlayersWithinRadius(EyePosition(EventPlayer()), 8, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), Status.Hacked, 2);
}

rule: "Doomfist: Punch Card"
Event.OngoingPlayer
Team.Team1
Player.Doomfist
if (Talent1 == true)
if (IsFiringSecondary(EventPlayer()) == true)
{
	Wait(1, WaitBehavior.AbortWhenFalse);
	Damage_Dealt += 200;
	WaitUntil(AbilityCooldown(EventPlayer(), Button.SecondaryFire) > 0.1, 1);
	Damage_Dealt -= 200;
}

rule: "[Doomfist] Fire Quake - Use seismic slam"
Event.OngoingPlayer
Team.Team1
Player.Doomfist
if (Talent2 == true)
if (IsUsingAbility1(EventPlayer()) == true)
{
	Wait(0.5, WaitBehavior.IgnoreCondition);
	WaitUntil(IsOnGround(EventPlayer()) || !IsUsingAbility1(EventPlayer()), 1000);
	AbortIf(!IsUsingAbility1(EventPlayer()));
	for (p_i = -5; 5; 1)
	{
		CreateProjectile(ProjectileType.ReinhardtFireStrike, EventPlayer(), null, DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()) + p_i * 5, VerticalFacingAngleOf(EventPlayer())), Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 50, 1, 0, PlayEffect.GoodExplosion, PlayEffect.ExplosionSound, 0, 40, 4, 0, 0, 0);
		Wait(0.025, WaitBehavior.IgnoreCondition);
	}
	for (p_i = 5; -5; -1)
	{
		CreateProjectile(ProjectileType.ReinhardtFireStrike, EventPlayer(), null, DirectionFromAngles(HorizontalFacingAngleOf(EventPlayer()) + p_i * 5, VerticalFacingAngleOf(EventPlayer())), Relative.ToWorld, ModifyHealthType.Damage, Team.Team2, 50, 1, 0, PlayEffect.GoodExplosion, PlayEffect.ExplosionSound, 0, 40, 4, 0, 0, 0);
		Wait(0.025, WaitBehavior.IgnoreCondition);
	}
}

rule: "Cassidy: Standoff"
Event.OngoingPlayer
Team.Team1
Player.Cassidy
if (IsUsingUltimate(EventPlayer()) == true)
if (Talent1 == true)
{
	Wait(0.2, WaitBehavior.IgnoreCondition);
	Ability_Countdown = false;
	ChaseVariableAtRate(Ability_Countdown, 9999, 100, RateChaseReevaluation.DestinationAndRate);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	ChaseVariableAtRate(Ability_Countdown, 9999, 275, RateChaseReevaluation.DestinationAndRate);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	ChaseVariableAtRate(Ability_Countdown, 9999, 550, RateChaseReevaluation.DestinationAndRate);
}

rule: "Cassidy: Standoff - Set root"
Event.OngoingPlayer
Team.Team1
Player.Cassidy
if (IsUsingUltimate(EventPlayer()) == true)
if (Talent1 == true)
{
	Wait(0.2, WaitBehavior.IgnoreCondition);
	for (p_i = 0; 5; 1)
	{
		Wait(1, WaitBehavior.AbortWhenFalse);
		PlayEffect(EventPlayer(), PlayEffect.ExplosionSound, Color.White, EventPlayer(), 15);
		SetStatus(FilteredArray(PlayersInViewAngle(EventPlayer(), Team.Team2, 103), Health(ArrayElement()) <= Ability_Countdown && IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock)), EventPlayer(), Status.Rooted, 2);
	}
	StopChasingVariable(Ability_Countdown);
}

rule: "Cassidy: Flashpoint"
Event.OnDamageDealt
Team.Team1
Player.Cassidy
{
	AbortIf(!Talent2);
	AbortIf(EventAbility() != Button.Ability2);
	if (EventDamage() <= 25)
	{
		Wait(1.25, WaitBehavior.IgnoreCondition);
		Damage(PlayersWithinRadius(Victim(), 8, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 35);
		SetStatus(PlayersWithinRadius(Victim(), 8, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), Status.Stunned, 2);
	}
}

rule: "Wrecking Ball: Orbital Strike"
Event.OngoingPlayer
Team.Team1
Player.WreckingBall
if (Talent1 == true)
if (AbilityCooldown(EventPlayer(), Button.Crouch) >= 0.1)
{
	Ability_Countdown = AltitudeOf(EventPlayer()) * 10;
	Damage_Dealt += Ability_Countdown;
	WaitUntil(IsOnGround(EventPlayer()) || IsDead(EventPlayer()), 9999);
	Wait(1, WaitBehavior.IgnoreCondition);
	Damage_Dealt -= Ability_Countdown;
}

rule: "[Wrecking Ball] Orbital Strike"
Event.PlayerDealtKnockback
Team.Team1
Player.WreckingBall
{
	AbortIf(!Talent1);
	AbortIf(EventAbility() != Button.Crouch);
	SetStatus(Victim(), null, Status.Stunned, 1.1);
}

rule: "Wrecking Ball: Distort"
Event.OngoingPlayer
Team.Team1
Player.WreckingBall
if (Talent2 == true)
if (IsUsingAbility2(EventPlayer()) == true)
{
	for (p_i = false; 4; 1)
	{
		PlayEffect(AllPlayers(Team.All), PlayEffect.RingExplosion, Color.Purple, PositionOf(EventPlayer()), 20);
		Damage(PlayersWithinRadius(EventPlayer(), 10, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 25);
		SetStatus(PlayersWithinRadius(EventPlayer(), 10, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), Status.Hacked, 2);
		Wait(0.1, WaitBehavior.IgnoreCondition);
	}
}

rule: "[Queen] Shout Very Loudly"
Event.OngoingPlayer
Team.Team1
Player.JunkerQueen
if (Talent1 == true)
if (IsUsingAbility1(EventPlayer()) == true)
{
	StartDamageOverTime(RemoveFromArray(PlayersWithinRadius(EventPlayer(), 15, Team.Team2, RadiusLOS.Surfaces), EventPlayer()), EventPlayer(), 5, 8);
	StartHealOverTime(EventPlayer(), EventPlayer(), 5, 8 * CountOf(PlayersWithinRadius(EventPlayer(), 15, Team.Team2, RadiusLOS.Surfaces)));
}

rule: "[Queen] Grace Period"
Event.PlayerDealtKnockback
Team.Team1
Player.JunkerQueen
{
	AbortIf(!Talent2);
	AbortIf(EventAbility() != Button.SecondaryFire);
	AbortIf(IsMeleeing(EventPlayer()));
	Damage(PlayersWithinRadius(Victim(), 6, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 50);
	Heal(EventPlayer(), EventPlayer(), 50);
	StartDamageOverTime(PlayersWithinRadius(Victim(), 6, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), 3, 25);
	StartHealOverTime(EventPlayer(), EventPlayer(), 3, 25);
	ApplyImpulse(RemoveFromArray(PlayersWithinRadius(Victim(), 6, Team.Team2, RadiusLOS.Surfaces), Victim()), DirectionTowards(Victim(), EventPlayer()), 20, Relative.ToWorld, ContraryMotion.Cancel);
	ApplyImpulse(RemoveFromArray(PlayersWithinRadius(Victim(), 6, Team.Team2, RadiusLOS.Surfaces), Victim()), Up(), 6, Relative.ToWorld, ContraryMotion.Cancel);
	SetStatus(PlayersWithinRadius(Victim(), 6, Team.Team2, RadiusLOS.Surfaces), null, Status.Rooted, 0.8);
}

rule: "Kiriko: Shinobi Tactics"
Event.OnHealingDealt
Team.Team1
Player.Kiriko
{
	AbortIf(!Talent1);
	Damage(PlayersWithinRadius(Healee(), 6, Team.Team2, RadiusLOS.Surfaces), EventPlayer(), EventHealing() * 2);
}

rule: "Kiriko: Recession"
Event.PlayerDealtKnockback
Team.Team1
Player.Kiriko
if (Talent2 == true)
if (EventAbility() == Button.Ability2)
{
	Damage(Victim(), EventPlayer(), 75);
	SetStatus(Victim(), EventPlayer(), Status.Frozen, 1.5);
	PlayEffect(AllPlayers(Team.All), PlayEffect.GoodExplosion, Color.Gray, Victim(), 1);
}

rule: "Ramattra: Vile Dominance"
Event.OngoingPlayer
Team.Team1
Player.Ramattra
if (Talent1 == true)
if ((IsUsingAbility1(EventPlayer()) || IsUsingUltimate(EventPlayer())) == true)
{
	Move_Speed += 30;
	Ability_Active = true;
	WaitUntil(!IsUsingAbility1(EventPlayer()) && !IsUsingUltimate(EventPlayer()) || !Talent1, 9999);
	Move_Speed -= 30;
	Ability_Active = false;
}

rule: "Ramattra: Vile Dominance"
Event.OnDamageDealt
Team.Team1
Player.Ramattra
{
	AbortIf(!Ability_Active);
	AbortIf(EventAbility() == null);
	AbortIf(EventAbility() == Button.Ability2);
	AbortIf(EventAbility() == Button.Ultimate);
	SetStatus(Victim(), EventPlayer(), Status.Rooted, 0.75);
}

rule: "Ramattra: Nether Sector"
Event.OnDamageDealt
Team.Team1
Player.Ramattra
{
	AbortIf(!Talent2);
	AbortIf(!IsOnGround(EventPlayer()));
	AbortIf(EventAbility() != Button.Ability2);
	Heal(EventPlayer(), EventPlayer(), 20);
	SetUltimateCharge(EventPlayer(), UltimateChargePercent(EventPlayer()) + 1);
	Wait(0.1, WaitBehavior.IgnoreCondition);
}

rule: "Lifeweaver: Autumn Blossoms"
Event.OnElimination
Team.Team1
Player.Lifeweaver
if (Talent1 == true)
{
	CreateProjectile(ProjectileType.ZaryaParticleCannon, null, PositionOf(Victim()) + Vector(0, 0.5, 0), Up(), Relative.ToWorld, ModifyHealthType.Heal, Team.Team1, MaxHealth(Victim()), 1, 0, PlayEffect.BadExplosion, PlayEffect.ExplosionSound, 0.025, 0, 8, 0, 0, 0);
}

rule: "Team 1 Lifeweaver: Increased damage"
Event.OngoingPlayer
Team.Team1
Player.Lifeweaver
{
	Damage_Dealt += 30;
	WaitUntil(perk_mystery_swap >= TotalTimeElapsed() + 90 || !Talent1, 99999);
	Damage_Dealt -= 30;
}

rule: "Lifeweaver: Pressure Therapy"
Event.OngoingPlayer
Team.Team1
Player.Lifeweaver
if (Talent2 == true)
if (IsAlive(EventPlayer()) == true)
{
	Wait(0.5, WaitBehavior.AbortWhenFalse);
	StartDamageModification(FilteredArray(AllPlayers(Team.Team2), YOf(PositionOf(EventPlayer())) - YOf(PositionOf(ArrayElement())) >= 3 || DotProduct(FacingDirectionOf(ArrayElement()), VectorTowards(ArrayElement(), EventPlayer())) < 0), EventPlayer(), 150, DamageModificationRev.ReceiversDamagersAndDamagePercent);
	damage_mod[1] = LastDamageModificationID();
	WaitUntil(!Talent2 || IsDead(EventPlayer()), 99999);
	StopDamageModification(damage_mod[1]);
	Wait(0.1, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}
