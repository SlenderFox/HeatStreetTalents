import "globalvars.ostw";
import "playervars.ostw";

globalvar Boolean gMutHeartBurn; // Unused
globalvar Number[] gCurrentPerksHudsList;
globalvar Number[] gSpawnNearestNodeIdxList;
globalvar Vector[] gSpawnPosList;
globalvar Vector gBuyMenuBasePos;

# main(1) team1(1)
void update_combatants() "Subroutine: Update Combatants"
{
	gCombatants = FilteredArray(AllPlayers(Team.Team1), ArrayElement().pIsCombatant);
}

# bots(1) domination(2) highvaluetarget(1) invasion(1) subroutines(1)
void play_incoming_sound_twice() "Subroutine: Play Incoming Sound Twice"
{
	ModifyTeamScore(Team.Team1, 1);
	Wait(0.6, WaitBehavior.IgnoreCondition);
	ModifyTeamScore(Team.Team1, 1);
}

void create_perk_text(in String text, in Number perk)
{
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		text,
		gTemp2,
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToAndColor,
		perk ? Color.Gray : Color.LimeGreen,
		Spectators.DefaultVisibility
	);
}

# debug(1) main(2)
void set_random_perks() "Subroutine: Set Random Perks"
{
	if (CountOf(gCurrentPerksHudsList))
	{
		DestroyInWorldText(gCurrentPerksHudsList[0]);
		DestroyInWorldText(gCurrentPerksHudsList[1]);
	}
	gCurrentPerksHudsList = [];
	if (gWaveNumber % 4 == 1)
	{
		gCurrentPerks = [12, 13];
		gCurrentPerksHudsList.ModAppend(CreateInWorldText(
			gCombatants.Filter(p => p.pInBuyMenu),
			"Hero Talent 1\n      $1600",
			gBuyMenuBasePos - (25 * gBuyMenuLeftUpForward[1]) - (112.5 * gBuyMenuLeftUpForward[0]),
			2.5,
			Clipping.DoNotClip,
			InworldTextRev.VisibleToStringAndColor,
			LocalPlayer().pTalent1
				? Color.Gray
				: Color.Purple,
			Spectators.DefaultVisibility
		));
		gCurrentPerksHudsList.ModAppend(CreateInWorldText(
			gCombatants.Filter(p => p.pInBuyMenu),
			"Hero Talent 2\n      $1600",
			gBuyMenuBasePos - (2.5 * gBuyMenuLeftUpForward[1]) - (112.5 * gBuyMenuLeftUpForward[0]),
			2.5,
			Clipping.DoNotClip,
			InworldTextRev.VisibleToStringAndColor,
			LocalPlayer().pTalent2
				? Color.Gray
				: Color.Purple,
			Spectators.DefaultVisibility
		));
	}
	else
	{
		gCurrentPerks = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11].Remove(gCurrentPerks).Randomize().Slice(0, 2);
		for (gIterator = 0; 2; 1)
		{
			gTemp2 = gBuyMenuBasePos - (gIterator ? 25 : 2.5) * gBuyMenuLeftUpForward[1] - 112.5 * gBuyMenuLeftUpForward[0];
			if (gCurrentPerks[gIterator] == 0)
			{
				CreateInWorldText(
					gCombatants.Filter(p => p.pInBuyMenu),
					"Mystery Swap\n     500$",
					gTemp2,
					2.5,
					Clipping.DoNotClip,
					InworldTextRev.VisibleToAndColor,
					LocalPlayer().pPerkMysterySwap
						? Color.Gray
						: Color.LimeGreen,
					Spectators.DefaultVisibility
				);
			}
			else if (gCurrentPerks[gIterator] == 1)
			{
				CreateInWorldText(
					gCombatants.Filter(p => p.pInBuyMenu),
					"Bulletstorm\n   1000$",
					gTemp2,
					2.5,
					Clipping.DoNotClip,
					InworldTextRev.VisibleToAndColor,
					LocalPlayer().pPerkBulletStorm
						? Color.Gray
						: Color.LimeGreen,
					Spectators.DefaultVisibility
				);
			}
			else if (gCurrentPerks[gIterator] == 2)
			{
				CreateInWorldText(
					gCombatants.Filter(p => p.pInBuyMenu),
					"Die Hard\n 700$",
					gTemp2,
					2.5,
					Clipping.DoNotClip,
					InworldTextRev.VisibleToAndColor,
					LocalPlayer().pPerkDieHard
						? Color.Gray
						: Color.LimeGreen,
					Spectators.DefaultVisibility
				);
			}
			else if (gCurrentPerks[gIterator] == 3)
			{
				CreateInWorldText(
					gCombatants.Filter(p => p.pInBuyMenu),
					"Brass Knuckles\n     700$",
					gTemp2,
					2.5,
					Clipping.DoNotClip,
					InworldTextRev.VisibleToAndColor,
					LocalPlayer().pPerkBrassKnuckles
						? Color.Gray
						: Color.LimeGreen,
					Spectators.DefaultVisibility
				);
			}
			else if (gCurrentPerks[gIterator] == 4)
			{
				CreateInWorldText(
					gCombatants.Filter(p => p.pInBuyMenu),
					"Vampiric\n   1000$",
					gTemp2,
					2.5,
					Clipping.DoNotClip,
					InworldTextRev.VisibleToAndColor,
					LocalPlayer().pPerkVampiric
						? Color.Gray
						: Color.LimeGreen,
					Spectators.DefaultVisibility
				);
			}
			else if (gCurrentPerks[gIterator] == 5)
			{
				CreateInWorldText(
					gCombatants.Filter(p => p.pInBuyMenu),
					"Crash N' Dash\n      700$",
					gTemp2,
					2.5,
					Clipping.DoNotClip,
					InworldTextRev.VisibleToAndColor,
					LocalPlayer().pPerkCrashNDash
						? Color.Gray
						: Color.LimeGreen,
					Spectators.DefaultVisibility
				);
			}
			else if (gCurrentPerks[gIterator] == 6)
			{
				CreateInWorldText(
					gCombatants.Filter(p => p.pInBuyMenu),
					"Golden Hour\n    1000$",
					gTemp2,
					2.5,
					Clipping.DoNotClip,
					InworldTextRev.VisibleToAndColor,
					LocalPlayer().pPerkGoldenHour
						? Color.Gray
						: Color.LimeGreen,
					Spectators.DefaultVisibility
				);
			}
			else if (gCurrentPerks[gIterator] == 7)
			{
				CreateInWorldText(
					gCombatants.Filter(p => p.pInBuyMenu),
					"Supercharge\n        700$",
					gTemp2,
					2.5,
					Clipping.DoNotClip,
					InworldTextRev.VisibleToAndColor,
					LocalPlayer().pPerkSuperCharge
						? Color.Gray
						: Color.LimeGreen,
					Spectators.DefaultVisibility
				);
			}
			else if (gCurrentPerks[gIterator] == 8)
			{
				CreateInWorldText(
					gCombatants.Filter(p => p.pInBuyMenu),
					"Nemesis\n   800$",
					gTemp2,
					2.5,
					Clipping.DoNotClip,
					InworldTextRev.VisibleToAndColor,
					LocalPlayer().pPerkNemesis
						? Color.Gray
						: Color.LimeGreen,
					Spectators.DefaultVisibility
				);
			}
			else if (gCurrentPerks[gIterator] == 9)
			{
				CreateInWorldText(
					gCombatants.Filter(p => p.pInBuyMenu),
					"Spec Ops\n 600$",
					gTemp2,
					2.5,
					Clipping.DoNotClip,
					InworldTextRev.VisibleToAndColor,
					LocalPlayer().pPerkSpecialOperator
						? Color.Gray
						: Color.LimeGreen,
					Spectators.DefaultVisibility
				);
			}
			else if (gCurrentPerks[gIterator] == 10)
			{
				CreateInWorldText(
					gCombatants.Filter(p => p.pInBuyMenu),
					"Sharpshooter\n   900$",
					gTemp2,
					2.5,
					Clipping.DoNotClip,
					InworldTextRev.VisibleToAndColor,
					LocalPlayer().pPerkSharpShooter
						? Color.Gray
						: Color.LimeGreen,
					Spectators.DefaultVisibility
				);
			}
			else if (gCurrentPerks[gIterator] == 11)
			{
				CreateInWorldText(
					gCombatants.Filter(p => p.pInBuyMenu),
					"Shockproof\n        700$",
					gTemp2,
					2.5,
					Clipping.DoNotClip,
					InworldTextRev.VisibleToAndColor,
					LocalPlayer().pPerkShockProof
						? Color.Gray
						: Color.LimeGreen,
					Spectators.DefaultVisibility
				);
			}
			gCurrentPerksHudsList.ModAppend(LastTextID());
		}
	}
}

# perks(1) team1(27)
void update_ab_string_and_play_sound() "Subroutine: Update Ability String and Play Sound"
{
	pAbBoughtAbilitiesString = StringSlice(<"<0><1><2>", <"<0><1><2>", <"<0><1><2>", ["", "\nPriority A", "\nPriority B", "\nPriority C"][pAbPriority], ["", "\nHeadhunter I", "\nHeadhunter II"][pAbHeadhunter], ["", "\nAntigens I", "\nAntigens II"][pAbAntigens]>, <"<0><1><2>", ["", "\nQuick Fix I", "\nQuick Fix II"][pAbQuickFix], ["", "\nCharged I", "\nCharged II"][pAbCharged], ["", "\nHaste I", "\nHaste II"][pAbHaste]>, <"<0><1><2>", ["", "\nHeavy Impact I", "\nHeavy Impact II"][pAbHeavyImpact], ["", "\nSecond Wind I", "\nSecond Wind II"][pAbSecondWind], ["", "\nTriage I", "\nTriage II"][pAbTriage]>>, <"<0><1><2>", <"<0><1><2>", ["", "\nResilience I", "\nResilience II"][pAbResilience], pPerkMysterySwap ? "\nMystery Swap" : "", pPerkBulletStorm ? "\nBulletstorm" : "">, <"<0><1><2>", pPerkDieHard ? "\nDie Hard" : "", pPerkBrassKnuckles ? "\nBrass Knuckles" : "", pPerkVampiric ? "\nVampiric" : "">, <"<0><1><2>", pPerkCrashNDash ? "\nCrash N' Dash" : "", pPerkGoldenHour ? "\nGolden Hour" : "", pPerkSuperCharge ? "\nSupercharge" : "">>, <"<0><1><2>", <"<0><1><2>", pPerkNemesis ? "\nNemesis" : "", pPerkSpecialOperator ? "\nSpec Ops" : "", pPerkSharpShooter ? "\nSharpshooter" : "">, <"<0><1><2>", pPerkShockProof ? "\nShockproof" : "", <"<0><1><2>", pTalent1 ? <"\n<0> <1>", AbilityIconString(Hero.Pharah, Button.Jump), pTalentText[1]> : "", pTalent2 ? <"\n<0> <1>", AbilityIconString(Hero.Pharah, Button.Jump), pTalentText[3]> : "", pAbHealthBonus ? <"\n+<0>% Health", pAbHealthBonus> : "">, pAbDamageBonus ? <"\n+<0>% Damage", pAbDamageBonus> : "">, pAbHealingBonus ? <"\n+<0>% Healing", pAbHealingBonus> : "">>, 1, 511);
}

# bots(1) team1(2)
void nwp_teleport() "Subroutine: Nearest Walkable Position Teleport"
{
	if (gTemp1 == [])
	{
		Teleport(EventPlayer(), SortedArray(gNodes, DistanceBetween(EventPlayer(), ArrayElement()))[0]);
	}
	else
	{
		Teleport(EventPlayer(), gTemp1);
	}
}

# bots(1) domination(1) highvaluetarget(1) subroutines(1)
void call_reinforcements() "Subroutine: Spawn Reinforcements"
{
	gSpecialSpawnsCount += gIsApocalyptic + (gWaveNumber >= 5 ? 2 : 1);
}

# bots(2) pathing(1)
void teleport_to_free_spawn() "Subroutine: Teleport to free Spawn"
{
	if (gGamemode == 0 && (pBaseTier == -1 || gSpecialSpawnsCount > 0) && !pIsAlive)
	{
		pIsNavReachableNode = false;
		if (pBaseTier == -1 && gObjectivePhaseNumber == 0)
		{
			Teleport(EventPlayer(), 100 * Up());
		}
		else
		{
			Teleport(EventPlayer(), gIvDomObjectivePos + Up());
		}
	}
	else if (gGamemode == 1 && gHvtCallReinforcementsEndT >= TotalTimeElapsed() && gSpecialSpawnsCount > 0 && !pIsAlive)
	{
		pIsNavReachableNode = false;
		Teleport(EventPlayer(), PlayersInSlot(1, Team.Team2));
	}
	else if (gGamemode == 2 && gObjectivePhaseNumber == 0)
	{
		pNavIdx = gIvDomObjectivePos[SlotOf(EventPlayer()) == 2 ? 2 : 3];
		pDomNavGuardIdx = pNavIdx;
		pNavPos = gNodes[pNavIdx];
		pIsNavReachableNode = true;
		Teleport(EventPlayer(), pNavPos + 0.1 * DirectionFromAngles(HorizontalAngleFromDirection(DirectionTowards(gIvDomObjectivePos[SlotOf(EventPlayer()) == 2 ? 0 : 1], pNavPos)), false));
	}
	else
	{
		gTemp2 = MappedArray(gSpawnPosList, false);
		for (gIterator = 0; CountOf(gSpawnPosList); 1)
		{
			if (IsTrueForAny(gCombatants, IsInLineOfSight(gSpawnPosList[gIterator] + Up(), EyePosition(ArrayElement()), BarrierLOS.NoBarriersBlock)))
			{
				gTemp2[gIterator] = 2;
			}
			else if (IsTrueForAny(gCombatants, DistanceBetween(gSpawnPosList[gIterator], ArrayElement()) <= 10))
			{
				gTemp2[gIterator] = 1;
			}
		}
		gTemp1 = SortedArray(gSpawnPosList, gTemp2[CurrentArrayIndex()] + RandomReal(0, 0.5))[0];
		pNavIdx = gSpawnNearestNodeIdxList[IndexOfArrayValue(gSpawnPosList, gTemp1)];
		pNavPos = gNodes[pNavIdx];
		pIsNavReachableNode = true;
		Teleport(EventPlayer(), gTemp1);
	}
}

# bots(1) pathing(13)
void find_wp_near_nav() "Subroutine: Find WP near Nav (find a walkable position near the Nav and check if it's reachable)"
{
	gTemp1 = NearestWalkablePosition(pNavPos);
	# If NWP is valid and not too far from the original destination
	if (gTemp1 != [] && DistanceBetween(pNavPos, gTemp1) < 3)
	{
		pNavPos = gTemp1;
	}
	else
	{
		# If original destination is not walkable
		if (DistanceBetween(pNavPos + Up(), RayCastHitPosition(pNavPos + Up(), pNavPos + 2 * Down(), null, null, false)) >= 3)
		{
			# Ranged bots stand still
			if (gIsLoadLimitReached || pIsRanged || DistanceBetween(EventPlayer(), pMyTarget) < 2)
			{
				pNavPos = PositionOf(EventPlayer());
				Abort();
			}
			else
			{
				pNavPos = PositionOf(EventPlayer()) + Min(3.5, DistanceBetween(EventPlayer(), pMyTarget) - 2) * DirectionTowards(EventPlayer(), pMyTarget);
				if (IsOnGround(EventPlayer()))
				{
					# Check if destination is not walkable
					if (DistanceBetween(pNavPos + Up(), RayCastHitPosition(pNavPos + Up(), pNavPos + 2 * Down(), null, null, false)) >= 3)
					{
						pNavPos = PositionOf(EventPlayer());
						pIsUsingCombatPathfinding -= 1;
						Abort();
					}
				}
			}
		}
	}
	# Check if the destination is reachable
	if (IsOnGround(EventPlayer()))
	{
		gTemp1 = PositionOf(EventPlayer()) + 1.75 * DirectionTowards(EventPlayer(), pNavPos) + Up();
		# If bot is near a ledge
		if (DistanceBetween(gTemp1, RayCastHitPosition(gTemp1, gTemp1 + 3 * Down(), null, null, false)) >= 3)
		{
			pNavPos = PositionOf(EventPlayer());
			if (!pIsRanged)
			{
				pIsUsingCombatPathfinding -= 1;
				Abort();
			}
		}
	}
	pIsUsingCombatPathfinding = 3;
}

# bots(1) highvaluetarget(1) invasion(1)
void upgrade_health_and_healing() "Subroutine: Upgrade Health and Healing"
{
	gUpgradeCount += 1;
	SetHealingReceived(AllPlayers(Team.Team1), 85 + 2.5 * gUpgradeCount);
	StartHealOverTime(AllPlayers(Team.Team1), null, 1, 100000);
}
# domnination(2) highvaluetarget(1) invasion(1)
void start_kill_remaining_phase() "Subroutine: Start Kill remaining Phase"
{
	BigMessage(AllPlayers(Team.All), "Kill the remaining enemies!");
	gEnableNormalSpawns = false;
	AllPlayers(Team.Team2).pIsExpendable = false;
	gSpecialSpawnsCount = false;
	gObjectivePhaseNumber = 3;
	Communicate(RandomValueInArray(gCombatants), Communication.PressTheAttack);
}
