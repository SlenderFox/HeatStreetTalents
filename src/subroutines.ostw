import "globalvars.ostw";
import "playervars.ostw";

void set_map_cg() "Subroutine (Set Map CG): Set Spawns, Nodes, Edges, Distance Matrix, Ability Buy Location"
{
	spawn_pos_list = [Vector(206.454, 0.001, 70.22), Vector(221.427, 8.692, 66.933), Vector(193.658, 0.998, 67.449), Vector(229.543, 1.999, 85.875), Vector(224.599, 5.001, 110.683), Vector(199.902, 8.843, 109.823), Vector(176.589, 6.999, 66.024), Vector(212.836, 9, 81.39), Vector(228.988, 12.998, 65.82), Vector(186.82, 0.999, 87.814)];
	spawn_nearest_node_idx_list = [0, 24, 2, 40, 42, 35, 10, 25, 21, 7];
	nodes = [Vector(206.137, 0.041, 81.572), Vector(197.753, 1.002, 81.213), Vector(189.242, 0.998, 66.794), Vector(188.545, 3, 51.941), Vector(193.895, 16.5, 51.891), Vector(196.476, 16.501, 68.781), Vector(186.703, 0.999, 80.98), Vector(187.579, 0.999, 92.388), Vector(174.916, 5.001, 92.33), Vector(174.294, 5, 80.881), Vector(173.301, 6.999, 66.065), Vector(173.262, 6.998, 57.01), Vector(183.04, 7.999, 56.064), Vector(183.491, 7.999, 63.766), Vector(191.037, 7.999, 64.119), Vector(199.061, 7.998, 49.104), Vector(201.742, 7.998, 60.913), Vector(209.518, 7.998, 60.774), Vector(208.498, 9, 44.68), Vector(218.343, 12, 45.13), Vector(216.613, 14.001, 61.938), Vector(229.231, 13.001, 61.763), Vector(229.677, 9.187, 73.895), Vector(220.985, 7.998, 81.14), Vector(221.33, 9.002, 61.664), Vector(206.1, 9, 81.084), Vector(206.313, 7.999, 70.046), Vector(183.802, 5.998, 74.325), Vector(186.933, 6, 80.94), Vector(185.025, 6.001, 87.18), Vector(194.265, 8.001, 96.067), Vector(205.974, 9.025, 95.64), Vector(216.192, 7.999, 95.441), Vector(180.423, 8.998, 104.206), Vector(205.974, 8.027, 103.778), Vector(206.172, 7.998, 110.406), Vector(193.533, 9, 110.488), Vector(219.054, 5.998, 103.97), Vector(219.07, 1.998, 90.657), Vector(235.431, 1.998, 90.539), Vector(229.409, 1.999, 90.044), Vector(237.966, 3.998, 104.629), Vector(226.962, 4.284, 112.037), Vector(219.008, 0.998, 81.327), Vector(177.92, 0.002, 51.147), Vector(196.386, 16.5, 51.909), Vector(196.295, 16.5, 46.848), Vector(208.835, 16.5, 47.146)];
	edges = [[1, 43], [0, 2, 6, 43], [1, 3], [2, 4, 44], [45], [14, 45], [1, 7], [6, 8], [7, 9], [8, 10, 27, 29], [9, 11], [10, 12], [3, 11, 13], [12, 14, 16, 27, 29], [1, 3, 13, 15, 16], [14, 16], [13, 14, 15, 17, 18, 24, 26], [16, 18, 24, 26], [16, 17, 19], [18, 20], [17, 19, 21], [20, 22], [21, 23, 40], [22, 24, 25, 38], [16, 17, 23], [6, 23, 26], [16, 17, 25], [9, 13, 28, 29], [1, 27, 29], [9, 13, 27, 28, 30], [29, 31, 33, 34, 36], [30, 32, 34], [31, 38], [9, 30, 34], [30, 31, 33, 35, 37], [34, 36], [30, 35], [34, 38, 41], [37, 39, 40, 43], [38, 40, 41], [38, 39], [37, 39, 42], [35, 41], [0, 1, 38], [3], [3, 5, 15, 16, 46], [45, 47], [17, 19, 46]];
	distance_matrix = ["012346234567877667789!9878767655654563233451456710123512345676655667898767656555654563233451345621012423456765544556787656567666", "76567434456223453210133456765443344567654545656787677545567312345432025665654332233456543434545676676656678531233232303454543212", "23345654343343456556554556733123212346012345656667789!98787454567656643445624567323457101234545656678987676343456556554556735678", "43456821012343454556787656523234544545566674678943445732101232343445676545412123433434566564567854434643210123454556787656523234", "54454567767545675432355432101234344567654543434565565667778534564321244543210123233456543432323454454556667423453232353432321012", "12234543232121234334344555633456212124234343210112234543232232345445443445622345323235345454321012234543232343456556554556733456", "32323534434321110112343212123234544544344563345643434634545432221012343212134345655654344564456743434645545432221101234323234345", "65565545567445675454575665654333221012343434545676676655467556785454574565654333212101232324545676676544356556785565684566765444", "32321012333565667656743324546789445568345676544433432101223565556545632213436789334457234565433322343210112454445434521223425678", "43434634545432221123432102234345654553233453456732345712345543332234432120145455654563233453567843434623445432221123443221034345", "65565434456445673233463321232123233456543430112343343445556345672123462332343234344567654541012343343434456245673233463321232123", "23345654343110123223234554534567434457443234323434456765454221012112123443445678445568554345434545567876565332101212222333436789", "33456845545654565667898767644321032332122342678954556843212343454556787656523212301222344344678944556854323443454556787656533211", "210121233233678955667965434554565667898767644322321012344344789!5455685543454345455678765653321232210345545567893345684543455456", "56678987676443223212301221226789223457345456656767789!9878755433432341011231567833456845656776787889!?!9898665445433421011226789", "33456845656776787889!?!9898665445434521102326789445679565456656767789!9878755433432231212013789!55678!665456656767789!9878755433", "43212232310489!?112346234567767667789!987876654454345212234045674321244567876554455678765656767898788656678403454321214554543221", "12234543232343456556554556742012543232566565433222323454343454567667665667853101544343456565433321212343232454567667654556754210"];
	elevator_nodes = [];
	if (gamemode == 0)
	{
		iv_dom_objective_all_pos_list = [Vector(206.094, 2, 77.597), Vector(232.886, 4, 93.877), Vector(230.416, 6, 107.918), Vector(193.307, 11, 113.551), Vector(180.089, 11, 101.823), Vector(205.915, 11.043, 93.96), Vector(168.798, 7, 81.112), Vector(173.483, 9, 57.292), Vector(189.454, 5, 56.301), Vector(196.295, 18.5, 68.985), Vector(206.485, 10, 51.593), Vector(206.259, 10.999, 81.079), Vector(218.594, 10, 85.339), Vector(224.043, 3, 78.247), Vector(182.628, 3, 83.08)];
	}
	else if (gamemode == 2)
	{
		iv_dom_objective_all_pos_list = [[Vector(201.832, 8, 52.598), Vector(218.7, 8, 82.857), 47, 23], [Vector(188.463, 3, 54.695), Vector(173.555, 6.997, 65.855), 14, 10], [Vector(192.951, 9, 112.137), Vector(168.563, 5, 81.053), 35, 9], [Vector(205.608, 0.039, 81.423), Vector(232.253, 2, 97.003), 28, 39], [Vector(206.304, 9, 81.776), Vector(185.063, 1, 82.814), 25, 7]];
	}
	player_spawn_pos = Vector(181.974, 9, 96.862);
	player_spawn_facing = Forward();
	ability_shop_pos = Vector(182.587, 8.998, 105.229);
	buy_menu_left_up_forward[2] = Forward();
	buy_menu_cam_pos = 900 * Up();
}

void update_combatants() "Subroutine: Update Combatants"
{
	combatants = FilteredArray(AllPlayers(Team.Team1), ArrayElement().is_combatant);
	combatants_count = CountOf(combatants);
}

void declare_victory() "Subroutine: Declare Victory"
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIf(is_victory_declared);
	is_victory_declared = true;
	DeclareTeamVictory(Team.Team1);
}

void play_incoming_sound_twice() "Subroutine: Play Incoming Sound Twice"
{
	ModifyTeamScore(Team.Team1, 1);
	Wait(0.6, WaitBehavior.IgnoreCondition);
	ModifyTeamScore(Team.Team1, 1);
}

void Cancel_Momentum() "Subroutine: Cancel player momentum"
{
	ApplyImpulse(EventPlayer(), -1 * DirectionFromAngles(HorizontalAngleFromDirection(VelocityOf(EventPlayer())), 0), 0.001, Relative.ToWorld, ContraryMotion.CancelXYZ);
}

void mut_add_mutator() "MUT Subroutine: Add Mutator"
{
	temp_2 = -50 - CountOf(mutators_list);
	if (mut_count % 5 == 0 && wave_number > 0)
	{
		BigMessage(AllPlayers(Team.All), "Gamechanging Mutator added!");
		is_gmut_enabled = true;
		temp_1 = RandomValueInArray(gmut_list);
		ModifyVariable(gmut_list, Operation.RemoveFromArrayByValue, temp_1);
		if (temp_1 == 0)
		{
			gmut_storm_raging = true;
			CreateHudText(AllPlayers(Team.All), null, "Storm Raging: Some enemies are enraged, killing them spreads the rage", null, Location.Right, temp_2 - 0.5, null, Color.Orange, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartDamageModification(combatants, FilteredArray(AllPlayers(Team.Team2), ArrayElement().gmut_var), 140, DamageModificationRev.ReceiversAndDamagers);
		}
		else if (temp_1 == 1)
		{
			gmut_sympathy_gains = true;
			CreateHudText(AllPlayers(Team.All), null, "Sympathy Gains: Killing enemies heals other nearby enemies", null, Location.Right, temp_2 - 0.5, null, Color.Orange, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 2)
		{
			gmut_adaptive_shield = true;
			CreateHudText(AllPlayers(Team.All), null, "Adaptive Shield: Enemies below 50% HP gain shields for every nearby player", null, Location.Right, temp_2 - 0.5, null, Color.Orange, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 3)
		{
			gmut_fortified = true;
			CreateHudText(AllPlayers(Team.All), null, "Fortified: Enemies resist stuns, knockbacks, and gain extra armour", null, Location.Right, temp_2 - 0.5, null, Color.Orange, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 4)
		{
			gmut_salvation = true;
			CreateHudText(AllPlayers(Team.All), null, "Salvation: Enemies heal themselves a small amount when they die", null, Location.Right, temp_2 - 0.5, null, Color.Orange, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
	}
	else if (CountOf(mutators_list))
	{
		BigMessage(AllPlayers(Team.All), "New Mutator added!");
		temp_1 = RandomValueInArray(mutators_list);
		ModifyVariable(mutators_list, Operation.RemoveFromArrayByValue, temp_1);
		if (temp_1 == 0)
		{
			mut_amped = true;
			CreateHudText(AllPlayers(Team.All), null, "Stampede: Enemies move faster", null, Location.Right, temp_2, null, Color.Green, Color.Green, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 1)
		{
			mut_hardwired = true;
			CreateHudText(AllPlayers(Team.All), null, "Hardwired: Mechanical enemies gain shields and resist fear & electrocution", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 2)
		{
			mut_promotion = true;
			CreateHudText(AllPlayers(Team.All), null, "Promotion: Higher tier heroes spawn more frequently", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 3)
		{
			mut_advanced_medkit = true;
			CreateHudText(AllPlayers(Team.All), null, "Advanced Medkit: Medics can revive tier 4 enemies and have less cooldown", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 4)
		{
			CreateHudText(AllPlayers(Team.All), null, "Berserk: Enemies below 50% health deal 25% more damage", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartDamageModification(combatants, FilteredArray(AllPlayers(Team.Team2), NormalizedHealth(ArrayElement()) <= 0.5), 125, DamageModificationRev.ReceiversAndDamagers);
		}
		else if (temp_1 == 5)
		{
			CreateHudText(AllPlayers(Team.All), null, "Regeneration: Enemies slowly regenerate health", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartHealOverTime(AllPlayers(Team.Team2), null, 9999, 10);
		}
		else if (temp_1 == 6)
		{
			mut_yakuza = true;
			CreateHudText(AllPlayers(Team.All), null, "Yakuza: Shinobis, Bowmasters, and Yokais gain more health and spawn as tier 3 enemies", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 7)
		{
			mut_emp_rounds = true;
			CreateHudText(AllPlayers(Team.All), null, "EMP Rounds: Enemies deal double damage to barriers and objects", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartDamageModification(combatants, AllPlayers(Team.Team2), 50, DamageModificationRev.ReceiversAndDamagers);
		}
		else if (temp_1 == 8)
		{
			mut_heartburn = true;
			CreateHudText(AllPlayers(Team.All), null, "Heartburn: Healing in combat is reduced by 30%", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartHealingModification(FilteredArray(combatants, ArrayElement().last_damage_taken_t + (ArrayElement().perk_die_hard ? 0.5 : 1) * (mut_deep_wounds ? 5 : 2.5) > TotalTimeElapsed()), combatants, 70, HealingModificationRev.ReceiversDamagersAndDamagePercent);
		}
		else if (temp_1 == 9)
		{
			mut_deep_wounds = true;
			CreateHudText(AllPlayers(Team.All), null, "Deep Wounds: Health regeneration delay is doubled", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 10)
		{
			mut_gear_upgrade = true;
			CreateHudText(AllPlayers(Team.All), null, "Gear Upgrade: All Troopers are replaced with Heavy Troopers", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 11)
		{
			CreateHudText(AllPlayers(Team.All), null, "Last Men Standing: The final enemies take 25% less damage", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartDamageModification(AllPlayers(Team.Team2), combatants, objective_phase_number == 3 ? 75 : 100, DamageModificationRev.ReceiversDamagersAndDamagePercent);
		}
		else if (temp_1 == 12)
		{
			mut_reinforcements = true;
			CreateHudText(AllPlayers(Team.All), null, "Reinforcements: Enemy spawn rate is increased", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 13)
		{
			mut_mutation = TotalTimeElapsed();
			CreateHudText(AllPlayers(Team.All), null, "Mutation: Some enemies spawn with increased strength and size", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 14)
		{
			mut_expendable = true;
			CreateHudText(AllPlayers(Team.All), null, "Expendable: Dead Troopers are replaced almost instantly", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 15)
		{
			mut_counterstrike = true;
			CreateHudText(AllPlayers(Team.All), null, "Counterstrike: Enemies can retreat from ultimates and counter back with their own", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 16)
		{
			mut_swan_song = true;
			CreateHudText(AllPlayers(Team.All), null, "Swan Song: Boss enemies continue fighting for 5 seconds before going down", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 17)
		{
			mut_bulletproof = true;
			CreateHudText(AllPlayers(Team.All), null, "Bulletproof: Tier 2 enemies gain an additional layer of overhealth", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 18)
		{
			mut_fully_loaded = true;
			CreateHudText(AllPlayers(Team.All), null, "Lock N' Load: Enemies can use additional abilities and have a higher clip size", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (temp_1 == 19)
		{
			mut_low_blow = true;
			CreateHudText(AllPlayers(Team.All), null, "Low Blow: Enemy knockback attacks double in damage and knockback", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			SetKnockbackDealt(AllPlayers(Team.Team2), 200);
		}
		else if (temp_1 == 20)
		{
			mut_artful_dodger = true;
			CreateHudText(AllPlayers(Team.All), null, "Artful Dodger: Enemies can dodge attacks more often and easily", null, Location.Right, temp_2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
	}
}

void set_random_perks() "Subroutine: Set Random Perks"
{
	if (CountOf(current_perks_huds_list))
	{
		DestroyInWorldText(current_perks_huds_list[0]);
		DestroyInWorldText(current_perks_huds_list[1]);
	}
	current_perks_huds_list = [];
	if (wave_number % 4 == 1)
	{
		current_perks = ArraySlice(RandomizedArray(RemoveFromArray([12, 13], current_perks)), 0, 2);
		for (temp_1 = 0; 2; 1)
		{
			temp_2 = buy_menu_base_pos - (temp_1 ? 25 : 2.5) * buy_menu_left_up_forward[1] - 112.5 * buy_menu_left_up_forward[0];
			if (current_perks[temp_1] == 12)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Hero Talent 1\n      $1600", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().Talent1 ? Color.Gray : Color.Purple, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 13)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Hero Talent 2\n      $1600", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().Talent2 ? Color.Gray : Color.Purple, Spectators.DefaultVisibility);
			}
			ModifyVariable(current_perks_huds_list, Operation.AppendToArray, LastTextID());
		}
	}
	else
	{
		current_perks = ArraySlice(RandomizedArray(RemoveFromArray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], current_perks)), 0, 2);
		for (temp_1 = 0; 2; 1)
		{
			temp_2 = buy_menu_base_pos - (temp_1 ? 25 : 2.5) * buy_menu_left_up_forward[1] - 112.5 * buy_menu_left_up_forward[0];
			if (current_perks[temp_1] == 0)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Mystery Swap\n     500$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_mystery_swap ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 1)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Bulletstorm\n   1000$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_bulletstorm ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 2)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Die Hard\n 700$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_die_hard ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 3)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Brass Knuckles\n     700$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_brass_knuckles ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 4)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Vampiric\n   1000$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_vampiric ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 5)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Crash N' Dash\n      700$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_crash_n_dash ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 6)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Golden Hour\n    1000$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_golden_hour ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 7)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Supercharge\n        700$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_super_charge ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 8)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Nemesis\n   800$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_nemesis ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 9)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Spec Ops\n 600$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_special_operator ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 10)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Sharpshooter\n   900$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_sharpshooter ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			else if (current_perks[temp_1] == 11)
			{
				CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Shockproof\n        700$", temp_2, 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndColor, LocalPlayer().perk_shockproof ? Color.Gray : Color.LimeGreen, Spectators.DefaultVisibility);
			}
			ModifyVariable(current_perks_huds_list, Operation.AppendToArray, LastTextID());
		}
	}
}

void disable_player() "Subroutine: Disable Player"
{
	ForceThrottle(EventPlayer(), false, 0.1, false, 0.1, false, 0.1);
	SetPrimaryFireEnabled(EventPlayer(), false);
	SetSecondaryFireEnabled(EventPlayer(), false);
	SetAbility1Enabled(EventPlayer(), false);
	SetAbility2Enabled(EventPlayer(), false);
	SetMeleeEnabled(EventPlayer(), false);
	SetJumpEnabled(EventPlayer(), false);
	SetCrouchEnabled(EventPlayer(), false);
	DisallowButton(EventPlayer(), Button.Ultimate);
}

void enable_player() "Subroutine: Enable Player"
{
	StopForcingThrottle(EventPlayer());
	SetPrimaryFireEnabled(EventPlayer(), true);
	SetSecondaryFireEnabled(EventPlayer(), true);
	SetAbility1Enabled(EventPlayer(), true);
	SetAbility2Enabled(EventPlayer(), true);
	SetMeleeEnabled(EventPlayer(), true);
	SetJumpEnabled(EventPlayer(), true);
	SetCrouchEnabled(EventPlayer(), true);
	AllowButton(EventPlayer(), Button.Ultimate);
}

void open_buy_menu() "Subroutine: Open Buy Menu, Last Facing (3)"
{
	AbortIf(downed_start_t || NormalizedHealth(EventPlayer()) < 0.5 || HasStatus(EventPlayer(), Status.Stunned) || tased_end_t >= TotalTimeElapsed());
	ApplyImpulse(EventPlayer(), -1 * DirectionFromAngles(HorizontalAngleFromDirection(VelocityOf(EventPlayer())), false), 0.001, Relative.ToWorld, ContraryMotion.CancelXYZ);
	ab_var_3 = FacingDirectionOf(EventPlayer());
	in_buy_menu_start_t = TotalTimeElapsed();
	DisableHeroHud(EventPlayer());
	SetFacing(EventPlayer(), Forward(), Relative.ToWorld);
	StartCamera(EventPlayer(), buy_menu_cam_pos, buy_menu_cam_pos + buy_menu_left_up_forward[2], 0);
	disable_player();
	SetAimSpeed(EventPlayer(), 200);
}

void leave_buy_menu() "Subroutine: Leave Buy Menu"
{
	in_buy_menu_start_t = false;
	EnableHeroHud(EventPlayer());
	SetFacing(EventPlayer(), ab_var_3, Relative.ToWorld);
	if (!downed_start_t)
	{
		StopCamera(EventPlayer());
		enable_player();
	}
	SetAimSpeed(EventPlayer(), 100);
}

void check_if_enough_money() "Subroutine: Check if enough money"
{
	if (money_mult * money_amount - money_spent_amount >= temp_2)
	{
		money_spent_amount += temp_2;
		SmallMessage(EventPlayer(), "Ability unlocked");
		play_purchase_confirmation_sound();
	}
	else
	{
		temp_2 = false;
		SmallMessage(EventPlayer(), "Not enough money");
	}
}

void buy_active_ability() "Subroutine: Buy Active Ability"
{
	if (!active_ab_number)
	{
		temp_2 = 1200;
		check_if_enough_money();
		AbortIf(!temp_2);
	}
	else if (temp_1 == active_ab_number)
	{
		Abort();
	}
	else
	{
		SmallMessage(EventPlayer(), "Swapped Active Ability");
	}
	remove_active_ability();
	active_ab_number = temp_1;
	if (temp_1 == 1)
	{
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.AnaNanoBoostedEffect, Color.Team1, EventPlayer(), 1, EffectRev.VisibleTo);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
	}
	else if (temp_1 == 2)
	{
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.ReaperWraithFormEffect, Color.Team1, EventPlayer(), 1, EffectRev.VisibleTo);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
	}
	else if (temp_1 == 4)
	{
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.BaptisteImmortalityFieldProtectedEffect, Color.Team1, EventPlayer(), 1, EffectRev.VisibleTo);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
	}
	else if (temp_1 == 5)
	{
		active_ab_var = 1000 * Down();
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.Cloud, Color.SkyBlue, active_ab_var + 2 * Up(), 10, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.Cloud, Color.SkyBlue, active_ab_var + 2 * Down(), 10, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.Ring, Color.SkyBlue, active_ab_var + Down(), 10, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
	}
	else if (temp_1 == 6)
	{
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.HealTargetActiveEffect, Color.Team1, EventPlayer(), 1, EffectRev.VisibleTo);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
	}
	else if (temp_1 == 7)
	{
		active_ab_var = 1000 * Down();
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.Cloud, Color.Yellow, active_ab_var + Up(), 8, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
		CreateEffect(active_ab_cooldown < 0 ? AllPlayers(Team.All) : [], Effect.Cloud, Color.Yellow, active_ab_var + Down(), 8, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
	}
	else if (temp_1 == 8)
	{
		active_ab_var = [];
		CreateBeamEffect(CountOf(active_ab_var) ? AllPlayers(Team.All) : [], BeamType.BadBeam, EventPlayer(), active_ab_var[0], Color.Purple, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
		CreateBeamEffect(CountOf(active_ab_var) > 1 ? AllPlayers(Team.All) : [], BeamType.BadBeam, active_ab_var[0], active_ab_var[1], Color.Purple, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
		CreateBeamEffect(CountOf(active_ab_var) > 2 ? AllPlayers(Team.All) : [], BeamType.BadBeam, active_ab_var[1], active_ab_var[2], Color.Purple, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
		CreateBeamEffect(CountOf(active_ab_var) > 3 ? AllPlayers(Team.All) : [], BeamType.BadBeam, active_ab_var[2], active_ab_var[3], Color.Purple, EffectRev.VisibleToPositionAndRadius);
		ModifyVariable(active_ab_effect_list, Operation.AppendToArray, LastCreatedEntity());
	}
	play_purchase_confirmation_sound();
}

void remove_active_ability() "Subroutine: Remove Active Ability"
{
	if (active_ab_cooldown < 0)
	{
		active_ab_cooldown = -0.1;
	}
	DestroyEffect(active_ab_effect_list);
	active_ab_effect_list = [];
	active_ab_number = false;
}

void update_ab_string_and_play_sound() "Subroutine: Update Ability String and Play Sound"
{
	ab_bought_abilities_string = StringSlice(<"<0><1><2>", <"<0><1><2>", <"<0><1><2>", ["", "\nPriority A", "\nPriority B", "\nPriority C"][ab_priority], ["", "\nHeadhunter I", "\nHeadhunter II"][ab_headhunter], ["", "\nAntigens I", "\nAntigens II"][ab_antigens]>, <"<0><1><2>", ["", "\nQuick Fix I", "\nQuick Fix II"][ab_quick_fix], ["", "\nCharged I", "\nCharged II"][ab_charged], ["", "\nHaste I", "\nHaste II"][ab_haste]>, <"<0><1><2>", ["", "\nHeavy Impact I", "\nHeavy Impact II"][ab_heavy_impact], ["", "\nSecond Wind I", "\nSecond Wind II"][ab_second_wind], ["", "\nTriage I", "\nTriage II"][ab_triage]>>, <"<0><1><2>", <"<0><1><2>", ["", "\nResilience I", "\nResilience II"][ab_resilience], perk_mystery_swap ? "\nMystery Swap" : "", perk_bulletstorm ? "\nBulletstorm" : "">, <"<0><1><2>", perk_die_hard ? "\nDie Hard" : "", perk_brass_knuckles ? "\nBrass Knuckles" : "", perk_vampiric ? "\nVampiric" : "">, <"<0><1><2>", perk_crash_n_dash ? "\nCrash N' Dash" : "", perk_golden_hour ? "\nGolden Hour" : "", perk_super_charge ? "\nSupercharge" : "">>, <"<0><1><2>", <"<0><1><2>", perk_nemesis ? "\nNemesis" : "", perk_special_operator ? "\nSpec Ops" : "", perk_sharpshooter ? "\nSharpshooter" : "">, <"<0><1><2>", perk_shockproof ? "\nShockproof" : "", <"<0><1><2>", Talent1 ? <"\n<0> <1>", AbilityIconString(Hero.Pharah, Button.Jump), talent_text[1]> : "", Talent2 ? <"\n<0> <1>", AbilityIconString(Hero.Pharah, Button.Jump), talent_text[3]> : "", ab_health_bonus ? <"\n+<0>% Health", ab_health_bonus> : "">, ab_damage_bonus ? <"\n+<0>% Damage", ab_damage_bonus> : "">, ab_healing_bonus ? <"\n+<0>% Healing", ab_healing_bonus> : "">>, 1, 511);
}

void play_purchase_confirmation_sound() "Subroutine: Play Purchase Confirmation Sound"
{
	PlayEffect(EventPlayer(), PlayEffect.BuffExplosionSound, Color.White, buy_menu_cam_pos, 200);
}

void nwp_teleport() "Subroutine: Nearest Walkable Position Teleport"
{
	if (temp_1 == [])
	{
		Teleport(EventPlayer(), SortedArray(nodes, DistanceBetween(EventPlayer(), ArrayElement()))[0]);
	}
	else
	{
		Teleport(EventPlayer(), temp_1);
	}
}

void call_reinforcements() "Subroutine: Spawn Reinforcements"
{
	special_spawns_count += is_apocalyptic + (wave_number >= 5 ? 2 : 1);
}

void teleport_to_free_spawn() "Subroutine: Teleport to free Spawn"
{
	if (gamemode == 0 && (base_tier == -1 || special_spawns_count > 0) && !is_alive)
	{
		is_nav_reachable_node = false;
		if (base_tier == -1 && objective_phase_number == 0)
		{
			Teleport(EventPlayer(), 100 * Up());
		}
		else
		{
			Teleport(EventPlayer(), iv_dom_objective_pos + Up());
		}
	}
	else if (gamemode == 1 && hvt_call_reinforcements_end_t >= TotalTimeElapsed() && special_spawns_count > 0 && !is_alive)
	{
		is_nav_reachable_node = false;
		Teleport(EventPlayer(), PlayersInSlot(1, Team.Team2));
	}
	else if (gamemode == 2 && objective_phase_number == 0)
	{
		nav_idx = iv_dom_objective_pos[SlotOf(EventPlayer()) == 2 ? 2 : 3];
		dom_nav_guard_idx = nav_idx;
		nav_pos = nodes[nav_idx];
		is_nav_reachable_node = true;
		Teleport(EventPlayer(), nav_pos + 0.1 * DirectionFromAngles(HorizontalAngleFromDirection(DirectionTowards(iv_dom_objective_pos[SlotOf(EventPlayer()) == 2 ? 0 : 1], nav_pos)), false));
	}
	else
	{
		temp_2 = MappedArray(spawn_pos_list, false);
		for (temp_1 = 0; CountOf(spawn_pos_list); 1)
		{
			if (IsTrueForAny(combatants, IsInLineOfSight(spawn_pos_list[temp_1] + Up(), EyePosition(ArrayElement()), BarrierLOS.NoBarriersBlock)))
			{
				temp_2[temp_1] = 2;
			}
			else if (IsTrueForAny(combatants, DistanceBetween(spawn_pos_list[temp_1], ArrayElement()) <= 10))
			{
				temp_2[temp_1] = 1;
			}
		}
		temp_1 = SortedArray(spawn_pos_list, temp_2[CurrentArrayIndex()] + RandomReal(0, 0.5))[0];
		nav_idx = spawn_nearest_node_idx_list[IndexOfArrayValue(spawn_pos_list, temp_1)];
		nav_pos = nodes[nav_idx];
		is_nav_reachable_node = true;
		Teleport(EventPlayer(), temp_1);
	}
}

void find_wp_near_nav() "Subroutine: Find WP near Nav (find a walkable position near the Nav and check if it's reachable)"
{
	temp_1 = NearestWalkablePosition(nav_pos);
	# If NWP is valid and not too far from the original destination
	if (temp_1 != [] && DistanceBetween(nav_pos, temp_1) < 3)
	{
		nav_pos = temp_1;
	}
	else
	{
		# If original destination is not walkable
		if (DistanceBetween(nav_pos + Up(), RayCastHitPosition(nav_pos + Up(), nav_pos + 2 * Down(), null, null, false)) >= 3)
		{
			# Ranged bots stand still
			if (is_load_limit_reached || is_ranged || DistanceBetween(EventPlayer(), target) < 2)
			{
				nav_pos = PositionOf(EventPlayer());
				Abort();
			}
			else
			{
				nav_pos = PositionOf(EventPlayer()) + Min(3.5, DistanceBetween(EventPlayer(), target) - 2) * DirectionTowards(EventPlayer(), target);
				if (IsOnGround(EventPlayer()))
				{
					# Check if destination is not walkable
					if (DistanceBetween(nav_pos + Up(), RayCastHitPosition(nav_pos + Up(), nav_pos + 2 * Down(), null, null, false)) >= 3)
					{
						nav_pos = PositionOf(EventPlayer());
						is_using_combat_pathfinding -= 1;
						Abort();
					}
				}
			}
		}
	}
	# Check if the destination is reachable
	if (IsOnGround(EventPlayer()))
	{
		temp_1 = PositionOf(EventPlayer()) + 1.75 * DirectionTowards(EventPlayer(), nav_pos) + Up();
		# If bot is near a ledge
		if (DistanceBetween(temp_1, RayCastHitPosition(temp_1, temp_1 + 3 * Down(), null, null, false)) >= 3)
		{
			nav_pos = PositionOf(EventPlayer());
			if (!is_ranged)
			{
				is_using_combat_pathfinding -= 1;
				Abort();
			}
		}
	}
	is_using_combat_pathfinding = 3;
}

void check_drop() "Subroutine: Check Drop (Avoid dropping too low)"
{
	if (is_load_limit_reached)
	{
		nav_pos = PositionOf(EventPlayer());
		Abort();
	}
	temp_1 = PositionOf(EventPlayer()) + 1.75 * DirectionTowards(EventPlayer(), Vector(XOf(nav_pos), YOf(PositionOf(EventPlayer())), ZOf(nav_pos))) + Up();
	if (DistanceBetween(temp_1, RayCastHitPosition(temp_1, temp_1 + 30 * Down(), null, null, false)) >= YOf(temp_1) - YOf(PositionOf(target)) + 5)
	{
		nav_pos = PositionOf(EventPlayer());
		is_using_combat_pathfinding -= 1;
		Abort();
	}
	temp_1 = PositionOf(EventPlayer()) + 3.5 * DirectionTowards(EventPlayer(), Vector(XOf(nav_pos), YOf(PositionOf(EventPlayer())), ZOf(nav_pos))) + Up();
	if (DistanceBetween(temp_1, RayCastHitPosition(temp_1, temp_1 + 30 * Down(), null, null, false)) >= YOf(temp_1) - YOf(PositionOf(target)) + 5)
	{
		nav_pos = PositionOf(EventPlayer());
		is_using_combat_pathfinding -= 1;
		Abort();
	}
	is_using_combat_pathfinding = 3;
}

void start_facing() "Subroutine: Start Facing"
{
	if (HeroOf(EventPlayer()) == Hero.Soldier76)
	{
		if (real_tier == 4)
		{
			StartFacing(EventPlayer(), (is_target_in_los && (!ab_var_1 || is_using_combat_pathfinding) ? Vector(false, false, false) : 1.5 * DirectionTowards(EventPlayer(), nav_pos)) + (target.is_combatant ? DirectionTowards(EyePosition(EventPlayer()), EyePosition(target) + target.eye_offset) : Vector(false, false, false)), HasStatus(EventPlayer(), Status.Stunned) ? 0 : ab_var_1 ? 1000 : 300, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
		}
		else
		{
			StartFacing(EventPlayer(), (is_target_in_los ? Vector(false, false, false) : 1.5 * DirectionTowards(EventPlayer(), nav_pos)) + (target.is_combatant ? DirectionTowards(EyePosition(EventPlayer()), EyePosition(target) + target.eye_offset) : Vector(false, false, false)), HasStatus(EventPlayer(), Status.Stunned) ? 0 : Slowed_until >= TotalTimeElapsed() ? 50 : 300, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
		}
	}
	else
	{
		if (HeroOf(EventPlayer()) == Hero.Widowmaker || HeroOf(EventPlayer()) == Hero.Hanzo)
		{
			StartFacing(EventPlayer(), facing_override_direction ? facing_override_direction : (is_target_in_los ? Vector(false, false, false) : 1.5 * DirectionTowards(EventPlayer(), nav_pos)) + (target.is_combatant ? DirectionTowards(EyePosition(EventPlayer()), EyePosition(target) + target.eye_offset) : Vector(false, false, false)), HasStatus(EventPlayer(), Status.Stunned) ? 0 : 300, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
			facing_override_direction = false;
		}
		else if (!iv_is_portal)
		{
			StartFacing(EventPlayer(), (is_target_in_los ? Vector(false, false, false) : 1.5 * DirectionTowards(EventPlayer(), nav_pos)) + (target.is_combatant ? DirectionTowards(EyePosition(EventPlayer()), EyePosition(target) + target.eye_offset) : Vector(false, false, false)), HasStatus(EventPlayer(), Status.Stunned) ? 0 : Slowed_until >= TotalTimeElapsed() ? 50 : 300, Relative.ToWorld, FacingRev.DirectionAndTurnRate);
		}
	}
}

void find_chase_target() "Subroutine: Find Chase Target"
{
	AbortIf(is_ignoring_other_targets);
	target = SortedArray(FilteredArray(combatants, !ArrayElement().downed_start_t && !ArrayElement().active_ab_is_cloaked && !(ArrayElement().is_invisible && DistanceBetween(EventPlayer(), ArrayElement()) > 2.4)), DistanceBetween(EventPlayer(), ArrayElement()))[0];
}

void update_target_nav() "Subroutine: Update Target Nav"
{
	target.last_nav_update_t = TotalTimeElapsed();
	temp_1 = EyePosition(target) + target.eye_offset;
	target.best_nav_idx = IndexOfArrayValue(nodes, SortedArray(FilteredArray(RemoveFromArray(nodes, elevator_nodes), IsInLineOfSight(ArrayElement() + Vector(0, 1.5, 0), temp_1, BarrierLOS.NoBarriersBlock)), DistanceBetween(target, ArrayElement()) + AbsoluteValue(YOf(PositionOf(target)) - YOf(ArrayElement())))[0]);
	if (target.best_nav_idx == -1)
	{
		target.best_nav_idx = IndexOfArrayValue(nodes, SortedArray(RemoveFromArray(nodes, elevator_nodes), DistanceBetween(target, ArrayElement()))[0]);
	}
}

void upgrade_health_and_healing() "Subroutine: Upgrade Health and Healing"
{
	upgrade_count += 1;
	SetHealingReceived(AllPlayers(Team.Team1), 85 + 2.5 * upgrade_count);
	StartHealOverTime(AllPlayers(Team.Team1), null, 1, 100000);
}

void start_kill_remaining_phase() "Subroutine: Start Kill remaining Phase"
{
	BigMessage(AllPlayers(Team.All), "Kill the remaining enemies!");
	enable_normal_spawns = false;
	AllPlayers(Team.Team2).is_expendable = false;
	special_spawns_count = false;
	objective_phase_number = 3;
	Communicate(RandomValueInArray(combatants), Communication.PressTheAttack);
}

void iv_defend_portal() "IV Subroutine: Defend Portal"
{
	money_amount += 95;
	if (objective_phase_number == 1)
	{
		enable_normal_spawns = true;
		call_reinforcements();
		async! play_incoming_sound_twice();
		ab_var_2 = TotalTimeElapsed() + 10;
	}
	temp_2 = FilteredArray(PlayersWithinRadius(iv_dom_objective_pos, 15, Team.Team1, RadiusLOS.Surfaces), ArrayElement().is_combatant && !HasStatus(ArrayElement(), Status.PhasedOut) && IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.EnemyBarriersBlock));
	for (temp_1 = 0; CountOf(temp_2); 1)
	{
		ApplyImpulse(temp_2[temp_1], DirectionFromAngles(HorizontalAngleFromDirection(VectorTowards(iv_dom_objective_pos, temp_2[temp_1])), -20), 25, Relative.ToWorld, ContraryMotion.CancelXYZ);
	}
	temp_1 = RandomInteger(0, 5);
	if (temp_1 == 5 && wave_number >= 7)
	{
		temp_2.tased_end_t = TotalTimeElapsed() + 3;
	}
	else if (temp_1 <= 1 && wave_number >= 4)
	{
		SetUltimateCharge(EventPlayer(), 100);
		PressButton(EventPlayer(), Button.Ultimate);
	}
	else if (temp_1 == 3 && wave_number >= 4)
	{
		PressButton(EventPlayer(), Button.Ability1);
	}
	PlayEffect(AllPlayers(Team.All), PlayEffect.ExplosionSound, Color.White, EventPlayer(), 200);
	PlayEffect(AllPlayers(Team.All), PlayEffect.BadExplosion, temp_1 == 5 && wave_number >= 7 ? Color.Purple : Color.Red, iv_dom_objective_pos + 1.11 * Up(), 10);
}
