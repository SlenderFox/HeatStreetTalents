import "globalvars.ostw";
import "playervars.ostw";
import "subroutines.ostw";

globalvar Boolean is_map_cg;
globalvar Number nodes_count;
globalvar Number[][] edges;
globalvar String char_string; // Probably used for navigation
globalvar String[] distance_matrix;
globalvar Any[] elevator_nodes; // Unknown, only set to empty array

playervar Number last_time_at_node_t;
playervar Number last_jump_t;
playervar Number last_nav_update_t;
playervar Vector real_speed_pos_1;
playervar Vector real_speed_pos_2;
playervar Vector best_nav_idx;

void check_drop() "Subroutine: Check Drop (Avoid dropping too low)"
{
	if (is_load_limit_reached)
	{
		nav_pos = PositionOf(EventPlayer());
		Abort();
	}
	temp_1 = PositionOf(EventPlayer()) + 1.75 * DirectionTowards(EventPlayer(), Vector(XOf(nav_pos), YOf(PositionOf(EventPlayer())), ZOf(nav_pos))) + Up();
	if (DistanceBetween(temp_1, RayCastHitPosition(temp_1, temp_1 + 30 * Down(), null, null, false)) >= YOf(temp_1) - YOf(PositionOf(myTarget)) + 5)
	{
		nav_pos = PositionOf(EventPlayer());
		is_using_combat_pathfinding -= 1;
		Abort();
	}
	temp_1 = PositionOf(EventPlayer()) + 3.5 * DirectionTowards(EventPlayer(), Vector(XOf(nav_pos), YOf(PositionOf(EventPlayer())), ZOf(nav_pos))) + Up();
	if (DistanceBetween(temp_1, RayCastHitPosition(temp_1, temp_1 + 30 * Down(), null, null, false)) >= YOf(temp_1) - YOf(PositionOf(myTarget)) + 5)
	{
		nav_pos = PositionOf(EventPlayer());
		is_using_combat_pathfinding -= 1;
		Abort();
	}
	is_using_combat_pathfinding = 3;
}

void update_target_nav() "Subroutine: Update Target Nav"
{
	myTarget.last_nav_update_t = TotalTimeElapsed();
	temp_1 = EyePosition(myTarget) + myTarget.eye_offset;
	myTarget.best_nav_idx = IndexOfArrayValue(nodes, SortedArray(FilteredArray(RemoveFromArray(nodes, elevator_nodes), IsInLineOfSight(ArrayElement() + Vector(0, 1.5, 0), temp_1, BarrierLOS.NoBarriersBlock)), DistanceBetween(myTarget, ArrayElement()) + AbsoluteValue(YOf(PositionOf(myTarget)) - YOf(ArrayElement())))[0]);
	if (myTarget.best_nav_idx == -1)
	{
		myTarget.best_nav_idx = IndexOfArrayValue(nodes, SortedArray(RemoveFromArray(nodes, elevator_nodes), DistanceBetween(myTarget, ArrayElement()))[0]);
	}
}

rule: "Team 2 CG: Improve Air Movement near Jump Pad"
Event.OngoingPlayer
Team.Team2
if (is_map_cg)
if (nav_idx == 4 || nav_idx == 45)
if (is_alive)
if (IsInAir(EventPlayer()))
if (is_using_combat_pathfinding == 0)
if (HorizontalSpeedOf(EventPlayer()) >= 5)
if (DistanceBetween(EventPlayer(), Vector(XOf(nav_pos), YOf(PositionOf(EventPlayer())), ZOf(nav_pos))) <= 0.5)
{
	ApplyImpulse(EventPlayer(), -1 * DirectionFromAngles(HorizontalAngleFromDirection(VelocityOf(EventPlayer())), 0), 0.001, Relative.ToWorld, ContraryMotion.CancelXYZ);
	Wait(0.25, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Enable Combat Pathfinding"
Event.OngoingPlayer
Team.Team2
if (!is_load_limit_reached)
if (!is_pathfinding_disabled)
if (is_using_combat_pathfinding == 0)
if (is_target_in_los >= 5)
if (is_aggressive)
if (IsOnGround(EventPlayer()))
if (YOf(PositionOf(myTarget)) - YOf(PositionOf(EventPlayer())) <= 2 || YOf(nodes[myTarget.best_nav_idx]) - YOf(PositionOf(EventPlayer())) <= 1)
if (is_ranged || DistanceBetween(EventPlayer(), myTarget) <= 1 + DistanceBetween(myTarget, nodes[myTarget.best_nav_idx]))
{
	if (myTarget.last_nav_update_t + combatants_count * 0.4 < TotalTimeElapsed())
	{
		update_target_nav();
		AbortIfConditionIsFalse();
	}
	if (IsTrueForAny(elevator_nodes, DistanceBetween(EventPlayer(), Vector(XOf(ArrayElement()), YOf(PositionOf(EventPlayer())), ZOf(ArrayElement()))) < 1.5))
	{
		Wait(1, WaitBehavior.IgnoreCondition);
		AbortIfConditionIsFalse();
	}
	is_using_combat_pathfinding = 3;
	target_last_seen_pos = PositionOf(myTarget);
	is_nav_reachable_node = false;
	MinWait();
	LoopIfConditionIsTrue();
}

rule: "Team 2: Disable Combat Pathfinding"
Event.OngoingPlayer
Team.Team2
if (is_using_combat_pathfinding)
if ((is_aggressive && is_target_in_los) == 0)
{
	is_using_combat_pathfinding = 0;
}

rule: "Team 2: Set Nav (Not in Combat), Get Back to Node, Set Nav is Node"
Event.OngoingPlayer
Team.Team2
if (is_alive)
if (is_using_combat_pathfinding == 0)
if (!is_nav_reachable_node)
{
	if (!(is_load_limit_reached || is_pathfinding_disabled))
	{
		if (combat_pathfinding_type == 0)
		{
			SetMoveSpeed(EventPlayer(), mut_amped ? 115 : 100);
		}
		nav_pos = SortedArray(FilteredArray(nodes, IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.NoBarriersBlock)), DistanceBetween(EventPlayer(), ArrayElement()))[0];
		if (!nav_pos)
		{
			nav_pos = SortedArray(nodes, DistanceBetween(EventPlayer(), ArrayElement()))[0];
		}
		nav_idx = IndexOfArrayValue(nodes, nav_pos);
		is_nav_reachable_node = true;
	}
	Wait(0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Set Nav (Not in Combat), Select Next Node, Set Last Time at Node"
Event.OngoingPlayer
Team.Team2
if (is_alive)
if (is_using_combat_pathfinding == 0)
if (is_nav_reachable_node)
if (DistanceBetween(EventPlayer(), nav_pos) <= 1)
{
	last_time_at_node_t = TotalTimeElapsed();
	if (!(is_load_limit_reached || is_pathfinding_disabled))
	{
		if (gamemode == 2 && is_living_boss && !is_aggressive)
		{
			if (nav_idx == dom_nav_guard_idx)
			{
				Wait(0.5, WaitBehavior.IgnoreCondition);
				LoopIfConditionIsTrue();
			}
			else
			{
				nav_idx = SortedArray(edges[nav_idx], RandomReal(0, 0.5) + IndexOfStringChar(char_string, CharInString(distance_matrix[RoundToInteger((ArrayElement() * nodes_count + dom_nav_guard_idx) / 128, Rounding.Down)], (ArrayElement() * nodes_count + dom_nav_guard_idx) % 128)))[0];
				nav_pos = nodes[nav_idx];
			}
		}
		else if (myTarget.is_combatant)
		{
			if (myTarget.last_nav_update_t + combatants_count * 0.4 < TotalTimeElapsed())
			{
				update_target_nav();
			}
			if (nav_idx == myTarget.best_nav_idx && is_aggressive && fear_end_t < TotalTimeElapsed())
			{
				is_target_in_los = 5;
				is_using_combat_pathfinding = 3;
				target_last_seen_pos = PositionOf(myTarget);
				is_nav_reachable_node = false;
			}
			else
			{
				nav_idx = SortedArray(edges[nav_idx], (is_aggressive && fear_end_t < TotalTimeElapsed() ? 1 : -1) * (RandomReal(0, 0.5) + IndexOfStringChar(char_string, CharInString(distance_matrix[RoundToInteger((ArrayElement() * nodes_count + myTarget.best_nav_idx) / 128, Rounding.Down)], (ArrayElement() * nodes_count + myTarget.best_nav_idx) % 128))))[0];
				nav_pos = nodes[nav_idx];
			}
		}
		else
		{
			nav_idx = RandomValueInArray(edges[nav_idx]);
			nav_pos = nodes[nav_idx];
		}
	}
	Wait(0.5, WaitBehavior.AbortWhenFalse);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Set Nav (in Combat)"
Event.OngoingPlayer
Team.Team2
if (is_using_combat_pathfinding)
{
	if (!(is_load_limit_reached || is_pathfinding_disabled || HasStatus(EventPlayer(), Status.Rooted) || HasStatus(EventPlayer(), Status.Stunned)))
	{
		if (IsInLineOfSight(EyePosition(EventPlayer()), EyePosition(myTarget) + myTarget.eye_offset, BarrierLOS.NoBarriersBlock))
		{
			target_last_seen_pos = PositionOf(myTarget);
			if (is_flying)
			{
				nav_pos = RayCastHitPosition(EyePosition(myTarget), EyePosition(myTarget) + 12 * DirectionFromAngles(HorizontalFacingAngleOf(myTarget) + (RandomInteger(0, 1) ? -45 : 45), -60), null, null, false);
				Wait(0.5, WaitBehavior.IgnoreCondition);
			}
			else if (myTarget.is_flying && combat_pathfinding_type != 4)
			{
				# Roam
				nav_pos = PositionOf(EventPlayer()) + 3.5 * DirectionFromAngles(RandomInteger(-179, 180), 0);
				find_wp_near_nav();
			}
			else
			{
				# Long Range, roam randomly, slow
				if (combat_pathfinding_type == 0)
				{
					if (DistanceBetween(EventPlayer(), myTarget) <= (HeroOf(EventPlayer()) == Hero.Baptiste ? 20 : 15))
					{
						nav_pos = PositionOf(EventPlayer()) + 2.5 * DirectionFromAngles(RandomInteger(-179, 180), 0);
					}
					else
					{
						nav_pos = PositionOf(EventPlayer()) + 2.5 * DirectionFromAngles(HorizontalAngleFromDirection(DirectionTowards(EventPlayer(), myTarget)) + RandomValueInArray([-45, 0, 45]), 0);
					}
					find_wp_near_nav();
				}
				else if (combat_pathfinding_type == 1)
				{
					if (YOf(PositionOf(myTarget)) - YOf(PositionOf(EventPlayer())) > -2)
					{
						nav_pos = PositionOf(EventPlayer()) + Min(3.5, DistanceBetween(EventPlayer(), myTarget) - 2) * DirectionTowards(EventPlayer(), myTarget);
						find_wp_near_nav();
					}
					else
					{
						nav_pos = PositionOf(myTarget) + 2 * DirectionTowards(myTarget, EventPlayer());
						check_drop();
					}
				}
				else if (combat_pathfinding_type == 2)
				{
					nav_pos = PositionOf(EventPlayer()) + Min(1.5, DistanceBetween(EventPlayer(), myTarget) - 2) * DirectionTowards(EventPlayer(), myTarget);
					find_wp_near_nav();
				}
				else if (combat_pathfinding_type == 3)
				{
					nav_pos = PositionOf(myTarget) + 5 * DirectionFromAngles(HorizontalFacingAngleOf(myTarget) + RandomValueInArray([-45, 45]), 0);
					if (YOf(PositionOf(myTarget)) - YOf(PositionOf(EventPlayer())) > -2)
					{
						nav_pos = PositionOf(EventPlayer()) + Min(3.5, DistanceBetween(EventPlayer(), nav_pos)) * DirectionTowards(EventPlayer(), nav_pos);
						find_wp_near_nav();
					}
					else
					{
						check_drop();
					}
				}
				else if (combat_pathfinding_type == 4)
				{
					if (DistanceBetween(EventPlayer(), myTarget) <= 12)
					{
						nav_pos = PositionOf(EventPlayer()) + 3.5 * DirectionFromAngles(HorizontalAngleFromDirection(DirectionTowards(myTarget, EventPlayer())) + (DistanceBetween(EventPlayer(), myTarget) <= 8 && real_speed <= 1 ? RandomValueInArray([-135, 135]) : 0), 0);
						find_wp_near_nav();
					}
					else
					{
						nav_pos = PositionOf(EventPlayer());
					}
				}
				else if (combat_pathfinding_type == 5)
				{
					nav_pos = PositionOf(myTarget) + 3 * DirectionFromAngles(HorizontalFacingAngleOf(myTarget), 0);
					if (YOf(PositionOf(myTarget)) - YOf(PositionOf(EventPlayer())) > -2)
					{
						nav_pos = PositionOf(EventPlayer()) + Min(3.5, DistanceBetween(EventPlayer(), nav_pos)) * DirectionTowards(EventPlayer(), nav_pos);
						find_wp_near_nav();
					}
					else
					{
						check_drop();
					}
				}
				else if (combat_pathfinding_type == 6)
				{
					nav_pos = PositionOf(myTarget) + 1.5 * DirectionFromAngles(HorizontalFacingAngleOf(myTarget) + (HorizontalAngleTowards(myTarget, EventPlayer()) > 0 ? 90 : -90), 0);
					if (YOf(PositionOf(myTarget)) - YOf(PositionOf(EventPlayer())) > -2)
					{
						nav_pos = PositionOf(EventPlayer()) + Min(3.5, DistanceBetween(EventPlayer(), nav_pos)) * DirectionTowards(EventPlayer(), nav_pos);
						find_wp_near_nav();
					}
					else
					{
						check_drop();
					}
				}
				else if (combat_pathfinding_type == 7)
				{
					if (DistanceBetween(EventPlayer(), myTarget) <= 17)
					{
						nav_pos = PositionOf(EventPlayer()) + 3.5 * DirectionFromAngles(RandomInteger(-179, 180), 0);
					}
					else
					{
						nav_pos = PositionOf(EventPlayer()) + 3.5 * DirectionFromAngles(HorizontalAngleFromDirection(DirectionTowards(EventPlayer(), myTarget)) + RandomValueInArray([-45, 0, 45]), 0);
					}
					find_wp_near_nav();
				}
				else if (combat_pathfinding_type == 8)
				{
					temp_1 = RemoveFromArray(FilteredArray(PlayersWithinRadius(EventPlayer(), 3, Team.Team2, RadiusLOS.Off), ArrayElement().is_alive), EventPlayer());
					if (CountOf(temp_1))
					{
						nav_pos = PositionOf(EventPlayer()) + 3.5 * DirectionTowards(SortedArray(temp_1, DistanceBetween(EventPlayer(), ArrayElement()))[0], EventPlayer());
						find_wp_near_nav();
					}
					else
					{
						nav_pos = PositionOf(EventPlayer());
					}
				}
				else if (combat_pathfinding_type == 9)
				{
					if (ab_var_1)
					{
						if (YOf(PositionOf(myTarget)) - YOf(PositionOf(EventPlayer())) > -2)
						{
							nav_pos = PositionOf(EventPlayer()) + 6 * DirectionTowards(EventPlayer(), myTarget);
							find_wp_near_nav();
						}
						else
						{
							nav_pos = PositionOf(myTarget);
							check_drop();
						}
					}
					else
					{
						if (ab_var_2)
						{
							nav_pos = PositionOf(myTarget) + 3 * DirectionFromAngles(HorizontalFacingAngleOf(myTarget), 0);
						}
						else
						{
							nav_pos = PositionOf(myTarget) + 5 * DirectionFromAngles(HorizontalFacingAngleOf(myTarget) + RandomValueInArray([-45, 45]), 0);
						}
						if (YOf(PositionOf(myTarget)) - YOf(PositionOf(EventPlayer())) > -2)
						{
							nav_pos = PositionOf(EventPlayer()) + Min(4, DistanceBetween(EventPlayer(), nav_pos)) * DirectionTowards(EventPlayer(), nav_pos);
							find_wp_near_nav();
						}
						else
						{
							check_drop();
						}
					}
				}
			}
			if (combat_pathfinding_type == 0)
			{
				SetMoveSpeed(EventPlayer(), mut_amped ? 75.5 : 65);
			}
		}
		else
		{
			if (DistanceBetween(EventPlayer(), Vector(XOf(target_last_seen_pos), YOf(PositionOf(EventPlayer())), ZOf(target_last_seen_pos))) < 0.5)
			{
				target_last_seen_pos = PositionOf(myTarget);
			}
			if (is_flying)
			{
				nav_pos = target_last_seen_pos;
			}
			else
			{
				nav_pos = PositionOf(EventPlayer()) + Min(3.5, DistanceBetween(EventPlayer(), target_last_seen_pos)) * DirectionTowards(EventPlayer(), target_last_seen_pos);
				find_wp_near_nav();
			}
			if (combat_pathfinding_type == 0)
			{
				SetMoveSpeed(EventPlayer(), mut_amped ? 115 : 100);
			}
		}
	}
	Wait(is_load_limit_reached ? 1 : 0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Calculate Real Speed"
Event.OngoingPlayer
Team.Team2
if (is_alive)
{
	if (is_load_limit_reached || is_pathfinding_disabled)
	{
		# Larger than 1.5 to not trigger stuck rules
		real_speed = 1.6;
		Wait(0.5, WaitBehavior.AbortWhenFalse);
	}
	else
	{
		real_speed_pos_1 = PositionOf(EventPlayer());
		if (IsJumping(EventPlayer()))
		{
			last_jump_t = TotalTimeElapsed();
		}
		if (last_jump_t + 0.15 >= TotalTimeElapsed())
		{
			real_speed = DistanceBetween(Vector(XOf(real_speed_pos_1), YOf(real_speed_pos_2), ZOf(real_speed_pos_1)), real_speed_pos_2) / 0.112;
		}
		else
		{
			real_speed = DistanceBetween(real_speed_pos_1, real_speed_pos_2) / 0.112;
		}
		Wait(0.112, WaitBehavior.AbortWhenFalse);
		real_speed_pos_2 = PositionOf(EventPlayer());
		if (IsJumping(EventPlayer()))
		{
			last_jump_t = TotalTimeElapsed();
		}
		if (last_jump_t + 0.15 >= TotalTimeElapsed())
		{
			real_speed = DistanceBetween(Vector(XOf(real_speed_pos_1), YOf(real_speed_pos_2), ZOf(real_speed_pos_1)), real_speed_pos_2) / 0.112;
		}
		else
		{
			real_speed = DistanceBetween(real_speed_pos_1, real_speed_pos_2) / 0.112;
		}
		Wait(0.112, WaitBehavior.AbortWhenFalse);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2: Bot is stuck"
Event.OngoingPlayer
Team.Team2
if (is_alive)
if (real_speed <= 1.5)
if (!is_flying)
if (Slowed_until < TotalTimeElapsed())
if (!HasStatus(EventPlayer(), Status.Rooted))
if (!HasStatus(EventPlayer(), Status.Stunned))
if (DistanceBetween(EventPlayer(), Vector(XOf(nav_pos), YOf(is_using_combat_pathfinding ? PositionOf(EventPlayer()) : nav_pos), ZOf(nav_pos))) >= 0.5)
{
	Wait(0.5, WaitBehavior.AbortWhenFalse);
	LoopIf(HeroOf(EventPlayer()) == Hero.Reinhardt && IsUsingUltimate(EventPlayer()));
	if (IsTrueForAny(elevator_nodes, DistanceBetween(EventPlayer(), Vector(XOf(ArrayElement()), YOf(PositionOf(EventPlayer())), ZOf(ArrayElement()))) < 1.5))
	{
		Wait(1.5, WaitBehavior.AbortWhenFalse);
	}
	AbortIfConditionIsFalse();
	if (is_using_combat_pathfinding)
	{
		if (AbsoluteValue(HorizontalAngleFromDirection(ThrottleOf(EventPlayer()))) <= 45)
		{
			PressButton(EventPlayer(), Button.Jump);
		}
	}
	else
	{
		PressButton(EventPlayer(), Button.Jump);
		if (!(is_target_in_los || fear_end_t >= TotalTimeElapsed()))
		{
			DisableMovementCollisionWithPlayers(EventPlayer());
			Wait(0.5, WaitBehavior.IgnoreCondition);
			EnableMovementCollisionWithPlayers(EventPlayer());
		}
		Wait(0.5, WaitBehavior.AbortWhenFalse);
		is_nav_reachable_node = false;
	}
	Wait(0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Teleport if Target not in LOS and hasn't reached Node for 8 seconds"
Event.OngoingPlayer
Team.Team2
if (is_alive)
if (!HasStatus(EventPlayer(), Status.Rooted))
if (!HasStatus(EventPlayer(), Status.Stunned))
if (!is_pathfinding_disabled)
if (is_target_in_los == 0)
if (fear_end_t < TotalTimeElapsed())
if (last_time_at_node_t < TotalTimeElapsed())
{
	Wait(8, WaitBehavior.AbortWhenFalse);
	LoopIf(is_load_limit_reached);
	teleport_to_free_spawn();
}
