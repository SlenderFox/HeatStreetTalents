/** Contains many rules to help development of the gamemode.
 * Should not be included in a release build of the mode.
*/
import "pathfinding/pathfinding.ostw";
import "bots.ostw";
import "noclip.ostw";

globalvar Player enemyTestBot;
globalvar Boolean inControlMode;

Player host: HostPlayer();
Boolean isHost: EventPlayer() == host;
Vector hostPos: host.Position();
Vector hostEye: host.EyePosition();
Vector hostFacing: host.FacingDirection();
Vector hostTarget: RayCastHitPosition(hostEye, hostEye + hostFacing * 100, null, null, false);
Boolean hostIsCrouching: host.IsButtonHeld(Button.Crouch);

Boolean button(Button _button): host.IsButtonHeld(_button);

Boolean holdingButtonFriendly: button(Button.Ultimate);
Boolean holdingButtonEnemy: button(Button.Ability2);

void SelectTestBot() "[DEBUG SUBROUTINE] Select test bot"
{
	if (enemyTestBot == null)
	{
		enemyTestBot = AllPlayers(Team.Team2)
			.Filter(p => p.IsDummy())
			.Sort(p => SlotOf(p)).First;
		StartForcingDummyBotName(enemyTestBot, "<<TEST BOT>>");
	}
}

rule: "[DEBUG] Display debug information on top left"
{
	Number loadScaler: 0.3921;
	CreateHudText(
		host,
		Text: <
			"load: c:<0>% a:<1>% p:<2>%\nposition: <3>\n<4>",
			ServerLoad() * loadScaler,
			ServerLoadAverage() * loadScaler,
			ServerLoadPeak() * loadScaler,
			hostPos,
			inControlMode ? "Control mode" : ""
		>
	);
}

rule: "[DEBUG] Host init"
Event.OngoingPlayer
if (isHost)
{
	//DisallowButton(host, Button.PrimaryFire);
	//DisallowButton(host, Button.SecondaryFire);
	//DisallowButton(host, Button.Melee);
	//DisallowButton(host, Button.Ability1);
	DisallowButton(host, Button.Ability2);
	DisallowButton(host, Button.Ultimate);
	SetRespawnMaxTime(host, 2);
}

rule: "[DEBUG] Toggle noclip"
Event.OngoingPlayer
if (isHost)
if (inControlMode == false)
if (button(Button.Interact))
{
	IsNoclipping = !IsNoclipping;
}

rule: "[DEBUG] Toggle control mode"
Event.OngoingPlayer
if (isHost)
if (hostIsCrouching)
{
	inControlMode = true;
	DisallowButton(host, Button.Melee);
	DisallowButton(host, Button.PrimaryFire);
	DisallowButton(host, Button.SecondaryFire);
	WaitUntil(!hostIsCrouching, 9999);
	inControlMode = false;
	AllowButton(host, Button.Melee);
	AllowButton(host, Button.PrimaryFire);
	AllowButton(host, Button.SecondaryFire);
}

rule: "[DEBUG] Bot information display"
Event.OngoingPlayer
if (isDummy)
if (
	EventPlayer() == friendlyBot
	|| EventPlayer() == enemyTestBot
)
{
	CreateInWorldText(
		host,
		<
			"Targeting: <0>\nFollowing: <1>\nDestination: <2><3><4>",
			EventPlayer().target,
			EventPlayer().following,
			EventPlayer().pfDestination,
			EventPlayer().pfIsPathfinding
				? <
					"\nPathing\nWalkingTo: <0>",
					EventPlayer().pfWalkingToPosition
				>
				: "",
			EventPlayer().downedStartTime ? "\nDowned" : ""
		>,
		EventPlayer().EyePosition() + Vector(0, 1, 0),
		one,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToPositionAndString
	);

	CreateBeamEffect(
		EventPlayer().pfIsPathfinding ? host : [],
		BeamType.OrisaHaltTendrilBeam,
		EventPlayer().pfDestination,
		EventPlayer().EyePosition(),
		Team.Team1,
		EffectRev.VisibleToPositionAndRadius
	);
}

rule: "[DEBUG] Teleport enemy dummy bot"
Event.OngoingPlayer
if (isHost)
if (inControlMode == false)
if (holdingButtonEnemy)
{
	SelectTestBot();

	if (!enemyTestBot.IsAlive())
	{
		RespawnBot(enemyTestBot);
	}

	Teleport(enemyTestBot, hostTarget);
}

rule: "[DEBUG] Teleport friendly dummy bot"
Event.OngoingPlayer
if (isHost)
if (inControlMode == false)
if (holdingButtonFriendly)
{
	if (!friendlyBot.IsAlive())
	{
		RespawnBot(friendlyBot);
	}

	Teleport(friendlyBot, hostTarget);
}

rule: "[DEBUG] Enemy dummy pathfinding"
Event.OngoingPlayer
if (isHost)
if (inControlMode)
if (holdingButtonEnemy)
{
	enemyTestBot.pfDestination = hostTarget;
}

rule: "[DEBUG] Friendly dummy pathfinding"
Event.OngoingPlayer
if (isHost)
if (inControlMode)
if (holdingButtonFriendly)
{
	friendlyBot.pfDestination = hostTarget;
}

rule: "[DEBUG] Toggle enemy dummy facing"
Event.OngoingPlayer
if (isHost)
if (inControlMode)
if (button(Button.SecondaryFire))
{
	SelectTestBot();

	if (enemyTestBot.target != null)
	{
		enemyTestBot.target = null;
		StopFacing(enemyTestBot);
		# Reset facing direction to +X
		SetFacing(enemyTestBot, Left(), Relative.ToWorld);
	}
	else
	{
		enemyTestBot.target = friendlyBot;
	}
}

rule: "[DEBUG] Make enemy dummy shoot"
Event.OngoingPlayer
if (isHost)
if (inControlMode)
if (button(Button.PrimaryFire))
{
	StartHoldingButton(enemyTestBot, Button.PrimaryFire);
	WaitUntil(!(button(Button.PrimaryFire) && inControlMode), 120);
	StopHoldingButton(enemyTestBot, Button.PrimaryFire);
}

rule: "[DEBUG] Toggle friendly dummy follow"
Event.OngoingPlayer
if (isHost)
if (inControlMode)
if (button(Button.Interact))
{
	if (friendlyBot.following != null)
	{
		friendlyBot.following = null;
	}
	else
	{
		friendlyBot.following = host;
	}
}

rule: "[DEBUG] Automatically revive people on team 1"
Event.OngoingPlayer
Team.Team1
if (EventPlayer().downedStartTime)
{
	# Syncs with auto heal
	Wait(5);
	enable_player();
	ClearStatus(EventPlayer(), Status.PhasedOut);
	ClearStatus(EventPlayer(), Status.Invincible);
	downedStartTime = zero;
}
