/** Contains many rules to help development of the gamemode.
 * Should not be included in a release build of the mode.
*/
import "pathfinding/pathfinding.ostw";
import "bots.ostw";
import "noclip.ostw";

globalvar Player gEnemyTestBot;
globalvar Boolean gInControlMode;
playervar Boolean pIsTestBot;

Player HOST: HostPlayer();
Boolean IS_HOST: EventPlayer() == HOST;
Vector HOST_POS: HOST.Position();
Vector HOST_EYE: HOST.EyePosition();
Vector HOST_FACING: HOST.FacingDirection();
Vector HOST_TARGET: RayCastHitPosition(HOST_EYE, HOST_EYE + HOST_FACING * 100, null, null, false);
Boolean HOST_IS_CROUCHING: HOST.IsButtonHeld(Button.Crouch);

Boolean BUTTON(Button _button): HOST.IsButtonHeld(_button);

Boolean HOLDING_BUTTON_FRIENDLY: BUTTON(Button.Ultimate);
Boolean HOLDING_BUTTON_ENEMY: BUTTON(Button.Ability2);

void SelectTestBot() "[DEBUG SUBROUTINE] Select test bot"
{
	if (gEnemyTestBot == null)
	{
		gEnemyTestBot = AllPlayers(Team.Team2)
			.Filter(p => p.IsDummy() && !p.pIsBoss)
			.Sort(p => SlotOf(p)).First;
		gEnemyTestBot.pIsTestBot = true;
		StartForcingDummyBotName(gEnemyTestBot, "<<TEST BOT>>");
	}
}

rule: "[DEBUG] Display debug information on top left"
{
	Number loadScaler: 0.3921;
	CreateHudText(
		HOST,
		Text: <
			"load: c:<0>% a:<1>% p:<2>%\nposition: <3>\n<4>\n<5>\n                  ",
			ServerLoad() * loadScaler,
			ServerLoadAverage() * loadScaler,
			ServerLoadPeak() * loadScaler,
			HOST_POS,
			<
				"<0> vs <1>",
				NumberOfPlayers(Team.Team1),
				NumberOfPlayers(Team.Team2)
			>,
			gInControlMode ? "Control mode" : ""
		>,
		Location: Location.Right
	);
}

rule: "[DEBUG] Host init"
Event.OngoingPlayer
if (IS_HOST)
{
	//DisallowButton(host, Button.PrimaryFire);
	//DisallowButton(host, Button.SecondaryFire);
	//DisallowButton(host, Button.Melee);
	//DisallowButton(host, Button.Ability1);
	DisallowButton(HOST, Button.Ability2);
	DisallowButton(HOST, Button.Ultimate);
	SetRespawnMaxTime(HOST, 2);
}

rule: "[DEBUG] Toggle noclip"
Event.OngoingPlayer
if (IS_HOST)
if (gInControlMode == false)
if (BUTTON(Button.Interact))
{
	gIsNoclipping = !gIsNoclipping;
}

rule: "[DEBUG] Toggle control mode"
Event.OngoingPlayer
if (IS_HOST)
if (HOST_IS_CROUCHING)
{
	gInControlMode = true;
	DisallowButton(HOST, Button.Melee);
	DisallowButton(HOST, Button.PrimaryFire);
	DisallowButton(HOST, Button.SecondaryFire);
	WaitUntil(!HOST_IS_CROUCHING, 9999);
	gInControlMode = false;
	AllowButton(HOST, Button.Melee);
	AllowButton(HOST, Button.PrimaryFire);
	AllowButton(HOST, Button.SecondaryFire);
}

rule: "[DEBUG] Bot information display"
Event.OngoingPlayer
if (IS_DUMMY)
if (
	EventPlayer() == gFriendlyBot
	|| EventPlayer() == gEnemyTestBot
)
{
	CreateInWorldText(
		HOST,
		<
			"Targeting: <0>\nFollowing: <1>\nDestination: <2><3><4>",
			EventPlayer().pTarget,
			EventPlayer().pFollowing,
			EventPlayer().PF_pDestination,
			EventPlayer().PF_pIsPathfinding
				? <
					"\nPathing\nWalkingTo: <0>",
					EventPlayer().PF_pWalkingToPosition
				>
				: "",
			EventPlayer().pDownedStartTime ? "\nDowned" : ""
		>,
		EventPlayer().EyePosition() + Vector(0, 1, 0),
		ONE,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToPositionAndString
	);

	CreateBeamEffect(
		EventPlayer().PF_pIsPathfinding ? HOST : [],
		BeamType.OrisaHaltTendrilBeam,
		EventPlayer().PF_pDestination,
		EventPlayer().EyePosition(),
		Team.Team1,
		EffectRev.VisibleToPositionAndRadius
	);
}

rule: "[DEBUG] Teleport enemy dummy bot"
Event.OngoingPlayer
if (IS_HOST)
if (gInControlMode == false)
if (HOLDING_BUTTON_ENEMY)
{
	SelectTestBot();

	if (!gEnemyTestBot.IsAlive())
	{
		Respawn(gEnemyTestBot);
		Wait(0.033);
		# Reset facing direction to +X
		SetFacing(gEnemyTestBot, Left(), Relative.ToWorld);
	}

	Teleport(gEnemyTestBot, HOST_TARGET);
}

rule: "[DEBUG] Teleport friendly dummy bot"
Event.OngoingPlayer
if (IS_HOST)
if (gInControlMode == false)
if (HOLDING_BUTTON_FRIENDLY)
if (gFriendlyBot)
{
	if (!gFriendlyBot.IsAlive())
	{
		Respawn(gFriendlyBot);
		Wait(0.033);
		# Reset facing direction to +X
		SetFacing(gFriendlyBot, Left(), Relative.ToWorld);
	}

	Teleport(gFriendlyBot, HOST_TARGET);
}

rule: "[DEBUG] Enemy dummy pathfinding"
Event.OngoingPlayer
if (IS_HOST)
if (gInControlMode)
if (HOLDING_BUTTON_ENEMY)
{
	gEnemyTestBot.PF_pDestination = HOST_TARGET;
}

rule: "[DEBUG] Friendly dummy pathfinding"
Event.OngoingPlayer
if (IS_HOST)
if (gInControlMode)
if (HOLDING_BUTTON_FRIENDLY)
{
	gFriendlyBot.PF_pDestination = HOST_TARGET;
}

rule: "[DEBUG] Toggle enemy dummy facing"
Event.OngoingPlayer
if (IS_HOST)
if (gInControlMode)
if (BUTTON(Button.SecondaryFire))
{
	SelectTestBot();

	if (gEnemyTestBot.pTarget != null)
	{
		gEnemyTestBot.pTarget = null;
		StopFacing(gEnemyTestBot);
		# Reset facing direction to +X
		SetFacing(gEnemyTestBot, Left(), Relative.ToWorld);
	}
	else
	{
		gEnemyTestBot.pTarget = gFriendlyBot;
	}
}

rule: "[DEBUG] Make enemy dummy shoot"
Event.OngoingPlayer
if (IS_HOST)
if (gInControlMode)
if (BUTTON(Button.PrimaryFire))
{
	StartHoldingButton(gEnemyTestBot, Button.PrimaryFire);
	WaitUntil(!(BUTTON(Button.PrimaryFire) && gInControlMode), 120);
	StopHoldingButton(gEnemyTestBot, Button.PrimaryFire);
}

rule: "[DEBUG] Toggle friendly dummy follow"
Event.OngoingPlayer
if (IS_HOST)
if (gInControlMode)
if (BUTTON(Button.Interact))
{
	if (gFriendlyBot.pFollowing != null)
	{
		gFriendlyBot.pFollowing = null;
	}
	else
	{
		gFriendlyBot.pFollowing = HOST;
	}
}

rule: "[DEBUG] Manually revive host"
Event.OngoingPlayer
Team.Team1
if (IS_HOST)
if (HOST.pDownedStartTime)
if (BUTTON(Button.Reload))
{
	EnablePlayer();
	RevivePlayer(HOST);
}

//> TEMPORARY FOR TESTING
globalvar Player gTempBot;

rule: "[DEBUG] Temp add bot"
Event.OngoingPlayer
Team.Team1
if (IS_HOST)
if (IsCommunicating(HOST, Communication.Yes))
{
	gTempBot = CreateDummyBot(
		Hero.Soldier76,
		Team.Team1,
		-1,
		Vector(0, 0, 0),
		null
	);
}

rule: "[DEBUG] Temp remove bot"
Event.OngoingPlayer
Team.Team1
if (IS_HOST)
if (IsCommunicating(HOST, Communication.No))
{
	DestroyDummyBot(gTempBot);
}
