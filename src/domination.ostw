import "globalvars.ostw";
import "subroutines.ostw";

globalvar Player[] gDomPointAContesters;
globalvar Player[] gDomPointBContesters;

rule: "DOM Team 2 Slot 2: Create Guard and Control Point Entities"
Event.OngoingPlayer
Team.Team2
Player.Slot2
{
	CreateProgressBarHudText(gObjectivePhaseNumber == 1 ? AllPlayers() : [], ArrayContains(gDomPointAContesters, LocalPlayer()) ? gObjectiveProgress[0] : ArrayContains(gDomPointBContesters, LocalPlayer()) ? gObjectiveProgress[1] : 0.25 * (100 * ((PlayersInSlot(2, Team.Team2).pIsLivingBoss ? 1 - NormalizedHealth(PlayersInSlot(2, Team.Team2)) : 1) + (PlayersInSlot(3, Team.Team2).pIsLivingBoss ? 1 - NormalizedHealth(PlayersInSlot(3, Team.Team2)) : 1)) + gObjectiveProgress[0] + gObjectiveProgress[1]), ArrayContains(gDomPointAContesters, LocalPlayer()) ? PlayersInSlot(2, Team.Team2).pIsLivingBoss ? "Kill the Guard to unlock this point" : "Capturing..." : ArrayContains(gDomPointBContesters, LocalPlayer()) ? PlayersInSlot(3, Team.Team2).pIsLivingBoss ? "Kill the Guard to unlock the point" : "Capturing..." : IsTrueForAny(AllPlayers(Team.Team2), ArrayElement().pIsLivingBoss) ? "Kill the guards and capture the points" : "Capture the points", Location.Top, -97, ArrayContains(gDomPointAContesters, LocalPlayer()) || ArrayContains(gDomPointBContesters, LocalPlayer()) ? Color.Green : Color.Blue, ArrayContains(gDomPointAContesters, LocalPlayer()) && PlayersInSlot(2, Team.Team2).pIsLivingBoss || ArrayContains(gDomPointBContesters, LocalPlayer()) && PlayersInSlot(3, Team.Team2).pIsLivingBoss ? Color.Yellow : Color.Blue, ProgressBarHudEvaluation.VisibleToValuesAndColor, Spectators.DefaultVisibility);
	CreateEffect(gObjectivePhaseNumber == 1 && gObjectiveProgress[0] < 100 ? AllPlayers() : [], Effect.Ring, PlayersInSlot(2, Team.Team2).pIsLivingBoss ? Color.Red : CountOf(gDomPointAContesters) ? Color.Green : Color.White, gIvDomObjectivePos[0], 3, EffectRev.VisibleToPositionRadiusAndColor);
	CreateEffect(gObjectivePhaseNumber == 1 && gObjectiveProgress[1] < 100 ? AllPlayers() : [], Effect.Ring, PlayersInSlot(3, Team.Team2).pIsLivingBoss ? Color.Red : CountOf(gDomPointBContesters) ? Color.Green : Color.White, gIvDomObjectivePos[1], 3, EffectRev.VisibleToPositionRadiusAndColor);
	CreateIcon(gObjectivePhaseNumber == 1 && gObjectiveProgress[0] < 100 ? AllPlayers() : [], gIvDomObjectivePos[0] + 2 * Up(), Icon.ExclamationMark, IconRev.VisibleToPositionAndColor, PlayersInSlot(2, Team.Team2).pIsLivingBoss ? Color.Orange : Color.Yellow, true);
	CreateIcon(gObjectivePhaseNumber == 1 && gObjectiveProgress[1] < 100 ? AllPlayers() : [], gIvDomObjectivePos[1] + 2 * Up(), Icon.ExclamationMark, IconRev.VisibleToPositionAndColor, PlayersInSlot(3, Team.Team2).pIsLivingBoss ? Color.Orange : Color.Yellow, true);
	CreateInWorldText(gObjectivePhaseNumber == 1 && gObjectiveProgress[0] < 100 ? AllPlayers() : [], PlayersInSlot(2, Team.Team2).pIsLivingBoss ? "Kill Guard" : "Capture point", PlayersInSlot(2, Team.Team2).pIsLivingBoss ? PlayersInSlot(2, Team.Team2) : gIvDomObjectivePos[0] + 1.7 * Up(), 1.5, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString, Color.Yellow, Spectators.DefaultVisibility);
	CreateInWorldText(gObjectivePhaseNumber == 1 && gObjectiveProgress[1] < 100 ? AllPlayers() : [], PlayersInSlot(3, Team.Team2).pIsLivingBoss ? "Kill Guard" : "Capture point", PlayersInSlot(3, Team.Team2).pIsLivingBoss ? PlayersInSlot(3, Team.Team2) : gIvDomObjectivePos[1] + 1.7 * Up(), 1.5, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndString, Color.Yellow, Spectators.DefaultVisibility);
}

rule: "DOM Team 2 Slot 2: Contest Control Point A"
Event.OngoingPlayer
Team.Team2
Player.Slot2
if (gObjectivePhaseNumber == 1)
if (gObjectiveProgress[0] < 100)
{
	gDomPointAContesters = gCombatants.Filter(
		p => !p.pDownedStartT
		&& !(p.pIsInvisible % 3)
		&& DistanceBetween(gIvDomObjectivePos[0], Vector(XOf(PositionOf(p)), YOf(gIvDomObjectivePos[0]), ZOf(PositionOf(p)))) <= 3
		&& AbsoluteValue(YOf(PositionOf(gIvDomObjectivePos[0])) - YOf(PositionOf(p))) <= 3
		&& IsInLineOfSight(gIvDomObjectivePos[0] + Up(), p, BarrierLOS.NoBarriersBlock)
	);
	if (!PlayersInSlot(2, Team.Team2).pIsLivingBoss && CountOf(gDomPointAContesters))
	{
		gObjectiveProgress[0] += 2;
		Wait(0.25, WaitBehavior.IgnoreCondition);
		gObjectiveProgress[0] += 2;
		if (gObjectiveProgress[0] >= 100)
		{
			PlayEffect(AllPlayers(), PlayEffect.GoodPickupEffect, Color.Yellow, gIvDomObjectivePos[0], 3);
			PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, gIvDomObjectivePos[0], 200);
			gDomPointAContesters = [];
			gMoneyAmount += 70;
			if (gObjectiveProgress[1] >= 100)
			{
				gObjectivePhaseNumber = 2;
				gEnableNormalSpawns = true;
				call_reinforcements();
				async! play_incoming_sound_twice();
				Wait(2, WaitBehavior.IgnoreCondition);
				start_kill_remaining_phase();
			}
		}
		Wait(0.25, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Wait(0.5, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "DOM Team 2 Slot 2: Contest Control Point B"
Event.OngoingPlayer
Team.Team2
Player.Slot2
if (gObjectivePhaseNumber == 1)
if (gObjectiveProgress[1] < 100)
{
	gDomPointBContesters = gCombatants.Filter(
		p => !p.pDownedStartT
		&& !(p.pIsInvisible % 3)
		&& DistanceBetween(gIvDomObjectivePos[1], Vector(XOf(PositionOf(p)), YOf(gIvDomObjectivePos[1]), ZOf(PositionOf(p)))) <= 3
		&& AbsoluteValue(YOf(PositionOf(gIvDomObjectivePos[1])) - YOf(PositionOf(p))) <= 3
		&& IsInLineOfSight(gIvDomObjectivePos[1] + Up(), p, BarrierLOS.NoBarriersBlock)
	);
	if (!PlayersInSlot(3, Team.Team2).pIsLivingBoss && CountOf(gDomPointBContesters))
	{
		gObjectiveProgress[1] += 2;
		Wait(0.25, WaitBehavior.IgnoreCondition);
		gObjectiveProgress[1] += 2;
		if (gObjectiveProgress[1] >= 100)
		{
			PlayEffect(AllPlayers(), PlayEffect.GoodPickupEffect, Color.Yellow, gIvDomObjectivePos[1], 3);
			PlayEffect(AllPlayers(), PlayEffect.ExplosionSound, Color.White, gIvDomObjectivePos[1], 200);
			gDomPointBContesters = [];
			gMoneyAmount += 70;
			if (gObjectiveProgress[0] >= 100)
			{
				gObjectivePhaseNumber = 2;
				gEnableNormalSpawns = true;
				call_reinforcements();
				async! play_incoming_sound_twice();
				Wait(2, WaitBehavior.IgnoreCondition);
				start_kill_remaining_phase();
			}
		}
		Wait(0.25, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Wait(0.5, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}
