import "globalvars.ostw";
import "playervars.ostw";

globalvar Boolean gIsGmutEnabled;
globalvar Boolean gGmutSympathyGains;
globalvar Boolean gGmutSalvation;
globalvar Boolean gMutSwanSong;
globalvar Boolean gMutCounterStrike;
globalvar Boolean gMutLowBlow;

rule: "MUT Team 2 (Gamechanging Mutator): Gamechanging Mutator was enabled"
Event.OngoingPlayer
Team.Team2
if (gIsGmutEnabled)
{
	Wait(0.5, WaitBehavior.IgnoreCondition);
	if (gGmutStormRaging)
	{
		CreateEffect(pGmutVar ? AllPlayers() : [], Effect.AnaNanoBoostedEffect, Color.Team2, EventPlayer(), 1, EffectRev.VisibleTo);
	}
	if (gGmutAdaptiveShield)
	{
		CreateEffect(pGmutVar == 1 ? AllPlayers() : [], Effect.WreckingBallAdaptiveShieldTargetEffect, Color.Team2, EventPlayer(), 1, EffectRev.VisibleTo);
	}
	if (gGmutFortified)
	{
		AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, 0.4 * pHealthPercent, true, true);
	}
	gIsGmutEnabled = false;
}

rule: "MUT Team 2 (Gamechanging Mutator): Adaptive Shield"
Event.OngoingPlayer
Team.Team2
if (gGmutAdaptiveShield)
if (IsAlive(EventPlayer()))
if (!pGmutVar)
if (NormalizedHealth(EventPlayer()) <= 0.5)
{
	AbortIf(pIvIsPortal);
	if (SlotOf(EventPlayer()) == 1)
	{
		# Set Player Health converts the shield into regular HP, so wait until after
		Wait(0.016, WaitBehavior.AbortWhenFalse);
		AbortIfConditionIsFalse();
	}
	gTemp1 = CountOf(FilteredArray(gCombatants, DistanceBetween(EventPlayer(), ArrayElement()) <= 8 && IsInLineOfSight(EventPlayer(), ArrayElement(), BarrierLOS.EnemyBarriersBlock)));
	if (gTemp1)
	{
		PlayEffect(AllPlayers(), PlayEffect.GoodPickupEffect, Color.Blue, EventPlayer(), 1);
		AddHealthPoolToPlayer(EventPlayer(), HealthType.Shields, 0.75 * gTemp1 / CountOf(gCombatants) * MaxHealth(EventPlayer()), false, false);
		pHpPool[3] = LastCreatedHealthPool();
		pGmutVar = 1;
		WaitUntil(!HealthOfType(EventPlayer(), HealthType.Shields), 7);
		RemoveHealthPoolFromPlayer(pHpPool[3]);
		pGmutVar = 2;
	}
	else
	{
		pGmutVar = 2;
	}
}

rule: "MUT Team 2 (Gamechanging Mutator): Sympathy Gains"
Event.OnDeath
Team.Team2
if (gGmutSympathyGains)
if (!pIvIsPortal)
{
	PlayEffect(AllPlayers(), PlayEffect.GoodPickupEffect, Color.Black, EventPlayer(), 1);
	Wait(0.15, WaitBehavior.AbortWhenFalse);
	PlayEffect(AllPlayers(), PlayEffect.GoodPickupEffect, Color.White, EventPlayer().Position(), 1);
	PlayEffect(AllPlayers(), PlayEffect.RingExplosion, Color.Yellow, EventPlayer().Position(), pRealTier * 8 + 6);
	Heal(PlayersWithinRadius(EventPlayer(), pRealTier * 4 + 3, Team.Team2, RadiusLOS.Off), null, Min(MaxHealth(EventPlayer()) * 0.3, 500));
}

rule: "MUT Team 2 (Gamechanging Mutator): Fortified"
Event.OngoingPlayer
Team.Team2
if (pIsFortified)
if (HasStatus(EventPlayer(), Status.Stunned))
if (pGmutFortifiedBypassEndT < TotalTimeElapsed())
{
	if (HasStatus(EventPlayer(), Status.KnockedDown))
	{
		ClearStatus(EventPlayer(), Status.KnockedDown);
		Wait(1, WaitBehavior.IgnoreCondition);
	}
	else if (HasStatus(EventPlayer(), Status.Asleep))
	{
		WaitUntil(!HasStatus(EventPlayer(), Status.Asleep), 3);
		if (HasStatus(EventPlayer(), Status.Asleep))
		{
			ClearStatus(EventPlayer(), Status.Asleep);
			Wait(0.5, WaitBehavior.IgnoreCondition);
		}
	}
	else if (HasStatus(EventPlayer(), Status.Frozen))
	{
		WaitUntil(!HasStatus(EventPlayer(), Status.Frozen), 1);
		ClearStatus(EventPlayer(), Status.Frozen);
	}
	else
	{
		WaitUntil(!HasStatus(EventPlayer(), Status.Stunned), 0.5);
		ClearStatus(EventPlayer(), Status.Stunned);
	}
	Wait(0.25, WaitBehavior.AbortWhenFalse);
	LoopIfConditionIsTrue();
}

rule: "MUT Team 2 (Gamechanging Mutator): Salvation"
Event.OngoingPlayer
Team.Team2
if (gGmutSalvation)
if (IsAlive(EventPlayer()))
if (!pIsLivingBoss)
{
	SetStatus(EventPlayer(), null, Status.Unkillable, 9999);
	WaitUntil(Health(EventPlayer()) <= 1, 99999);
	PlayEffect(AllPlayers(), PlayEffect.GoodPickupEffect, Color.Purple, EventPlayer().Position(), 1);
	SetStatus(EventPlayer(), null, Status.Stunned, 1.333);
	SetStatus(EventPlayer(), null, Status.Invincible, 0.1);
	Heal(EventPlayer(), null, MaxHealth(EventPlayer()) * 0.05);
	ClearStatus(EventPlayer(), Status.Unkillable);
}

rule: "Team 2 (Mutator): Artful Dodger"
Event.OngoingPlayer
Team.Team2
if (gGmutArtfulDodger)
if (!pCanDodge)
if (IsAlive(EventPlayer()))
{
	pCanDodge = true;
}

rule: "MUT Team 2 (Mutator): Swan Song"
Event.OngoingPlayer
Team.Team2
if (gMutSwanSong)
if (IsAlive(EventPlayer()))
if (pIsLivingBoss)
{
	SetStatus(EventPlayer(), null, Status.Unkillable, 9999);
	WaitUntil(Health(EventPlayer()) <= 1, 99999);
	CreateEffect(AllPlayers(), Effect.EchoCloningEffect, Color.Team1, EventPlayer(), 1, EffectRev.VisibleToPositionAndRadius);
	pEffects[1] = LastCreatedEntity();
	PlayEffect(AllPlayers(), PlayEffect.GoodPickupEffect, Color.Violet, EventPlayer(), 1);
	SetStatus(EventPlayer(), null, Status.Stunned, 1);
	WaitUntil(EventPlayer().IsDead(), 5);
	ClearStatus(EventPlayer(), Status.Unkillable);
	Kill(EventPlayer(), null);
	DestroyEffect(pEffects[1]);
}

rule: "MUT Team 2: Counterstrike"
Event.OngoingPlayer
Team.Team2
if (gMutCounterStrike)
if (!pIsUsingBossAggression)
if (IsUsingUltimate(pMyTarget))
{
	pIsAggressive = !pIsAggressive;
	Wait(4, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
	pIsAggressive = true;
	if (RandomInteger(1, 100) > 75 && HeroOf(EventPlayer()) != Hero.Soldier76)
	{
		Wait(RandomReal(3, 7), WaitBehavior.IgnoreCondition);
		SetUltimateCharge(EventPlayer(), 100);
		PressButton(EventPlayer(), Button.Ultimate);
		Wait(RandomReal(1, 2), WaitBehavior.IgnoreCondition);
		PressButton(EventPlayer(), Button.PrimaryFire);
	}
	LoopIfConditionIsTrue();
}

rule: "MUT Team 2 (Mutator): Low Blow"
Event.PlayerDealtKnockback
Team.Team2
{
	AbortIf(!gMutLowBlow);
	Damage(Victim(), EventPlayer(), 0.5 * EventDamage());
}
