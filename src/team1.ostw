/** All of team 1's (player team's) functionalities.
*/

playervar Number downedStartTime;
playervar Number reviveProgress;
playervar Player[] reviverList;

import "shared.ostw";

void disable_player() playervar "[TEAM 1 SUBROUTINE] Disable Player"
{
	ForceThrottle(EventPlayer(), zero, 0.1, zero, 0.1, zero, 0.1);
	SetPrimaryFireEnabled(EventPlayer(), false);
	SetSecondaryFireEnabled(EventPlayer(), false);
	SetAbility1Enabled(EventPlayer(), false);
	SetAbility2Enabled(EventPlayer(), false);
	SetMeleeEnabled(EventPlayer(), false);
	SetJumpEnabled(EventPlayer(), false);
	SetCrouchEnabled(EventPlayer(), false);
	DisallowButton(EventPlayer(), Button.Ultimate);
}

void enable_player() playervar "[TEAM 1 SUBROUTINE] Enable Player"
{
	StopForcingThrottle(EventPlayer());
	SetPrimaryFireEnabled(EventPlayer(), true);
	SetSecondaryFireEnabled(EventPlayer(), true);
	SetAbility1Enabled(EventPlayer(), true);
	SetAbility2Enabled(EventPlayer(), true);
	SetMeleeEnabled(EventPlayer(), true);
	SetJumpEnabled(EventPlayer(), true);
	SetCrouchEnabled(EventPlayer(), true);
	AllowButton(EventPlayer(), Button.Ultimate);
}

rule: "[TEAM 1] Player downing"
Event.OnDeath
Team.Team1
{
	if (!downedStartTime)
	{
		downedStartTime = TotalTimeElapsed();
		disable_player();
		DisableMessages(EventPlayer());
		reviveProgress = zero;
	}
	if (EventWasEnvironment())
	{ RecoveryTeleport(); }
	Resurrect(EventPlayer());
	# Clear any temporary phased out status
	ClearStatus(EventPlayer(), Status.PhasedOut);
	SetStatus(EventPlayer(), null, Status.Invincible, 9999);
	// 0.05
	Wait(0.033, WaitBehavior.RestartWhenTrue);
	SetPlayerHealth(EventPlayer(), one);
	SetStatus(EventPlayer(), null, Status.PhasedOut, 9999);
}

rule: "[TEAM 1] Revive downed player"
Event.OngoingPlayer
Team.Team1
if (downedStartTime)
if (downedStartTime + one < TotalTimeElapsed())
{
	# Revive area is a cylinder
	reviverList = AllPlayers(Team.Team1).Filter(
		p => !p.downedStartTime
		// Check horizontal distance
		&& DistanceBetween(
			EventPlayer(),
			Vector(
				p.Position().X,
				EventPlayer().Position().Y,
				p.Position().Z
			)
		) <= 3
		// Check vertical distance
		&& AbsoluteValue(EventPlayer().Position().Y - p.Position().Y) <= 3
		// Ignore line of sight check for mei
		&& (
			HeroOf(p) == Hero.Mei
			&& IsUsingAbility1(p)
			|| IsInLineOfSight(EventPlayer(), p, BarrierLOS.NoBarriersBlock)
		)
	);

	# At least one person is reviving
	if (CountOf(reviverList))
	{
		reviveProgress += reviverList.IsTrueForAll(
			p => HasStatus(p, Status.Invincible)
			|| HasStatus(p, Status.PhasedOut)
		) ? 2.5 : 5;

		if (reviveProgress >= 100)
		{
			SmallMessage(AllPlayers(), <" <0> has been revived!", EventPlayer()>);
			downedStartTime = zero;
			enable_player();
			EnableMessages(EventPlayer());
			ClearStatus(EventPlayer(), Status.PhasedOut);
			ClearStatus(EventPlayer(), Status.Invincible);
		}
	}
	else
	{
		reviveProgress = zero;
	}

	Wait(0.2, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}
