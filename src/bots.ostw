/** Enemy bot management and ai. (Could split)
*/
import "pathfinding/pathfinding.ostw";

// Spawning bots is done from the perspective of the bot, it see how many bots are expected and spawns itself.
// Spawning of bots should be primarily handled by the gamemode.
// Could use the slot of the bot for addressing.

// I can have 19 dummy bots in total.
// I have 15 max unique skins with 5 reserved for players for a total of 10 for dummies.

// Should the friendly bot be defined and managed here?
globalvar Player friendlyBot;
globalvar Number botQuota;
playervar Player target;
playervar Player following;

void RespawnBot(in Player pDummy)
{
	# Cannot use resurrect as it breaks custom game health settings
	Respawn(pDummy);
	# Minimum time before teleport can function after calling respawn
	Wait(0.033);
	Teleport(pDummy);
}

rule: "[BOTS] Create all the dummy bots" -10
{
	# Create friendly bot
	friendlyBot = CreateDummyBot(
		Hero.Mauga,
		Team.Team1,
		6,
		Vector(0, 0, 0),
		null
	);
	friendlyBot.pfPlayerAttributes = [zero, one];
	StartForcingDummyBotName(friendlyBot, "Puipui");

	# Create enemy bots
	for (i = zero; i < 17; i++)
	{
		CreateDummyBot(
			Hero.Soldier76,
			Team.Team2,
			-1,
			Vector(0, -1000, 0),
			null
		).pfPlayerAttributes = [zero, one, 6, 10, 20];
	}
}

rule: "[BOTS] Following"
Event.OngoingPlayer
if (isDummy)
if (following != null)
# Horizontal distance to following position is more than 10
if (
	(PositionOf() * Vector(1, 0, 1))
		.DistanceTo(following.Position() * Vector(1, 0, 1)) > 10
)
{
	# Pause updates if server is being overloaded
	WaitUntil(ServerLoadAverage() < 230, 999);
	# Set the destination as the ground under the player.
	pfDestination = RayCastHitPosition(
		following.EyePosition(),
		following.Position() + Vector(0, -1000, 0),
		null,
		null,
		false
	);
	# Avoid spamming destination updates
	Wait(1);
	LoopIfConditionIsTrue();
}

rule: "[BOTS] Facing"
Event.OngoingPlayer
if (isDummy)
if (target != null)
{
	StartFacing(
		EventPlayer(),
		DirectionTowards(EyePosition(), target.EyePosition()),
		500,
		Relative.ToWorld,
		FacingRev.DirectionAndTurnRate
	);
}

rule: "[BOTS] Target LOS check"
Event.OngoingPlayer
if (isDummy)
if (target != null)
if (
	IsInLineOfSight(
		EyePosition(),
		target.EyePosition(),
		BarrierLOS.NoBarriersBlock
	) == false
)
{
	StopFacing();
	target = null;
}

// TODO Replace
Player TEMP_firstPlayer()
{
	return AllPlayers(Team.Team1).Filter(p => !p.IsDummy()).First;
}

rule: "[BOTS] Friendly bot force revive player"
Event.OngoingPlayer
if (isDummy)
if (EventPlayer() == friendlyBot)
# Will need to be changed
if (TEMP_firstPlayer().downedStartTime)
{
	while (TEMP_firstPlayer().downedStartTime)
	{
		# Continuously update the destination every second to make sure the bot stays in the revive circle
		friendlyBot.pfDestination = TEMP_firstPlayer().Position();
		Wait(1);
	}
}
