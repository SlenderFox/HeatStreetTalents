/** Compilation entry point.
 * Handles operation of the game.
*/
import "settings.lobby";

import "shared.ostw";
import "pathfinding/pathfinding.ostw";
import "bots.ostw";
import "gamemodes/invasion.ostw";
import "team1.ostw";
import "HUD.ostw";
import "debug.ostw";

void LoadSettings()
{
	// Cannot use number optimisation
	Any credits = WorkshopSettingCombo(" Heat Street Talents Revival", "Credits", 0, ["<Click here>", "ItsDeltin", "LemonAid", "Shingen", "LtVictory", "SgtMoody", "Developful", "Josbird"], 0);
}

void SelectGamemode()
{
	// Cannot use number optimisation
	if (WorkshopSettingToggle("Enabled gamemodes", "Invasion", true, 0))
	{
		gamemode.ModAppend(HS_Gamemode.Invasion);
	}
	// Cannot use number optimisation
	if (WorkshopSettingToggle("Enabled gamemodes", "High Value Target", true, 1))
	{
		gamemode.ModAppend(HS_Gamemode.HighValueTarget);
	}
	// Cannot use number optimisation
	if (WorkshopSettingToggle("Enabled gamemodes", "Domination", true, 2))
	{
		gamemode.ModAppend(HS_Gamemode.Domination);
	}

	# If the player disabled all modes, treat it as all modes enabled.
	if (CountOf(gamemode) == zero)
	{
		//gamemode = [HS_Gamemode.Invasion, HS_Gamemode.HighValueTarget, HS_Gamemode.Domination].Random();
		gamemode = <HS_Gamemode>RandomInteger(zero, 2);
	}
	else
	{
		gamemode = gamemode.Random();
	}
}

void SkipAssembleHeroes()
{
	SetMatchTime(3);
	WaitUntil(IsGameInProgress(), 3.5);
	SetMatchTime(zero);
}

rule: "[MAIN] Setup" -100
{
	EnableInspectorRecording();
	LoadSettings();
	SelectGamemode();
	# Allows the timer to be used for custom gamemode.
	DisableCompletion();
	DisableScoring();
	# Announcer will still say 'fight' at the start of the match.
	DisableAnnouncer();
	//DisableRespawning(AllPlayers());
	SetupHUD();
	SkipAssembleHeroes();
	# Respawning should be managed by the workshop.
	SetRespawnMaxTime(AllPlayers(), 9999);
}
