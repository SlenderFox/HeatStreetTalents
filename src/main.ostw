import "../settings.lobby";
import "subroutines.ostw";

globalvar Boolean is_victory_declared;
globalvar Boolean is_mutator_activation_disabled; // Useless
globalvar Number last_spawn_phase_end_t;
globalvar Number[] game_or_mutator_start_huds; // Holds TextIDs *2

void declare_victory() "Subroutine: Declare Victory"
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIf(is_victory_declared);
	is_victory_declared = true;
	DeclareTeamVictory(Team.Team1);
}

rule: "Mod by LemonAid#11644, Original mode by Shingen#21859"
{
	DisableInspectorRecording();
}

rule: "Global (Init): Set Workshop Vars, Game Vars, Disable Game Components, Create Game Entities"
{
	# Select and initialize Gamemode
	gamemode = [];
	if (WorkshopSettingToggle("Enabled Game Modes", "Invasion", true, 0))
	{
		ModifyVariable(gamemode, Operation.AppendToArray, 0);
	}
	if (WorkshopSettingToggle("Enabled Game Modes", "High Value Target", true, 1))
	{
		ModifyVariable(gamemode, Operation.AppendToArray, 1);
	}
	# Workaround: Need to reduce Slots because of spectator bug
	if (WorkshopSettingToggle("Enabled Game Modes", "Domination", true, 2) && NumberOfSlots(Team.Team1) <= 7)
	{
		ModifyVariable(gamemode, Operation.AppendToArray, 2);
	}
	if (CountOf(gamemode))
	{
		gamemode = RandomValueInArray(gamemode);
	}
	else
	{
		# Workaround: Need to reduce Slots because of spectator bug
		gamemode = RandomInteger(0, NumberOfSlots(Team.Team1) <= 7 ? 2 : 1);
	}
	if (gamemode == 2)
	{
		boss_list_1 = [Hero.Baptiste, Hero.Cassidy, Hero.Baptiste, Hero.Echo, Hero.Zarya, Hero.Lucio, Hero.Widowmaker, Hero.Ana, Hero.Orisa, Hero.Sigma, Hero.Tracer, Hero.Ana, Hero.Orisa, Hero.Hanzo, Hero.Genji, Hero.Brigitte, Hero.Widowmaker, Hero.Reaper, Hero.Kiriko, Hero.Dva, Hero.Pharah, Hero.Reinhardt];
		boss_list_2 = [Hero.Brigitte, Hero.Sombra, Hero.Reaper, Hero.Pharah, Hero.Kiriko, Hero.Tracer, Hero.Roadhog, Hero.Zarya, Hero.Lucio, Hero.Dva, Hero.Kiriko, Hero.Roadhog, Hero.Dva, Hero.Genji, Hero.Reinhardt, Hero.Mei, Hero.Cassidy, Hero.Sombra, Hero.Sigma, Hero.Echo, Hero.Brigitte, Hero.Mei];
	}
	else
	{
		boss_list_1 = [Hero.Cassidy, Hero.Baptiste, Hero.Lucio, Hero.Pharah, Hero.Widowmaker, Hero.Sombra, Hero.Reaper, Hero.Ana, Hero.Echo, Hero.Mei, Hero.Zarya, Hero.Tracer, Hero.Orisa, Hero.Kiriko, Hero.Reinhardt, Hero.Brigitte, Hero.Hanzo, Hero.Genji, Hero.Dva, Hero.Roadhog, Hero.Sigma, Hero.Reinhardt];
	}
	# 0=Easy, 1=Normal, 2=Hard, 3=Apocalypse
	temp_1 = WorkshopSettingCombo("Settings", "Difficulty", 1, ["Easy", "Normal", "Hard", "Apocalyptic"], 0);
	# 100-500%
	money_mult = WorkshopSettingInteger("Settings", "Money Generation Scalar (in Percent)", 100, 50, 500, 1);
	# 0=15w, 1=22w
	length = WorkshopSettingCombo("Settings", "Game Length", 0, ["15 Waves", "22 Waves"], 2);
	CreateHudText(AllPlayers(), null, null, <"<0> Difficulty<1>", ["Easy", "Normal", "Hard", "Apocalyptic"][temp_1], money_mult == 100 ? "" : <", +<0>% money", money_mult - 100>>, Location.Right, -100, null, null, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
	money_mult /= 100;
	if (temp_1 == 0)
	{
		diff_health_mult = 0.6;
		diff_damage_mult = 0.6;
	}
	else if (temp_1 == 1)
	{
		diff_health_mult = 0.8;
		diff_damage_mult = 0.8;
	}
	else if (temp_1 == 2)
	{
		is_hard_mode_enabled = true;
		diff_health_mult = 1.15;
		diff_damage_mult = 1.15;
		mut_count = 5;
	}
	else
	{
		is_apocalyptic = true;
		money_mult *= 1.4;
		diff_health_mult = 1.5;
		diff_damage_mult = 1.25;
		mut_count = 5;
	}
	# 0=On, 1=Off
	is_mutator_activation_disabled = false;
	if (!is_mutator_activation_disabled)
	{
		is_mutator_mode_enabled = true;
		money_mult *= 2;
	}
	DisableCompletion();
	DisableScoring();
	DisableAnnouncer();
	progress_bar_strings = ["□□□□□", "▣□□□□", "■□□□□", "■▣□□□", "■■□□□", "■■▣□□", "■■■□□", "■■■▣□", "■■■■□", "■■■■▣", "■■■■■"];
	char_string = "0123456789!?#$%";
	aim_offset = 0.5 * Down();
	mutators_list[20] = null;
	mutators_list = MappedArray(mutators_list, CurrentArrayIndex());
	gmut_list[4] = null;
	gmut_list = MappedArray(gmut_list, CurrentArrayIndex());
	if (is_hard_mode_enabled || is_apocalyptic)
	{
		for (Number i! = -1; 3; 1)
		{
			MinWait();
			mut_add_mutator();
		}
	}
	# Initialize Map Specific Variables
	if (CurrentMap() == Map.Chateau_Guillard || CurrentMap() == Map.Chateau_Guillard_Halloween)
	{
		set_map_cg();
		is_map_cg = true;
	}
	else
	{
		CreateHudText(AllPlayers(), "\n\n\n\n\n\n\n\n\n\n\n\n\n\n     This Map is not supported! Restart and choose a valid map.     \n\n\n\n\n\n\n\n\n\n\n\n\n\n", null, null, Location.Top, -1000, Color.Yellow, null, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
	}
	nodes_count = CountOf(nodes);
	buy_menu_left_up_forward[1] = DirectionFromAngles(HorizontalAngleFromDirection(buy_menu_left_up_forward[2]), VerticalAngleFromDirection(buy_menu_left_up_forward[2]) - 90);
	buy_menu_left_up_forward[0] = CrossProduct(buy_menu_left_up_forward[1], buy_menu_left_up_forward[2]);
	buy_menu_base_pos = buy_menu_cam_pos - (9 * buy_menu_left_up_forward[1]) + (142 * buy_menu_left_up_forward[2]);
	# Workaround: Need to reduce Slots because of spectator bug
	if (NumberOfSlots(Team.Team1) > 8)
	{
		CreateHudText(AllPlayers(), "\n\n\n\n\n\n\n\n\n\n\n\n\n\n     Too many player slots! Set Max Team 1 Players to 5 or lower and restart.     \n\n\n\n\n\n\n\n\n\n\n\n\n\n", null, null, Location.Top, -1000, Color.Yellow, null, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
	}
	# Create HUDs
	CreateHudText(AllPlayers(), null, null, <"Heat Street: Talents - 3.4.6 | KFVAY - Chateau Guillard)​ ​-​ ​<0><1>", ["Invasion", "High Value Target", "Domination"][gamemode], MatchTime() ? <"<0><1><2>", MatchTime() > 10 ? "0:" : "", RoundToInteger(RoundToInteger(10 * MatchTime(), Rounding.Up) / 10, Rounding.Down), MatchTime() > 10 ? "" : <".<0>", RoundToInteger(10 * MatchTime(), Rounding.Up) % 10>> : "">, Location.Top, -100, null, null, Color.White, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	if (length == 0)
	{
		CreateHudText(AllPlayers(), <"Wave <0>/15 ", wave_number>, null, null, Location.Top, -99, Color.White, null, null, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	}
	else if (length == 1)
	{
		CreateHudText(AllPlayers(), <"Wave <0>/22 ", wave_number>, null, null, Location.Top, -99, Color.White, null, null, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	}
	if (gamemode == 2)
	{
		CreateHudText(AllPlayers(), null, objective_phase_number == 1 ? "" : "\n\n\n", null, Location.Top, -98, null, Color.White, null, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	}
	else
	{
		CreateHudText(AllPlayers(), null, objective_phase_number == 1 || objective_phase_number == 2 ? "" : "\n\n\n", null, Location.Top, -98, null, Color.White, null, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	}
	CreateHudText(FilteredArray(combatants, DistanceBetween(ArrayElement(), ability_shop_pos) > 2), <"\n<0>\n\n Press <1> to Start \n", ["   Invasion", "High Value Target", "    Domination"][gamemode], InputBindingString(Button.Interact)>, null, null, Location.Top, -92, Color.White, null, null, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	game_or_mutator_start_huds[0] = LastTextID();
	CreateHudText(FilteredArray(combatants, DistanceBetween(ArrayElement(), ability_shop_pos) > 2), null, null, "Change the Objective in the Workshop Settings", Location.Top, -91, null, null, Color.Green, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
	game_or_mutator_start_huds[1] = LastTextID();
	CreateHudText(FilteredArray(combatants, !ArrayElement().downed_start_t && (ArrayElement().is_changing_heroes || objective_phase_number == 0 && !ArrayElement().in_buy_menu_start_t)), <"\n\n\n    You can change Heroes now\n\n Hold <0> to open the Hero menu \n", InputBindingString(Button.Reload)>, null, null, Location.Top, -90, Color.Yellow, null, null, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	CreateHudText(FilteredArray(combatants, ArrayElement().downed_start_t), null, null, <"Waiting for revival. Press <0> to spectate the next player.", InputBindingString(Button.Jump)>, Location.Top, -70, null, null, Color.Yellow, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	CreateHudText(LocalPlayer(), null, null, LocalPlayer().Tut_Active ? "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n" : <"Press [<0>] + [<1>] to toggle hud", InputBindingString(Button.Crouch), InputBindingString(Button.Reload)>, Location.Left, 9, null, null, Color.Orange, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	CreateProgressBarHudText(LocalPlayer().downed_start_t ? LocalPlayer().revive_timer : IsTrueForAny(combatants, ArrayContains(ArrayElement().revivers, LocalPlayer())) ? LocalPlayer() : [], LocalPlayer().downed_start_t ? LocalPlayer().revive_timer : LastOf(SortedArray(FilteredArray(combatants, ArrayContains(ArrayElement().revivers, LocalPlayer())), ArrayElement().revive_timer)).revive_timer, LocalPlayer().downed_start_t ? "You are being revived" : <"Reviving <0>", CountOf(FilteredArray(combatants, ArrayContains(ArrayElement().revivers, LocalPlayer()))) > 1 ? <"<0> Teammates", CountOf(FilteredArray(combatants, ArrayContains(ArrayElement().revivers, LocalPlayer())))> : FilteredArray(combatants, ArrayContains(ArrayElement().revivers, LocalPlayer()))[0]>, Location.Top, -60, LocalPlayer().downed_start_t ? LocalPlayer().is_revive_slow : IsTrueForAll(combatants, !ArrayContains(ArrayElement().revivers, LocalPlayer()) || ArrayElement().is_revive_slow) ? Color.Orange : Color.SkyBlue, Color.White, ProgressBarHudEvaluation.VisibleToValuesAndColor, Spectators.DefaultVisibility);
	CreateHudText(is_infrasight_on ? AllPlayers() : [], <"<0> Enemies have improved aim!", AbilityIconString(Hero.Widowmaker, Button.Ultimate)>, null, null, Location.Top, -50, Color.Violet, null, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
	CreateHudText(IsTrueForAny(PlayersOnHero(Hero.Soldier76, Team.Team2), ArrayElement().ab_var_1 && ArrayElement().target == LocalPlayer()) ? LocalPlayer() : [], <"<0> Locked on!", AbilityIconString(Hero.Soldier76, Button.Ultimate)>, null, null, Location.Top, -49, CustomColor(245 + 10 * SineFromRadians(4 * TotalTimeElapsed()), 205 + 50 * SineFromRadians(4 * TotalTimeElapsed()), 200 * SineFromRadians(4 * TotalTimeElapsed()), 255), null, null, HudTextRev.VisibleToAndColor, Spectators.DefaultVisibility);
	CreateHudText(AllPlayers(), null, null, "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", Location.Top, -1, null, null, Color.White, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
	CreateHudText(AllPlayers(Team.Team2), <"Server Load: <0>, Average: <1>, Peak: <2>", ServerLoad(), ServerLoadAverage(), ServerLoadPeak()>, null, null, Location.Left, -110, is_waiting_to_remove_bot ? Color.Yellow : Color.White, null, null, HudTextRev.VisibleToStringAndColor, Spectators.DefaultVisibility);
	CreateHudText([], null, "Mod by Lemonaid:\nChateau Guillard: KFVAY\nKanezaka: H4H7K\nDorado: NNNS6\nEichenwalde: MH9DN\nHollywood: K3235\nMalevento: 8GRV8\\Rout", "____\nCredits to:\n Shingen\n SgtMoody\nDevelopful\n", Location.Left, -1000, Color.White, Color.LimeGreen, Color.Green, HudTextRev.VisibleTo, Spectators.VisibleAlways);
	# Create Sombra Stealth Timer IWT
	CreateProgressBarInWorldText(HeroOf(LocalPlayer()) == Hero.Sombra && LocalPlayer().is_invisible ? LocalPlayer() : [], LocalPlayer().sombra_stealth_timer, "Invisible", UpdateEveryFrame(EyePosition(LocalPlayer()) + 100 * DirectionFromAngles(HorizontalFacingAngleOf(LocalPlayer()), VerticalFacingAngleOf(LocalPlayer()) + 13.5)), 1.2, Clipping.DoNotClip, Color.Purple, Color.White, ProgressBarWorldEvaluation.VisibleToPositionAndValues, Spectators.DefaultVisibility);
	money_amount = 1400;
	set_random_perks();
	# Priority A: Players to Bots Damage Increase
	StartDamageModification(FilteredArray(AllPlayers(Team.Team2), ArrayElement().is_target_in_los && ArrayElement().target.ab_priority == 1), combatants, 125, DamageModificationRev.ReceiversAndDamagers);
	# Priority A: Bots to Players Damage Decrease
	StartDamageModification(combatants, FilteredArray(AllPlayers(Team.Team2), ArrayElement().is_target_in_los && ArrayElement().target.ab_priority == 1), 75, DamageModificationRev.ReceiversAndDamagers);
	# Priority C: Players to Players Healing Increase
	StartHealingModification(FilteredArray(combatants, NormalizedHealth(ArrayElement()) <= 0.5 && ArrayElement().last_damage_taken_t + 2.5 > TotalTimeElapsed()), FilteredArray(combatants, ArrayElement().ab_priority == 3), 140, HealingModificationRev.ReceiversDamagersAndDamagePercent);
	# Nemesis: Your Nemesis IWT
	CreateInWorldText(LocalPlayer().nemesis_killer ? LocalPlayer() : [], "Your Nemesis", LocalPlayer().nemesis_killer, 1.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndPosition, Color.Team2, Spectators.DefaultVisibility);
	CreateEffect(AllPlayers(), Effect.Ring, Color.SkyBlue, ability_shop_pos, 2, EffectRev.VisibleTo);
	CreateInWorldText(AllPlayers(), "Ability Shop", ability_shop_pos, 1.5, Clipping.DoNotClip, InworldTextRev.VisibleTo, Color.SkyBlue, Spectators.DefaultVisibility);
	CreateHudText(!LocalPlayer().is_combatant || LocalPlayer().downed_start_t || LocalPlayer().in_buy_menu_start_t || LocalPlayer().is_changing_heroes ? [] : LocalPlayer(), DistanceBetween(LocalPlayer(), ability_shop_pos) <= 2 ? MatchTime() ? <"Press <0> to buy Abilities", InputBindingString(Button.Interact)> : <"\n Press <0> to buy Abilities \n", InputBindingString(Button.Interact)> : LocalPlayer().can_use_drop_in_buy_menu || MatchTime() ? <"Hold <0> to buy Abilities", InputBindingString(Button.Interact)> : "", null, null, Location.Top, -80, Color.Green, null, null, HudTextRev.VisibleToAndString, Spectators.DefaultVisibility);
	# Create Buy Menu IWTs, on scale 2.5 1 space is 8.5 pixels
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃", buy_menu_base_pos - 21 * buy_menu_left_up_forward[1] + 90 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleTo, Color.White, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃", buy_menu_base_pos - 21 * buy_menu_left_up_forward[1] - 90 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleTo, Color.White, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Refund", buy_menu_base_pos + 45 * buy_menu_left_up_forward[1] + 90 * buy_menu_left_up_forward[0], 3, Clipping.DoNotClip, InworldTextRev.VisibleTo, Color.Green, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), <"[<0>] <1>", InputBindingString(Button.Melee), LocalPlayer().is_showing_active_abilities ? "Show passive Abilities" : "Show active Abilities">, buy_menu_base_pos + 45 * buy_menu_left_up_forward[1], 3, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.Green, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), <"[<0>] Leave", InputBindingString(Button.Interact)>, buy_menu_base_pos + 45 * buy_menu_left_up_forward[1] - 90 * buy_menu_left_up_forward[0], 3, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.Green, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().ab_priority ? "Priority A\n  Swap" : "Priority A\n 1200$", buy_menu_base_pos + 20 * buy_menu_left_up_forward[1] + 112.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().ab_priority ? Color.Yellow : CustomColor(0, 134, 171, 255), Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().ab_priority ? "Priority B\n  Swap" : "Priority B\n 1200$", buy_menu_base_pos - 2.5 * buy_menu_left_up_forward[1] + 112.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().ab_priority ? Color.Yellow : CustomColor(0, 134, 171, 255), Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().ab_priority ? "Priority C\n  Swap" : "Priority C\n 1200$", buy_menu_base_pos - 25 * buy_menu_left_up_forward[1] + 112.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().ab_priority ? Color.Yellow : CustomColor(0, 134, 171, 255), Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Stim Infusion\n    Swap" : "Stim Infusion\n   1200$" : LocalPlayer().ab_headhunter ? "Headhunter II\n  800$" : "Headhunter I\n  800$", buy_menu_base_pos + 20 * buy_menu_left_up_forward[1] + 67.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : LocalPlayer().ab_headhunter < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Smoke Bomb\n    Swap" : "Smoke Bomb\n   1200$" : LocalPlayer().ab_antigens ? "Antigens II\n   600$" : "Antigens I\n   600$", buy_menu_base_pos - 2.5 * buy_menu_left_up_forward[1] + 67.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : LocalPlayer().ab_antigens < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? "" : LocalPlayer().ab_quick_fix ? "Quick Fix II\n  700$" : "Quick Fix I\n  700$", buy_menu_base_pos - 25 * buy_menu_left_up_forward[1] + 67.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().ab_quick_fix < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Cloak\n Swap" : "Cloak\n1200$" : LocalPlayer().ab_charged ? "Charged II\n  700$" : "Charged I\n  700$", buy_menu_base_pos + 20 * buy_menu_left_up_forward[1] + 22.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : LocalPlayer().ab_charged < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Resurgence\n   Swap" : "Resurgence\n  1200$" : LocalPlayer().ab_haste ? "Haste II\n  800$" : "Haste I\n  800$", buy_menu_base_pos - 2.5 * buy_menu_left_up_forward[1] + 22.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : LocalPlayer().ab_haste < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? "" : LocalPlayer().ab_heavy_impact ? "Heavy Impact II\n  1000$" : "Heavy Impact I\n  1000$", buy_menu_base_pos - 25 * buy_menu_left_up_forward[1] + 22.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().ab_heavy_impact < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Feint\nSwap" : "Feint\n1200$" : LocalPlayer().ab_second_wind ? "Second Wind II\n   1000$" : "Second Wind I\n   1000$", buy_menu_base_pos + 20 * buy_menu_left_up_forward[1] - 22.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : LocalPlayer().ab_second_wind < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Tear Gas\n Swap" : "Tear Gas\n   1200$" : LocalPlayer().ab_triage ? "Triage II\n  700$" : "Triage I\n  700$", buy_menu_base_pos - 2.5 * buy_menu_left_up_forward[1] - 22.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : LocalPlayer().ab_triage < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? "" : LocalPlayer().ab_resilience ? "Resilience II\n   800$" : "Resilience I\n   800$", buy_menu_base_pos - 25 * buy_menu_left_up_forward[1] - 22.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().ab_resilience < 2 ? Color.Green : Color.Gray, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Frenzy\n  Swap" : "Frenzy\n 1200$" : "+5% Health\n   500$", buy_menu_base_pos + 20 * buy_menu_left_up_forward[1] - 67.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : Color.Green, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? "Chain Hack\n   Swap" : "Chain Hack\n  1200$" : "+5% Damage\n  500$", buy_menu_base_pos - 2.5 * buy_menu_left_up_forward[1] - 67.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToStringAndColor, LocalPlayer().is_showing_active_abilities ? LocalPlayer().active_ab_number ? Color.Yellow : Color.Green : Color.Green, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), LocalPlayer().is_showing_active_abilities ? "" : "+5% Healing\n  500$", buy_menu_base_pos - 25 * buy_menu_left_up_forward[1] - 67.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.Green, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), "Limited offer!", buy_menu_base_pos + 22.5 * buy_menu_left_up_forward[1] - 112.5 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.White, Spectators.DefaultVisibility);
	CreateInWorldText(LocalPlayer().in_buy_menu_start_t && LocalPlayer().is_showing_active_abilities ? LocalPlayer() : [], <"Hold or double tap <0> to use your active ability\n", InputBindingString(Button.Melee)>, buy_menu_base_pos - 25 * buy_menu_left_up_forward[1], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.White, Spectators.DefaultVisibility);
	CreateInWorldText(FilteredArray(combatants, ArrayElement().in_buy_menu_start_t), <"Press <0> to buy\n", InputBindingString(Button.PrimaryFire)>, buy_menu_base_pos - 74 * buy_menu_left_up_forward[1] - 55 * buy_menu_left_up_forward[0], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.White, Spectators.DefaultVisibility);
	# Create Ability Entities and Cursor
	CreateInWorldText(LocalPlayer().in_buy_menu_start_t ? LocalPlayer() : [], <"<0>$\n", RoundToInteger(money_mult * money_amount - LocalPlayer().money_spent_amount, Rounding.Down)>, buy_menu_base_pos - 74 * buy_menu_left_up_forward[1], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.White, Spectators.DefaultVisibility);
	CreateInWorldText(LocalPlayer().in_buy_menu_start_t ? LocalPlayer() : [], "▲", UpdateEveryFrame(buy_menu_base_pos - (4 + VerticalFacingAngleOf(LocalPlayer())) * buy_menu_left_up_forward[1] + HorizontalFacingAngleOf(LocalPlayer()) * buy_menu_left_up_forward[0]), 4, Clipping.DoNotClip, InworldTextRev.VisibleToPositionAndColor, CustomColor(245 + 10 * SineFromRadians(4 * TotalTimeElapsed()), 205 + 50 * SineFromRadians(4 * TotalTimeElapsed()), 200 * SineFromRadians(4 * TotalTimeElapsed()), 255), Spectators.DefaultVisibility);
	# Use Update Every Frame to avoid showing the String when the cursor is out of bounds, resulting in 0
	CreateInWorldText(UpdateEveryFrame(LocalPlayer().in_buy_menu_start_t && AbsoluteValue(HorizontalFacingAngleOf(LocalPlayer())) < 135 && AbsoluteValue(VerticalFacingAngleOf(LocalPlayer()) + 11.25) < 45 ? LocalPlayer() : []), UpdateEveryFrame(VerticalFacingAngleOf(LocalPlayer()) < -33.75 ? ["Leave Buy Menu\n", LocalPlayer().is_showing_active_abilities ? "Swap to the passive abilities page\n" : "Swap to the active abilities page\n", "Refund your money\n"][RoundToInteger((HorizontalFacingAngleOf(LocalPlayer()) + 135) / 90, Rounding.Down)] : [VerticalFacingAngleOf(LocalPlayer()) < -11.25 ? "The limited offer changes every wave\n" : ["Mystery Swap: Periodically swap to a random hero with a free ult\n         Health, damage and healing is increased by 20%", "Bulletstorm: Your weapon can hold unlimited ammo\n", "Die Hard: Your health regeneration delay is halved\n", <"Brass Knuckles: While using quick melee you are immune to Cloakers' charge attack\n<0>", "     Your quick melee attack knocks enemies down (15 second cooldown)">, "Vampiric: Heal for 30% of all dealt damage\n", "Crash N' Dash: Regenerate health while moving faster than 8 meters per second\n", "Golden Hour: You can be revived twice as fast\n", "Supercharge: Healing allies slowly charges their ultimate\n", "Nemesis: After going down automatically revive yourself when your killer dies\n", "Spec Ops: Gain 50 armour and immunity to grenadier smokes\n", "Sharpshooter: Deal 50% more damage to enemies that are further than 20 meters away\n", "Shockproof: Gain +15% speed and pass through enemies. \nBecome immune and deflect Taser electrocution attempts", <"<0>: <1>", LocalPlayer().talent_text[1], LocalPlayer().talent_text[2]>, <"<0>: <1>", LocalPlayer().talent_text[3], LocalPlayer().talent_text[4]>][current_perks[VerticalFacingAngleOf(LocalPlayer()) >= 11.25]], (LocalPlayer().is_showing_active_abilities ? ["Frenzy: Become invincible and force enemies to target you\n", <"          Chain Hack: Hack and electrocute an enemy\n<0>", "Can jump to nearby enemies up to 3 times with a shorter duration after each jump">, ""] : ["Increase your health by 5%\n", "Increase your damage by 5%\n", "Increase your healing by 5%\n"])[RoundToInteger((VerticalFacingAngleOf(LocalPlayer()) + 33.75) / 22.5, Rounding.Down)], (LocalPlayer().is_showing_active_abilities ? ["Feint: Dodge and dash into any direction, creating an explosion from start to finish", "Tear Gas: Launch a grenade that releases lingering noxious gas\n                 Enemies in the gas get stunned", ""] : [LocalPlayer().ab_second_wind ? "Second Wind II: Revive yourself when downed. Can only happen once every 60 seconds" : "Second Wind I: Revive yourself when downed. Can only happen once every 90 seconds", LocalPlayer().ab_triage ? "Triage II: Heal 50% more to players under 50% health\n" : "Triage I: Heal 25% more to players under 50% health\n", LocalPlayer().ab_resilience ? "Resilience II: Receive 20% less damage\nReceive 60% less knockback and inflict 60% more" : "Resilience I: Receive 20% less damage\nReceive 30% less knockback and inflict 30% more"])[RoundToInteger((VerticalFacingAngleOf(LocalPlayer()) + 33.75) / 22.5, Rounding.Down)], (LocalPlayer().is_showing_active_abilities ? ["Cloak: Become invisible and freeze nearby enemies when you become visible again\n", "   Resurgence: Heal yourself for 300 health per second\nIf you are at full health, heal a nearby injured ally instead", ""] : [LocalPlayer().ab_charged ? "Charged II: Ultimates cost 30% less\n" : "Charged I: Ultimates cost 15% less\n", LocalPlayer().ab_haste ? "Haste II: Ability cooldown is reduced by 50%\nDoes not affect abilities with multiple charges" : "Haste I: Ability cooldown is reduced by 25%\nDoes not affect abilities with multiple charges", LocalPlayer().ab_heavy_impact ? "Heavy Impact II: Every hit has a chance to stun the enemy for 2 seconds\n" : "Heavy Impact I: Every hit has a chance to stun the enemy for 1 second\n"])[RoundToInteger((VerticalFacingAngleOf(LocalPlayer()) + 33.75) / 22.5, Rounding.Down)], (LocalPlayer().is_showing_active_abilities ? ["Stim Infusion: Instantly start health regeneration\nGain +100% damage, +100% healing and +50% speed", "      Smoke Bomb: Create a smoke screen\nEnemies are less accurate when targeting allies in the smoke", ""] : [LocalPlayer().ab_headhunter ? "Headhunter II: Critical hits deal 60% more damage\n" : "Headhunter I: Critical hits deal 30% more damage\n", LocalPlayer().ab_antigens ? "Antigens II: Receive 40% more healing and a natural overtime heal" : "Antigens I: Receive 20% more healing and a natural overtime heal", LocalPlayer().ab_quick_fix ? "Quick Fix II: Eliminations restore 100 HP and shortly increase speed by 30%\n" : "Quick Fix I: Eliminations restore 50 HP and shortly increase speed by 15%\n"])[RoundToInteger((VerticalFacingAngleOf(LocalPlayer()) + 33.75) / 22.5, Rounding.Down)], ["    Priority A: Enemies are more likely to target you\nEnemies targeting you take 25% more and deal 25% less damage", <"         Priority B: Enemies are less likely to target you\n<0>", "Gain +20% damage and speed if you did not take damage in the last 3 seconds">, <"  Priority C: Enemies are much less likely to target you\n<0>", "Heal 40% more to allies in combat. Heal for 25% of dealt healing">][RoundToInteger((VerticalFacingAngleOf(LocalPlayer()) + 33.75) / 22.5, Rounding.Down)]][RoundToInteger((HorizontalFacingAngleOf(LocalPlayer()) + 135) / 45, Rounding.Down)]), buy_menu_base_pos - 55 * buy_menu_left_up_forward[1], 2.5, Clipping.DoNotClip, InworldTextRev.VisibleToAndString, Color.White, Spectators.DefaultVisibility);
	# Skip Assembling Heroes
	SetMatchTime(3);
	WaitUntil(IsGameInProgress(), 3.5);
	SetMatchTime(0);
	# Workaround: Need to reduce Slots because of spectator bug
	if (NumberOfSlots(Team.Team1) <= 8)
	{
		CreateDummyBot(Hero.Ana, Team.Team2, gamemode, 1000 * Down(), Forward());
		if (NumberOfSlots(Team.Team1) <= 8)
		{
			CreateDummyBot(Hero.Roadhog, Team.Team2, 3, 1000 * Down(), Forward());
		}
		if (NumberOfSlots(Team.Team1) <= 5)
		{
			CreateDummyBot(Hero.Cassidy, Team.Team2, 4, 1000 * Down(), Forward());
		}
		if (NumberOfSlots(Team.Team1) <= 6)
		{
			CreateDummyBot(Hero.Cassidy, Team.Team2, 5, 1000 * Down(), Forward());
		}
		CreateDummyBot(Hero.Soldier76, Team.Team2, 6, 1000 * Down(), Forward());
		CreateDummyBot(Hero.Soldier76, Team.Team2, 7, 1000 * Down(), Forward());
		CreateDummyBot(Hero.Soldier76, Team.Team2, 8, 1000 * Down(), Forward());
		CreateDummyBot(Hero.Soldier76, Team.Team2, 9, 1000 * Down(), Forward());
		CreateDummyBot(Hero.Soldier76, Team.Team2, 10, 1000 * Down(), Forward());
	}
	is_gmut_enabled = true;
	Wait(2, WaitBehavior.IgnoreCondition);
}

// After the other settings
rule: "Special thanks"
{
	Any Special_Thanks = WorkshopSettingCombo("Credits", "Thank you to", 0, ["LemonAid", "Shingen", "LtVictory", "SgtMoody", "Developful"], 0);
}

rule: "Global (First Wave): Create Mutator Start HUD, Scale Values, Set Level"
if (wave_number == 0)
if (IsTrueForAny(combatants, IsButtonHeld(ArrayElement(), Button.Interact) && DistanceBetween(ArrayElement(), ability_shop_pos) > 2))
{
	DestroyHudText(game_or_mutator_start_huds[0]);
	DestroyHudText(game_or_mutator_start_huds[1]);
	EnableMusic();
	wave_number = 1;
	SetUltimateCharge(combatants, 0);
	AllPlayers(Team.Team2).base_tier = 1;
	enable_normal_spawns = true;
	ModifyTeamScore(Team.Team1, 1);
	if (gamemode == 2)
	{
		enable_objective_enemy_spawn = 2;
		iv_dom_objective_pos = RandomValueInArray(iv_dom_objective_all_pos_list);
		objective_progress = [0, 0];
	}
	else
	{
		enable_objective_enemy_spawn = true;
		(<Player>PlayersInSlot(gamemode, Team.Team2)).base_tier = -1;
	}
}

rule: "Global (Next Wave): Revive Players, Scale Values, Set Level, Set Mutators"
if (objective_phase_number == 3)
if (NumberOfLivingPlayers(Team.Team2) == 0)
{
	if (wave_number >= 15 && length == 0)
	{
		async! declare_victory();
	}
	else if (wave_number >= 22 && length == 1)
	{
		async! declare_victory();
	}
	objective_phase_number = 0;
	(<Player>FilteredArray(combatants, ArrayElement().downed_start_t && ArrayElement().downed_start_t + 0.1 < TotalTimeElapsed())).downed_start_t = false;
	BigMessage(AllPlayers(), "Wave cleared!");
	money_amount += (wave_number >= 2 ? 30 : 45) + 25 * wave_number;
	set_random_perks();
	if (is_mutator_mode_enabled && wave_number % 2 == 1 || is_apocalyptic)
	{
		SkipIf(is_hard_mode_enabled || is_apocalyptic, 1);
		mut_count += 1;
		mut_add_mutator();
		SkipIf(!(is_hard_mode_enabled || is_apocalyptic), 1);
		mut_count += 1;
	}
	DisableMusic();
	SetMatchTime(20);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	WaitUntil(!MatchTime(), 99999);
	EnableMusic();
	wave_number += 1;
	enable_normal_spawns = true;
	ModifyTeamScore(Team.Team1, 1);
	if (gamemode == 2)
	{
		enable_objective_enemy_spawn = 2;
		hvt_dom_objective_killed_count = false;
		iv_dom_objective_pos = RandomValueInArray(RemoveFromArray(iv_dom_objective_all_pos_list, iv_dom_objective_pos));
		objective_progress = [0, 0];
	}
	else
	{
		enable_objective_enemy_spawn = true;
	}
	if (wave_number == 2)
	{
		(<Player>PlayersInSlot(5, Team.Team2)).base_tier = 2;
		(<Player>PlayersInSlot(6, Team.Team2)).base_tier = 2;
	}
	else if (wave_number == 3)
	{
		(<Player>PlayersInSlot(8, Team.Team2)).base_tier = 2;
	}
	else if (wave_number == 4)
	{
		(<Player>PlayersInSlot(2, Team.Team2)).base_tier = 3;
		(<Player>PlayersInSlot(3, Team.Team2)).base_tier = 3;
	}
	else if (wave_number == 5)
	{
		(<Player>PlayersInSlot(7, Team.Team2)).base_tier = 2;
	}
	else if (wave_number == 8)
	{
		(<Player>PlayersInSlot(7, Team.Team2)).base_tier = 3;
	}
	else if (wave_number == 9)
	{
		(<Player>PlayersInSlot(4, Team.Team2)).base_tier = 3;
	}
	AbortIf(!mut_expendable);
	(<Player>FilteredArray(PlayersOnHero(Hero.Soldier76, Team.Team2), ArrayElement().base_tier <= 2)).is_expendable = true;
}

rule: "Global: Enable normal Spawns"
if (objective_phase_number == 1 || objective_phase_number == 2)
if (!enable_normal_spawns)
if (NumberOfLivingPlayers(Team.Team2) < NumberOfPlayers(Team.Team2))
{
	temp_1 = FilteredArray(AllLivingPlayers(Team.Team2), !ArrayElement().is_living_boss);
	temp_1 = 2 * CountOf(FilteredArray(temp_1, ArrayElement().real_tier <= 2)) + 5 * CountOf(FilteredArray(temp_1, ArrayElement().real_tier == 3)) + 10 * CountOf(FilteredArray(temp_1, ArrayElement().real_tier == 4));
	if (temp_1 <= Max(5, TotalTimeElapsed() - last_spawn_phase_end_t - 25 - 20 * CountOf(FilteredArray(combatants, ArrayElement().downed_start_t)) / combatants_count))
	{
		Wait((gamemode == 1 && objective_phase_number == 1 || gamemode == 2 && IsTrueForAny(AllLivingPlayers(Team.Team2), ArrayElement().is_living_boss) ? 11 : 6) - (mut_reinforcements ? 3 : 0), WaitBehavior.AbortWhenFalse);
		AbortIfConditionIsFalse();
		enable_normal_spawns = true;
		ModifyTeamScore(Team.Team1, 1);
	}
	else
	{
		Wait(1, WaitBehavior.AbortWhenFalse);
		LoopIfConditionIsTrue();
	}
}

rule: "Global: Disable normal Spawns"
if (objective_phase_number == 1 || objective_phase_number == 2)
if (enable_normal_spawns)
if (NumberOfLivingPlayers(Team.Team2) == NumberOfPlayers(Team.Team2))
{
	enable_normal_spawns = false;
	last_spawn_phase_end_t = TotalTimeElapsed();
}

rule: "Global: Defeat"
if (wave_number > 0)
if (IsTrueForAll(combatants, ArrayElement().downed_start_t))
{
	Wait(2, WaitBehavior.AbortWhenFalse);
	AbortIf(is_victory_declared);
	is_victory_declared = true;
	DeclareTeamVictory(Team.Team2);
}

rule: "Global: Anti-crash"
if (NumberOfPlayers(Team.Team2) > 7)
if (ServerLoadAverage() >= 255)
{
	is_load_limit_reached = true;
	if (!is_waiting_to_remove_bot && wave_number > 0)
	{
		WaitUntil(ServerLoadAverage() < 255, 4);
		if (ServerLoadAverage() >= 255)
		{
			is_waiting_to_remove_bot = true;
			WaitUntil(ServerLoadAverage() < 255, 99999);
		}
	}
	else
	{
		WaitUntil(ServerLoadAverage() < 255, 99999);
	}
	is_load_limit_reached = false;
}

rule: "All Teams: Player left Match, Scale Damage"
Event.OnPlayerLeave
{
	update_combatants();
	temp_2 = (mut_emp_rounds ? 2 : 1) * (20 + 8.25 * (wave_number - 1 + Max(0, wave_number - 9))) * (0.139 + 0.2 * combatants_count) * 9 / NumberOfPlayers(Team.Team2);
	for (temp_1 = 0; NumberOfLivingPlayers(Team.Team2); 1)
	{
		SetDamageDealt(AllLivingPlayers(Team.Team2)[temp_1], AllLivingPlayers(Team.Team2)[temp_1].Damage_Dealt * temp_2);
	}
}

import "pathing.ostw";
import "bots.ostw";
import "team1.ostw";
import "perks.ostw";
import "mutators.ostw";
import "invasion.ostw";
import "highvaluetarget.ostw";
import "domination.ostw";
import "info.ostw";
import "talents.ostw";
