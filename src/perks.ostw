import "playervars.ostw";
import "subroutines.ostw";

playervar Number pCurrentQuickFixSpeedBonus;

rule: "Team 1 (Ability): Priority C"
Event.OnHealingDealt
Team.Team1
if (pAbPriority == 3)
if (Healee() != EventPlayer())
if (EventHealing())
{
	SetPlayerHealth(EventPlayer(), EventPlayer().Health() + 0.4 * EventHealing());
}

rule: "Team 1 (Ability): Charged"
Event.OngoingPlayer
Team.Team1
if (pAbCharged)
if (UltimateChargePercent(EventPlayer()) < pAbCharged * 15)
{
	SetUltimateCharge(EventPlayer(), pAbCharged * 15);
	# Workaround: Sets Ultimate Charge to a higher value for duplicating Echo
	if (IsDuplicating(EventPlayer()))
	{
		MinWait();
		SetUltimateCharge(EventPlayer(), pAbCharged * 15);
	}
}

rule: "Team 1 (Ability): Haste Primary Fire"
Event.OngoingPlayer
Team.Team1
if (pAbHaste)
if (AbilityCooldown(EventPlayer(), Button.PrimaryFire) > 0.1)
{
	SetAbilityCooldown(
		EventPlayer(),
		Button.PrimaryFire,
		(1 - 0.25 * pAbHaste) * AbilityCooldown(EventPlayer(), Button.PrimaryFire)
	);
}

rule: "Team 1 (Ability): Haste Secondary Fire"
Event.OngoingPlayer
Team.Team1
if (pAbHaste)
if (AbilityCooldown(EventPlayer(), Button.SecondaryFire) > 0.1)
{
	SetAbilityCooldown(
		EventPlayer(),
		Button.SecondaryFire,
		(1 - 0.25 * pAbHaste) * AbilityCooldown(EventPlayer(), Button.SecondaryFire)
	);
}

rule: "Team 1 (Ability): Haste Ability 1"
Event.OngoingPlayer
Team.Team1
if (pAbHaste)
if (AbilityCooldown(EventPlayer(), Button.Ability1) > 0.1)
{
	SetAbilityCooldown(
		EventPlayer(),
		Button.Ability1,
		(1 - 0.25 * pAbHaste) * AbilityCooldown(EventPlayer(), Button.Ability1)
	);
}

rule: "Team 1 (Ability): Haste Ability 2"
Event.OngoingPlayer
Team.Team1
if (pAbHaste)
if (AbilityCooldown(EventPlayer(), Button.Ability2) > 0.1)
{
	SetAbilityCooldown(
		EventPlayer(),
		Button.Ability2,
		(1 - 0.25 * pAbHaste) * AbilityCooldown(EventPlayer(), Button.Ability2)
	);
}

rule: "Team 1 (Ability): Haste Jump"
Event.OngoingPlayer
Team.Team1
if (pAbHaste)
if (AbilityCooldown(EventPlayer(), Button.Jump) > 0.1)
{
	SetAbilityCooldown(
		EventPlayer(),
		Button.Jump,
		(1 - 0.25 * pAbHaste) * AbilityCooldown(EventPlayer(), Button.Jump)
	);
}

rule: "Team 1 (Ability): Haste Crouch"
Event.OngoingPlayer
Team.Team1
if (pAbHaste)
if (AbilityCooldown(EventPlayer(), Button.Crouch) > 0.1)
{
	SetAbilityCooldown(
		EventPlayer(),
		Button.Crouch,
		(1 - 0.25 * pAbHaste) * AbilityCooldown(EventPlayer(), Button.Crouch)
	);
}

rule: "Team 1 (Ability): Headhunter"
Event.OnDamageDealt
Team.Team1
if (pAbHeadhunter)
if (EventWasCriticalHit())
{
	Damage(Victim(), EventPlayer(), pAbHeadhunter * 30 / pDamageDealt * EventDamage());
}

rule: "Team 1 (Ability): Priority B"
Event.OngoingPlayer
Team.Team1
if (pAbPriority == 2)
if (pLastDamageTakenT + 3 < TotalTimeElapsed())
{
	pDamageDealt += 20;
	pMoveSpeed += 20;
	WaitUntil(
		pLastDamageTakenT + 3 >= TotalTimeElapsed() || pPerkMysterySwap == TotalTimeElapsed() + 90,
		99999
	);
	pDamageDealt -= 20;
	pMoveSpeed -= 20;
}

rule: "Team 1 (Ability): Quick Fix"
Event.OnElimination
Team.Team1
if (pAbQuickFix)
{
	Heal(EventPlayer(), null, pAbQuickFix * 50);
	if (!pCurrentQuickFixSpeedBonus)
	{
		pCurrentQuickFixSpeedBonus = pAbQuickFix * 15;
		pMoveSpeed += pCurrentQuickFixSpeedBonus;
	}
	Wait(5, WaitBehavior.RestartWhenTrue);
	pMoveSpeed -= pCurrentQuickFixSpeedBonus;
	pCurrentQuickFixSpeedBonus = false;
}

rule: "Team 1 (Ability): Second Wind"
Event.OngoingPlayer
Team.Team1
if (pAbSecondWind)
if (pDownedStartT)
if (pDownedStartT + 0.9 < TotalTimeElapsed())
{
	SmallMessage(AllPlayers(), " {0} received a second wind!".Format([EventPlayer()]));
	PlayEffect(AllPlayers(), PlayEffect.GoodPickupEffect, Color.Green, EventPlayer(), 1);
	SetStatus(EventPlayer(), null, Status.PhasedOut, 3.5);
	pDownedStartT = false;
	Wait(120 - 30 * pAbSecondWind, WaitBehavior.IgnoreCondition);
}

rule: "Team 1 (Perk): Mystery Swap"
Event.OngoingPlayer
Team.Team1
if (pPerkMysterySwap)
if (pPerkMysterySwap < TotalTimeElapsed())
if (pDownedStartT == 0)
{
	Boolean[] Swapped_Talent_Array;
	Wait(1, WaitBehavior.AbortWhenFalse);
	AbortIfConditionIsFalse();
	if (pTalent1)
	{
		Swapped_Talent_Array[1] = true;
		pTalent1 = false;
	}
	if (pTalent2)
	{
		Swapped_Talent_Array[2] = true;
		pTalent2 = false;
	}
	pPerkMysterySwap = TotalTimeElapsed() + 90;
	Wait(0.2, WaitBehavior.IgnoreCondition);
	ForcePlayerHero(EventPlayer(), AllHeroes().Remove(EventPlayer().Hero()).Random());
	pIsInvisible = false;
	pLastDamageTakenT = 0;
	Wait(0.1, WaitBehavior.IgnoreCondition);
	if (Swapped_Talent_Array[1])
	{
		Swapped_Talent_Array[1] = false;
		pTalent1 = true;
	}
	if (Swapped_Talent_Array[2])
	{
		Swapped_Talent_Array[2] = false;
		pTalent2 = true;
	}
	SetUltimateCharge(EventPlayer(), 100);
	update_ab_string_and_play_sound();
}

rule: "Team 1 (Perk): Bulletstorm"
Event.OngoingPlayer
Team.Team1
if (pPerkBulletStorm)
if (
	Ammo(EventPlayer(), false) < MaxAmmo(EventPlayer(), false)
	|| Ammo(EventPlayer(), true) < MaxAmmo(EventPlayer(), true)
)
{
	SetAmmo(EventPlayer(), false, 1000);
	SetAmmo(EventPlayer(), true, 1000);
}

rule: "Team 1 (Perk): Nemesis"
Event.OngoingPlayer
Team.Team1
if (IsDead(pPerkNemesisKiller))
{
	Wait(0.2, WaitBehavior.AbortWhenFalse);
	AbortIf(!pDownedStartT);
	SmallMessage(AllPlayers(), " {0}'s Nemesis was killed!".Format([EventPlayer()]));
	PlayEffect(AllPlayers(), PlayEffect.GoodPickupEffect, Color.Green, EventPlayer(), 1);
	pDownedStartT = false;
}

rule: "Team 1 (Perk): Brass Knuckles"
Event.PlayerDealtKnockback
Team.Team1
if (pPerkBrassKnuckles)
if (EventAbility() == Button.Melee)
if (!Victim().pIvIsPortal)
if (!IsDead(Victim()))
{
	Victim().pGmutFortifiedBypassEndT = Max(TotalTimeElapsed() + 1.75, Victim().pGmutFortifiedBypassEndT);
	SetStatus(Victim(), EventPlayer(), Status.KnockedDown, Victim().pIsFortified ? 1.75 : 2.5);
	AbortIf(!HasStatus(Victim(), Status.Stunned));
	Wait(0.25, WaitBehavior.RestartWhenTrue);
	Wait(15, WaitBehavior.IgnoreCondition);
	SmallMessage(EventPlayer(), " Brass Knuckles Ready");
}

rule: "Team 1 (Perk): Crash N' Dash"
Event.OngoingPlayer
Team.Team1
if (pPerkCrashNDash)
if (SpeedOf(EventPlayer()) >= 8)
{
	Heal(EventPlayer(), null, 10);
	Wait(0.2, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 1 (Perk): Vampiric Heal"
Event.OnDamageDealt
Team.Team1
if (pPerkVampiric)
{
	Heal(EventPlayer(), null, EventDamage() * 0.3);
}

rule: "Team 1 (Perk): Supercharge"
Event.OnHealingDealt
Team.Team1
if (pPerkSuperCharge)
if (Healee() != EventPlayer())
if (EventHealing())
{
	SetUltimateCharge(Healee(), UltimateChargePercent(Healee()) + 1 + EventHealing() * 0.03);
	Wait(0.75, WaitBehavior.IgnoreCondition);
}
