variables
{
	global:
		1: gamemode
		2: is_hard_mode_enabled
		3: Special_Thanks
		4: wave_number
		5: enable_normal_spawns
		6: special_spawns_count
		7: tier_4_spawns_block_end_t
		8: last_spawn_phase_end_t
		9: upgrade_count
		11: boss_list_1
		12: boss_list_2
		13: objective_phase_number
		14: objective_progress
		15: enable_objective_enemy_spawn
		16: iv_dom_objective_pos
		17: iv_dom_objective_all_pos_list
		18: hvt_dom_objective_killed_count
		19: hvt_call_reinforcements_end_t
		20: dom_point_A_contesters
		21: dom_point_B_contesters
		22: is_infrasight_on
		23: combatants
		24: combatants_count
		25: progress_bar_strings
		26: game_or_mutator_start_huds
		27: is_load_limit_reached
		28: is_waiting_to_remove_bot
		29: temp_1
		30: temp_2
		31: player_spawn_pos
		32: player_spawn_facing
		33: ability_shop_pos
		34: buy_menu_left_up_forward
		35: buy_menu_cam_pos
		36: buy_menu_base_pos
		37: spawn_pos_list
		38: spawn_nearest_node_idx_list
		39: nodes
		40: nodes_count
		41: edges
		42: distance_matrix
		43: elevator_nodes
		44: is_map_cg
		47: char_string
		48: aim_offset
		49: is_victory_declared
		52: is_mutator_activation_disabled
		53: is_mutator_mode_enabled
		54: money_amount
		55: money_mult
		56: diff_health_mult
		57: diff_damage_mult
		58: current_perks
		59: current_perks_huds_list
		60: mutators_list
		61: is_gmut_enabled
		62: gmut_storm_raging
		63: gmut_sympathy_gains
		64: gmut_adaptive_shield
		65: gmut_fortified
		66: mut_amped
		67: mut_hardwired
		68: mut_promotion
		69: mut_advanced_medkit
		71: mut_lock_n_load
		72: mut_emp_rounds
		73: mut_heartburn
		74: mut_deep_wounds
		75: mut_gear_upgrade
		76: mut_reinforcements
		77: mut_mutation
		78: mut_expendable
		79: mut_swan_song
		81: mut_fully_loaded
		82: mut_bulletproof
		83: gmut_list
		84: is_apocalyptic
		85: mut_count
		86: i
		87: mut_artful_dodger
		88: mut_counterstrike
		89: mut_yakuza
		90: gmut_salvation
		91: mut_low_blow
		92: gazed___
		93: length

	player:
		0: ab_player
		1: ab_var_1
		2: ab_var_2
		3: ab_var_3
		4: ab_wraith_pos
		5: sombra_stealth_timer
		6: last_damage_taken_t
		7: is_combatant
		8: is_controller_player
		9: mercy_res_button
		10: downed_start_t
		11: revivers
		12: revive_timer
		13: is_revive_slow
		14: tased_end_t
		15: is_flying
		16: is_invisible
		17: spectated_player
		18: death_cam_target
		19: is_changing_heroes
		20: in_buy_menu_start_t
		21: is_showing_active_abilities
		22: can_use_drop_in_buy_menu
		23: money_spent_amount
		24: is_pathfinding_disabled
		25: is_using_combat_pathfinding
		26: combat_pathfinding_type
		27: nav_pos
		28: nav_idx
		29: best_nav_idx
		30: dom_nav_guard_idx
		31: is_nav_reachable_node
		32: last_nav_update_t
		33: last_time_at_node_t
		34: real_speed_pos_1
		35: real_speed_pos_2
		36: last_jump_t
		37: real_speed
		38: eye_offset
		39: facing_override_direction
		40: is_wraith
		41: is_ranged
		42: can_dodge
		43: can_stagger
		44: can_quick_melee
		45: recall_block_end_t
		46: is_target_in_los
		47: target
		48: target_last_seen_pos
		49: is_ignoring_other_targets
		50: base_tier
		51: real_tier
		52: is_alive
		53: is_living_boss
		54: iv_is_portal
		55: aggression_health_threshold
		56: is_using_boss_aggression
		57: is_aggressive
		58: is_fortified
		59: fear_end_t
		60: is_hardwired
		61: soldier_espionage
		62: is_mutated
		63: is_expendable
		64: gmut_var
		65: gmut_fortified_bypass_end_t
		67: last_hit_by_shatter_t
		68: active_ab_number
		69: active_ab_cooldown
		70: active_ab_var
		71: active_ab_is_cloaked
		72: active_ab_is_frenzied
		73: active_ab_is_smoked
		74: active_ab_effect_list
		75: ab_bought_abilities_string
		76: ab_headhunter
		77: ab_quick_fix
		78: current_quick_fix_speed_bonus
		79: ab_charged
		80: ab_heavy_impact
		81: ab_second_wind
		82: ab_triage
		83: ab_resilience
		84: ab_antigens
		85: ab_haste
		86: ab_priority
		87: ab_health_bonus
		88: ab_damage_bonus
		89: ab_healing_bonus
		90: perk_mystery_swap
		91: perk_bulletstorm
		92: perk_die_hard
		93: perk_brass_knuckles
		94: perk_vampiric
		95: perk_crash_n_dash
		96: perk_golden_hour
		97: perk_super_charge
		98: perk_nemesis
		99: nemesis_killer
		100: nemesis_beam_effect
		101: perk_special_operator
		102: perk_sharpshooter
		103: perk_shockproof
		104: health_percent
		105: Damage_Dealt
		106: healing_dealt_percent
		107: Move_Speed
		108: heal_mod
		109: Slowed_until
		110: talent_text
		111: damage_mod
		112: Ability_Countdown
		113: Ability_Active
		114: Ability_Projectile1
		115: Ability_Available
		116: Ability_End
		117: Effects_
		118: i
		119: Smoked_Screen
		120: Tut_Active
		121: Swapped_Talent_Array
		122: Talent2
		123: Talent1
		124: HP_Pool
		125: Chain_Reaction_Immune
		126: Chain_Reaction_On
		127: Damage_Received
}

subroutines
{
	0: update_combatants
	1: declare_victory
	2: play_incoming_sound_twice
	3: teleport_to_free_spawn
	4: nwp_teleport
	5: start_facing
	6: find_chase_target
	7: update_target_nav
	8: find_wp_near_nav
	9: check_drop
	10: upgrade_health_and_healing
	11: start_kill_remaining_phase
	12: set_random_perks
	13: iv_defend_portal
	14: mut_add_mutator
	15: disable_player
	16: enable_player
	17: open_buy_menu
	18: leave_buy_menu
	19: check_if_enough_money
	20: buy_active_ability
	21: remove_active_ability
	22: update_ab_string_and_play_sound
	23: play_purchase_confirmation_sound
	28: set_map_cg
	32: call_reinforcements
	33: Cancel_Momentum
}

rule("Subroutine (Set Map CG): Set Spawns, Nodes, Edges, Distance Matrix, Ability Buy Location")
{
	event
	{
		Subroutine;
		set_map_cg;
	}

	actions
	{
		Global.spawn_pos_list = Array(Vector(206.454, 0.001, 70.220), Vector(221.427, 8.692, 66.933), Vector(193.658, 0.998, 67.449),
			Vector(229.543, 1.999, 85.875), Vector(224.599, 5.001, 110.683), Vector(199.902, 8.843, 109.823), Vector(176.589, 6.999,
			66.024), Vector(212.836, 9, 81.390), Vector(228.988, 12.998, 65.820), Vector(186.820, 0.999, 87.814));
		Global.spawn_nearest_node_idx_list = Array(0, 24, 2, 40, 42, 35, 10, 25, 21, 7);
		Global.nodes = Array(Vector(206.137, 0.041, 81.572), Vector(197.753, 1.002, 81.213), Vector(189.242, 0.998, 66.794), Vector(
			188.545, 3, 51.941), Vector(193.895, 16.500, 51.891), Vector(196.476, 16.501, 68.781), Vector(186.703, 0.999, 80.980), Vector(
			187.579, 0.999, 92.388), Vector(174.916, 5.001, 92.330), Vector(174.294, 5, 80.881), Vector(173.301, 6.999, 66.065), Vector(
			173.262, 6.998, 57.010), Vector(183.040, 7.999, 56.064), Vector(183.491, 7.999, 63.766), Vector(191.037, 7.999, 64.119),
			Vector(199.061, 7.998, 49.104), Vector(201.742, 7.998, 60.913), Vector(209.518, 7.998, 60.774), Vector(208.498, 9, 44.680),
			Vector(218.343, 12, 45.130), Vector(216.613, 14.001, 61.938), Vector(229.231, 13.001, 61.763), Vector(229.677, 9.187, 73.895),
			Vector(220.985, 7.998, 81.140), Vector(221.330, 9.002, 61.664), Vector(206.100, 9, 81.084), Vector(206.313, 7.999, 70.046),
			Vector(183.802, 5.998, 74.325), Vector(186.933, 6, 80.940), Vector(185.025, 6.001, 87.180), Vector(194.265, 8.001, 96.067),
			Vector(205.974, 9.025, 95.640), Vector(216.192, 7.999, 95.441), Vector(180.423, 8.998, 104.206), Vector(205.974, 8.027,
			103.778), Vector(206.172, 7.998, 110.406), Vector(193.533, 9, 110.488), Vector(219.054, 5.998, 103.970), Vector(219.070, 1.998,
			90.657), Vector(235.431, 1.998, 90.539), Vector(229.409, 1.999, 90.044), Vector(237.966, 3.998, 104.629), Vector(226.962,
			4.284, 112.037), Vector(219.008, 0.998, 81.327), Vector(177.920, 0.002, 51.147), Vector(196.386, 16.500, 51.909), Vector(
			196.295, 16.500, 46.848), Vector(208.835, 16.500, 47.146));
		Global.edges = Array(Array(1, 43), Array(0, 2, 6, 43), Array(1, 3), Array(2, 4, 44), Array(45), Array(14, 45), Array(1, 7), Array(
			6, 8), Array(7, 9), Array(8, 10, 27, 29), Array(9, 11), Array(10, 12), Array(3, 11, 13), Array(12, 14, 16, 27, 29), Array(1, 3,
			13, 15, 16), Array(14, 16), Array(13, 14, 15, 17, 18, 24, 26), Array(16, 18, 24, 26), Array(16, 17, 19), Array(18, 20), Array(
			17, 19, 21), Array(20, 22), Array(21, 23, 40), Array(22, 24, 25, 38), Array(16, 17, 23), Array(6, 23, 26), Array(16, 17, 25),
			Array(9, 13, 28, 29), Array(1, 27, 29), Array(9, 13, 27, 28, 30), Array(29, 31, 33, 34, 36), Array(30, 32, 34), Array(31, 38),
			Array(9, 30, 34), Array(30, 31, 33, 35, 37), Array(34, 36), Array(30, 35), Array(34, 38, 41), Array(37, 39, 40, 43), Array(38,
			40, 41), Array(38, 39), Array(37, 39, 42), Array(35, 41), Array(0, 1, 38), Array(3), Array(3, 5, 15, 16, 46), Array(45, 47),
			Array(17, 19, 46));
		Global.distance_matrix = Array(Custom String(
			"012346234567877667789!9878767655654563233451456710123512345676655667898767656555654563233451345621012423456765544556787656567666"),
			Custom String(
			"76567434456223453210133456765443344567654545656787677545567312345432025665654332233456543434545676676656678531233232303454543212"),
			Custom String(
			"23345654343343456556554556733123212346012345656667789!98787454567656643445624567323457101234545656678987676343456556554556735678"),
			Custom String(
			"43456821012343454556787656523234544545566674678943445732101232343445676545412123433434566564567854434643210123454556787656523234"),
			Custom String(
			"54454567767545675432355432101234344567654543434565565667778534564321244543210123233456543432323454454556667423453232353432321012"),
			Custom String(
			"12234543232121234334344555633456212124234343210112234543232232345445443445622345323235345454321012234543232343456556554556733456"),
			Custom String(
			"32323534434321110112343212123234544544344563345643434634545432221012343212134345655654344564456743434645545432221101234323234345"),
			Custom String(
			"65565545567445675454575665654333221012343434545676676655467556785454574565654333212101232324545676676544356556785565684566765444"),
			Custom String(
			"32321012333565667656743324546789445568345676544433432101223565556545632213436789334457234565433322343210112454445434521223425678"),
			Custom String(
			"43434634545432221123432102234345654553233453456732345712345543332234432120145455654563233453567843434623445432221123443221034345"),
			Custom String(
			"65565434456445673233463321232123233456543430112343343445556345672123462332343234344567654541012343343434456245673233463321232123"),
			Custom String(
			"23345654343110123223234554534567434457443234323434456765454221012112123443445678445568554345434545567876565332101212222333436789"),
			Custom String(
			"33456845545654565667898767644321032332122342678954556843212343454556787656523212301222344344678944556854323443454556787656533211"),
			Custom String(
			"210121233233678955667965434554565667898767644322321012344344789!5455685543454345455678765653321232210345545567893345684543455456"),
			Custom String(
			"56678987676443223212301221226789223457345456656767789!9878755433432341011231567833456845656776787889!?!9898665445433421011226789"),
			Custom String(
			"33456845656776787889!?!9898665445434521102326789445679565456656767789!9878755433432231212013789!55678!665456656767789!9878755433"),
			Custom String(
			"43212232310489!?112346234567767667789!987876654454345212234045674321244567876554455678765656767898788656678403454321214554543221"),
			Custom String(
			"12234543232343456556554556742012543232566565433222323454343454567667665667853101544343456565433321212343232454567667654556754210"));
		Global.elevator_nodes = Empty Array;
		If(Global.gamemode == 0);
			Global.iv_dom_objective_all_pos_list = Array(Vector(206.094, 2, 77.597), Vector(232.886, 4, 93.877), Vector(230.416, 6, 107.918),
				Vector(193.307, 11, 113.551), Vector(180.089, 11, 101.823), Vector(205.915, 11.043, 93.960), Vector(168.798, 7, 81.112),
				Vector(173.483, 9, 57.292), Vector(189.454, 5, 56.301), Vector(196.295, 18.500, 68.985), Vector(206.485, 10, 51.593), Vector(
				206.259, 10.999, 81.079), Vector(218.594, 10, 85.339), Vector(224.043, 3, 78.247), Vector(182.628, 3, 83.080));
		Else If(Global.gamemode == 2);
			Global.iv_dom_objective_all_pos_list = Array(Array(Vector(201.832, 8, 52.598), Vector(218.700, 8, 82.857), 47, 23), Array(Vector(
				188.463, 3, 54.695), Vector(173.555, 6.997, 65.855), 14, 10), Array(Vector(192.951, 9, 112.137), Vector(168.563, 5, 81.053),
				35, 9), Array(Vector(205.608, 0.039, 81.423), Vector(232.253, 2, 97.003), 28, 39), Array(Vector(206.304, 9, 81.776), Vector(
				185.063, 1, 82.814), 25, 7));
		End;
		Global.player_spawn_pos = Vector(181.974, 9, 96.862);
		Global.player_spawn_facing = Forward;
		Global.ability_shop_pos = Vector(182.587, 8.998, 105.229);
		Global.buy_menu_left_up_forward[2] = Forward;
		Global.buy_menu_cam_pos = 900 * Up;
	}
}

rule("Subroutine: Update Combatants")
{
	event
	{
		Subroutine;
		update_combatants;
	}

	actions
	{
		Global.combatants = Filtered Array(All Players(Team 1), Current Array Element.is_combatant);
		Global.combatants_count = Count Of(Global.combatants);
	}
}

rule("Subroutine: Declare Victory")
{
	event
	{
		Subroutine;
		declare_victory;
	}

	actions
	{
		Wait(2, Ignore Condition);
		Abort If(Global.is_victory_declared);
		Global.is_victory_declared = True;
		Declare Team Victory(Team 1);
	}
}

rule("Subroutine: Play Incoming Sound Twice")
{
	event
	{
		Subroutine;
		play_incoming_sound_twice;
	}

	actions
	{
		Modify Team Score(Team 1, 1);
		Wait(0.600, Ignore Condition);
		Modify Team Score(Team 1, 1);
	}
}

rule("Subroutine: Cancel player momentum")
{
	event
	{
		Subroutine;
		Cancel_Momentum;
	}

	actions
	{
		Apply Impulse(Event Player, -1 * Direction From Angles(Horizontal Angle From Direction(Velocity Of(Event Player)), 0), 0.001,
			To World, Cancel Contrary Motion XYZ);
	}
}

rule("MUT Subroutine: Add Mutator")
{
	event
	{
		Subroutine;
		mut_add_mutator;
	}

	actions
	{
		Global.temp_2 = -50 - Count Of(Global.mutators_list);
		If(Global.mut_count % 5 == 0 && Global.wave_number > 0);
			Big Message(All Players(All Teams), Custom String("Gamechanging Mutator added!"));
			Global.is_gmut_enabled = True;
			Global.temp_1 = Random Value In Array(Global.gmut_list);
			Modify Global Variable(gmut_list, Remove From Array By Value, Global.temp_1);
			If(Global.temp_1 == 0);
				Global.gmut_storm_raging = True;
				Create HUD Text(All Players(All Teams), Null, Custom String(
					"Storm Raging: Some enemies are enraged, killing them spreads the rage"), Null, Right, Global.temp_2 - 0.500, Null, Color(
					Orange), Color(Orange), Visible To, Default Visibility);
				Start Damage Modification(Global.combatants, Filtered Array(All Players(Team 2), Current Array Element.gmut_var), 140,
					Receivers and Damagers);
			Else If(Global.temp_1 == 1);
				Global.gmut_sympathy_gains = True;
				Create HUD Text(All Players(All Teams), Null, Custom String("Sympathy Gains: Killing enemies heals other nearby enemies"), Null,
					Right, Global.temp_2 - 0.500, Null, Color(Orange), Color(Orange), Visible To, Default Visibility);
			Else If(Global.temp_1 == 2);
				Global.gmut_adaptive_shield = True;
				Create HUD Text(All Players(All Teams), Null, Custom String(
					"Adaptive Shield: Enemies below 50% HP gain shields for every nearby player"), Null, Right, Global.temp_2 - 0.500, Null, Color(
					Orange), Color(Orange), Visible To, Default Visibility);
			Else If(Global.temp_1 == 3);
				Global.gmut_fortified = True;
				Create HUD Text(All Players(All Teams), Null, Custom String("Fortified: Enemies resist stuns, knockbacks, and gain extra armour"),
					Null, Right, Global.temp_2 - 0.500, Null, Color(Orange), Color(Orange), Visible To, Default Visibility);
			Else If(Global.temp_1 == 4);
				Global.gmut_salvation = True;
				Create HUD Text(All Players(All Teams), Null, Custom String("Salvation: Enemies heal themselves a small amount when they die"),
					Null, Right, Global.temp_2 - 0.500, Null, Color(Orange), Color(Orange), Visible To, Default Visibility);
			End;
		Else If(Count Of(Global.mutators_list));
			Big Message(All Players(All Teams), Custom String("New Mutator added!"));
			Global.temp_1 = Random Value In Array(Global.mutators_list);
			Modify Global Variable(mutators_list, Remove From Array By Value, Global.temp_1);
			If(Global.temp_1 == 0);
				Global.mut_amped = True;
				Create HUD Text(All Players(All Teams), Null, Custom String("Stampede: Enemies move faster"), Null, Right, Global.temp_2, Null,
					Color(Green), Color(Green), Visible To, Default Visibility);
			Else If(Global.temp_1 == 1);
				Global.mut_hardwired = True;
				Create HUD Text(All Players(All Teams), Null, Custom String(
					"Hardwired: Mechanical enemies gain shields and resist fear & electrocution"), Null, Right, Global.temp_2, Null, Color(Green),
					Null, Visible To, Default Visibility);
			Else If(Global.temp_1 == 2);
				Global.mut_promotion = True;
				Create HUD Text(All Players(All Teams), Null, Custom String("Promotion: Higher tier heroes spawn more frequently"), Null, Right,
					Global.temp_2, Null, Color(Green), Null, Visible To, Default Visibility);
			Else If(Global.temp_1 == 3);
				Global.mut_advanced_medkit = True;
				Create HUD Text(All Players(All Teams), Null, Custom String(
					"Advanced Medkit: Medics can revive tier 4 enemies and have less cooldown"), Null, Right, Global.temp_2, Null, Color(Green),
					Null, Visible To, Default Visibility);
			Else If(Global.temp_1 == 4);
				Create HUD Text(All Players(All Teams), Null, Custom String("Berserk: Enemies below 50% health deal 25% more damage"), Null, Right,
					Global.temp_2, Null, Color(Green), Null, Visible To, Default Visibility);
				Start Damage Modification(Global.combatants, Filtered Array(All Players(Team 2), Normalized Health(Current Array Element)
					<= 0.500), 125, Receivers and Damagers);
			Else If(Global.temp_1 == 5);
				Create HUD Text(All Players(All Teams), Null, Custom String("Regeneration: Enemies slowly regenerate health"), Null, Right,
					Global.temp_2, Null, Color(Green), Null, Visible To, Default Visibility);
				Start Heal Over Time(All Players(Team 2), Null, 9999, 10);
			Else If(Global.temp_1 == 6);
				Global.mut_yakuza = True;
				Create HUD Text(All Players(All Teams), Null, Custom String(
					"Yakuza: Shinobis, Bowmasters, and Yokais gain more health and spawn as tier 3 enemies"), Null, Right, Global.temp_2, Null,
					Color(Green), Null, Visible To, Default Visibility);
			Else If(Global.temp_1 == 7);
				Global.mut_emp_rounds = True;
				Create HUD Text(All Players(All Teams), Null, Custom String("EMP Rounds: Enemies deal double damage to barriers and objects"),
					Null, Right, Global.temp_2, Null, Color(Green), Null, Visible To, Default Visibility);
				Start Damage Modification(Global.combatants, All Players(Team 2), 50, Receivers and Damagers);
			Else If(Global.temp_1 == 8);
				Global.mut_heartburn = True;
				Create HUD Text(All Players(All Teams), Null, Custom String("Heartburn: Healing in combat is reduced by 30%"), Null, Right,
					Global.temp_2, Null, Color(Green), Null, Visible To, Default Visibility);
				Start Healing Modification(Filtered Array(Global.combatants, Current Array Element.last_damage_taken_t + (
					Current Array Element.perk_die_hard ? 0.500 : 1) * (Global.mut_deep_wounds ? 5 : 2.500) > Total Time Elapsed),
					Global.combatants, 70, Receivers Healers and Healing Percent);
			Else If(Global.temp_1 == 9);
				Global.mut_deep_wounds = True;
				Create HUD Text(All Players(All Teams), Null, Custom String("Deep Wounds: Health regeneration delay is doubled"), Null, Right,
					Global.temp_2, Null, Color(Green), Null, Visible To, Default Visibility);
			Else If(Global.temp_1 == 10);
				Global.mut_gear_upgrade = True;
				Create HUD Text(All Players(All Teams), Null, Custom String("Gear Upgrade: All Troopers are replaced with Heavy Troopers"), Null,
					Right, Global.temp_2, Null, Color(Green), Null, Visible To, Default Visibility);
			Else If(Global.temp_1 == 11);
				Create HUD Text(All Players(All Teams), Null, Custom String("Last Men Standing: The final enemies take 25% less damage"), Null,
					Right, Global.temp_2, Null, Color(Green), Null, Visible To, Default Visibility);
				Start Damage Modification(All Players(Team 2), Global.combatants, Global.objective_phase_number == 3 ? 75 : 100,
					Receivers Damagers and Damage Percent);
			Else If(Global.temp_1 == 12);
				Global.mut_reinforcements = True;
				Create HUD Text(All Players(All Teams), Null, Custom String("Reinforcements: Enemy spawn rate is increased"), Null, Right,
					Global.temp_2, Null, Color(Green), Null, Visible To, Default Visibility);
			Else If(Global.temp_1 == 13);
				Global.mut_mutation = Total Time Elapsed;
				Create HUD Text(All Players(All Teams), Null, Custom String("Mutation: Some enemies spawn with increased strength and size"), Null,
					Right, Global.temp_2, Null, Color(Green), Null, Visible To, Default Visibility);
			Else If(Global.temp_1 == 14);
				Global.mut_expendable = True;
				Create HUD Text(All Players(All Teams), Null, Custom String("Expendable: Dead Troopers are replaced almost instantly"), Null,
					Right, Global.temp_2, Null, Color(Green), Null, Visible To, Default Visibility);
			Else If(Global.temp_1 == 15);
				Global.mut_counterstrike = True;
				Create HUD Text(All Players(All Teams), Null, Custom String(
					"Counterstrike: Enemies can retreat from ultimates and counter back with their own"), Null, Right, Global.temp_2, Null, Color(
					Green), Null, Visible To, Default Visibility);
			Else If(Global.temp_1 == 16);
				Global.mut_swan_song = True;
				Create HUD Text(All Players(All Teams), Null, Custom String(
					"Swan Song: Boss enemies continue fighting for 5 seconds before going down"), Null, Right, Global.temp_2, Null, Color(Green),
					Null, Visible To, Default Visibility);
			Else If(Global.temp_1 == 17);
				Global.mut_bulletproof = True;
				Create HUD Text(All Players(All Teams), Null, Custom String("Bulletproof: Tier 2 enemies gain an additional layer of overhealth"),
					Null, Right, Global.temp_2, Null, Color(Green), Null, Visible To, Default Visibility);
			Else If(Global.temp_1 == 18);
				Global.mut_fully_loaded = True;
				Create HUD Text(All Players(All Teams), Null, Custom String(
					"Lock N' Load: Enemies can use additional abilities and have a higher clip size"), Null, Right, Global.temp_2, Null, Color(
					Green), Null, Visible To, Default Visibility);
			Else If(Global.temp_1 == 19);
				Global.mut_low_blow = True;
				Create HUD Text(All Players(All Teams), Null, Custom String("Low Blow: Enemy knockback attacks double in damage and knockback"),
					Null, Right, Global.temp_2, Null, Color(Green), Null, Visible To, Default Visibility);
				Set Knockback Dealt(All Players(Team 2), 200);
			Else If(Global.temp_1 == 20);
				Global.mut_artful_dodger = True;
				Create HUD Text(All Players(All Teams), Null, Custom String("Artful Dodger: Enemies can dodge attacks more often and easily"),
					Null, Right, Global.temp_2, Null, Color(Green), Null, Visible To, Default Visibility);
			End;
		End;
	}
}

rule("Subroutine: Set Random Perks")
{
	event
	{
		Subroutine;
		set_random_perks;
	}

	actions
	{
		If(Count Of(Global.current_perks_huds_list));
			Destroy In-World Text(First Of(Global.current_perks_huds_list));
			Destroy In-World Text(Global.current_perks_huds_list[1]);
		End;
		Global.current_perks_huds_list = Empty Array;
		If(Global.wave_number % 4 == 1);
			Global.current_perks = Array Slice(Randomized Array(Remove From Array(Array(12, 13), Global.current_perks)), 0, 2);
			For Global Variable(temp_1, 0, 2, 1);
				Global.temp_2 = Global.buy_menu_base_pos - (Global.temp_1 ? 25 : 2.500) * Global.buy_menu_left_up_forward[1] - 112.500 * First Of(
					Global.buy_menu_left_up_forward);
				If(Global.current_perks[Global.temp_1] == 12);
					Create In-World Text(Filtered Array(Global.combatants, Current Array Element.in_buy_menu_start_t), Custom String(
						"Hero Talent 1\n      $1600"), Global.temp_2, 2.500, Do Not Clip, Visible To String and Color, Local Player.Talent1 ? Color(
						Gray) : Color(Purple), Default Visibility);
				Else If(Global.current_perks[Global.temp_1] == 13);
					Create In-World Text(Filtered Array(Global.combatants, Current Array Element.in_buy_menu_start_t), Custom String(
						"Hero Talent 2\n      $1600"), Global.temp_2, 2.500, Do Not Clip, Visible To String and Color, Local Player.Talent2 ? Color(
						Gray) : Color(Purple), Default Visibility);
				End;
				Modify Global Variable(current_perks_huds_list, Append To Array, Last Text ID);
			End;
		Else;
			Global.current_perks = Array Slice(Randomized Array(Remove From Array(Array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
				Global.current_perks)), 0, 2);
			For Global Variable(temp_1, 0, 2, 1);
				Global.temp_2 = Global.buy_menu_base_pos - (Global.temp_1 ? 25 : 2.500) * Global.buy_menu_left_up_forward[1] - 112.500 * First Of(
					Global.buy_menu_left_up_forward);
				If(Global.current_perks[Global.temp_1] == 0);
					Create In-World Text(Filtered Array(Global.combatants, Current Array Element.in_buy_menu_start_t), Custom String(
						"Mystery Swap\n     500$"), Global.temp_2, 2.500, Do Not Clip, Visible To and Color, Local Player.perk_mystery_swap ? Color(
						Gray) : Color(Lime Green), Default Visibility);
				Else If(Global.current_perks[Global.temp_1] == 1);
					Create In-World Text(Filtered Array(Global.combatants, Current Array Element.in_buy_menu_start_t), Custom String(
						"Bulletstorm\n   1000$"), Global.temp_2, 2.500, Do Not Clip, Visible To and Color, Local Player.perk_bulletstorm ? Color(Gray)
						: Color(Lime Green), Default Visibility);
				Else If(Global.current_perks[Global.temp_1] == 2);
					Create In-World Text(Filtered Array(Global.combatants, Current Array Element.in_buy_menu_start_t), Custom String(
						"Die Hard\n 700$"), Global.temp_2, 2.500, Do Not Clip, Visible To and Color, Local Player.perk_die_hard ? Color(Gray) : Color(
						Lime Green), Default Visibility);
				Else If(Global.current_perks[Global.temp_1] == 3);
					Create In-World Text(Filtered Array(Global.combatants, Current Array Element.in_buy_menu_start_t), Custom String(
						"  Brass Knuckles\n     700$"), Global.temp_2, 2.500, Do Not Clip, Visible To and Color,
						Local Player.perk_brass_knuckles ? Color(Gray) : Color(Lime Green), Default Visibility);
				Else If(Global.current_perks[Global.temp_1] == 4);
					Create In-World Text(Filtered Array(Global.combatants, Current Array Element.in_buy_menu_start_t), Custom String(
						"Vampiric\n   1000$"), Global.temp_2, 2.500, Do Not Clip, Visible To and Color, Local Player.perk_vampiric ? Color(Gray)
						: Color(Lime Green), Default Visibility);
				Else If(Global.current_perks[Global.temp_1] == 5);
					Create In-World Text(Filtered Array(Global.combatants, Current Array Element.in_buy_menu_start_t), Custom String(
						"Crash N' Dash\n      700$"), Global.temp_2, 2.500, Do Not Clip, Visible To and Color, Local Player.perk_crash_n_dash ? Color(
						Gray) : Color(Lime Green), Default Visibility);
				Else If(Global.current_perks[Global.temp_1] == 6);
					Create In-World Text(Filtered Array(Global.combatants, Current Array Element.in_buy_menu_start_t), Custom String(
						"Golden Hour\n    1000$"), Global.temp_2, 2.500, Do Not Clip, Visible To and Color, Local Player.perk_golden_hour ? Color(Gray)
						: Color(Lime Green), Default Visibility);
				Else If(Global.current_perks[Global.temp_1] == 7);
					Create In-World Text(Filtered Array(Global.combatants, Current Array Element.in_buy_menu_start_t), Custom String(
						"Supercharge\n        700$"), Global.temp_2, 2.500, Do Not Clip, Visible To and Color, Local Player.perk_super_charge ? Color(
						Gray) : Color(Lime Green), Default Visibility);
				Else If(Global.current_perks[Global.temp_1] == 8);
					Create In-World Text(Filtered Array(Global.combatants, Current Array Element.in_buy_menu_start_t), Custom String(
						"Nemesis\n   800$"), Global.temp_2, 2.500, Do Not Clip, Visible To and Color, Local Player.perk_nemesis ? Color(Gray) : Color(
						Lime Green), Default Visibility);
				Else If(Global.current_perks[Global.temp_1] == 9);
					Create In-World Text(Filtered Array(Global.combatants, Current Array Element.in_buy_menu_start_t), Custom String(
						"Spec Ops\n 600$"), Global.temp_2, 2.500, Do Not Clip, Visible To and Color, Local Player.perk_special_operator ? Color(Gray)
						: Color(Lime Green), Default Visibility);
				Else If(Global.current_perks[Global.temp_1] == 10);
					Create In-World Text(Filtered Array(Global.combatants, Current Array Element.in_buy_menu_start_t), Custom String(
						"Sharpshooter\n   900$"), Global.temp_2, 2.500, Do Not Clip, Visible To and Color, Local Player.perk_sharpshooter ? Color(Gray)
						: Color(Lime Green), Default Visibility);
				Else If(Global.current_perks[Global.temp_1] == 11);
					Create In-World Text(Filtered Array(Global.combatants, Current Array Element.in_buy_menu_start_t), Custom String(
						"Shockproof\n        700$"), Global.temp_2, 2.500, Do Not Clip, Visible To and Color, Local Player.perk_shockproof ? Color(
						Gray) : Color(Lime Green), Default Visibility);
				End;
				Modify Global Variable(current_perks_huds_list, Append To Array, Last Text ID);
			End;
		End;
	}
}

rule("Subroutine: Disable Player")
{
	event
	{
		Subroutine;
		disable_player;
	}

	actions
	{
		Start Forcing Throttle(Event Player, False, 0.100, False, 0.100, False, 0.100);
		Set Primary Fire Enabled(Event Player, False);
		Set Secondary Fire Enabled(Event Player, False);
		Set Ability 1 Enabled(Event Player, False);
		Set Ability 2 Enabled(Event Player, False);
		Set Melee Enabled(Event Player, False);
		Set Jump Enabled(Event Player, False);
		Set Crouch Enabled(Event Player, False);
		Disallow Button(Event Player, Button(Ultimate));
	}
}

rule("Subroutine: Enable Player")
{
	event
	{
		Subroutine;
		enable_player;
	}

	actions
	{
		Stop Forcing Throttle(Event Player);
		Set Primary Fire Enabled(Event Player, True);
		Set Secondary Fire Enabled(Event Player, True);
		Set Ability 1 Enabled(Event Player, True);
		Set Ability 2 Enabled(Event Player, True);
		Set Melee Enabled(Event Player, True);
		Set Jump Enabled(Event Player, True);
		Set Crouch Enabled(Event Player, True);
		Allow Button(Event Player, Button(Ultimate));
	}
}

rule("Subroutine: Open Buy Menu, Last Facing (3)")
{
	event
	{
		Subroutine;
		open_buy_menu;
	}

	actions
	{
		Abort If(Event Player.downed_start_t || Normalized Health(Event Player) < 0.500 || Has Status(Event Player, Stunned)
			|| Event Player.tased_end_t >= Total Time Elapsed);
		Apply Impulse(Event Player, -1 * Direction From Angles(Horizontal Angle From Direction(Velocity Of(Event Player)), False), 0.001,
			To World, Cancel Contrary Motion XYZ);
		Event Player.ab_var_3 = Facing Direction Of(Event Player);
		Event Player.in_buy_menu_start_t = Total Time Elapsed;
		Disable Hero HUD(Event Player);
		Set Facing(Event Player, Forward, To World);
		Start Camera(Event Player, Global.buy_menu_cam_pos, Global.buy_menu_cam_pos + Global.buy_menu_left_up_forward[2], 0);
		Call Subroutine(disable_player);
		Set Aim Speed(Event Player, 200);
	}
}

rule("Subroutine: Leave Buy Menu")
{
	event
	{
		Subroutine;
		leave_buy_menu;
	}

	actions
	{
		Event Player.in_buy_menu_start_t = False;
		Enable Hero HUD(Event Player);
		Set Facing(Event Player, Event Player.ab_var_3, To World);
		If(!Event Player.downed_start_t);
			Stop Camera(Event Player);
			Call Subroutine(enable_player);
		End;
		Set Aim Speed(Event Player, 100);
	}
}

rule("Subroutine: Check if enough money")
{
	event
	{
		Subroutine;
		check_if_enough_money;
	}

	actions
	{
		If(Global.money_mult * Global.money_amount - Event Player.money_spent_amount >= Global.temp_2);
			Event Player.money_spent_amount += Global.temp_2;
			Small Message(Event Player, Custom String("Ability unlocked"));
			Call Subroutine(play_purchase_confirmation_sound);
		Else;
			Global.temp_2 = False;
			Small Message(Event Player, Custom String("Not enough money"));
		End;
	}
}

rule("Subroutine: Buy Active Ability")
{
	event
	{
		Subroutine;
		buy_active_ability;
	}

	actions
	{
		If(!Event Player.active_ab_number);
			Global.temp_2 = 1200;
			Call Subroutine(check_if_enough_money);
			Abort If(!Global.temp_2);
		Else If(Global.temp_1 == Event Player.active_ab_number);
			Abort;
		Else;
			Small Message(Event Player, Custom String("Swapped Active Ability"));
		End;
		Call Subroutine(remove_active_ability);
		Event Player.active_ab_number = Global.temp_1;
		If(Global.temp_1 == 1);
			Create Effect(Event Player.active_ab_cooldown < 0 ? All Players(All Teams) : Empty Array, Ana Nano Boosted Effect, Color(Team 1),
				Event Player, 1, Visible To);
			Modify Player Variable(Event Player, active_ab_effect_list, Append To Array, Last Created Entity);
		Else If(Global.temp_1 == 2);
			Create Effect(Event Player.active_ab_cooldown < 0 ? All Players(All Teams) : Empty Array, Reaper Wraith Form Effect, Color(Team 1),
				Event Player, 1, Visible To);
			Modify Player Variable(Event Player, active_ab_effect_list, Append To Array, Last Created Entity);
		Else If(Global.temp_1 == 4);
			Create Effect(Event Player.active_ab_cooldown < 0 ? All Players(All Teams) : Empty Array,
				Baptiste Immortality Field Protected Effect, Color(Team 1), Event Player, 1, Visible To);
			Modify Player Variable(Event Player, active_ab_effect_list, Append To Array, Last Created Entity);
		Else If(Global.temp_1 == 5);
			Event Player.active_ab_var = 1000 * Down;
			Create Effect(Event Player.active_ab_cooldown < 0 ? All Players(All Teams) : Empty Array, Cloud, Color(Sky Blue),
				Event Player.active_ab_var + 2 * Up, 10, Visible To Position and Radius);
			Modify Player Variable(Event Player, active_ab_effect_list, Append To Array, Last Created Entity);
			Create Effect(Event Player.active_ab_cooldown < 0 ? All Players(All Teams) : Empty Array, Cloud, Color(Sky Blue),
				Event Player.active_ab_var + 2 * Down, 10, Visible To Position and Radius);
			Modify Player Variable(Event Player, active_ab_effect_list, Append To Array, Last Created Entity);
			Create Effect(Event Player.active_ab_cooldown < 0 ? All Players(All Teams) : Empty Array, Ring, Color(Sky Blue),
				Event Player.active_ab_var + Down, 10, Visible To Position and Radius);
			Modify Player Variable(Event Player, active_ab_effect_list, Append To Array, Last Created Entity);
		Else If(Global.temp_1 == 6);
			Create Effect(Event Player.active_ab_cooldown < 0 ? All Players(All Teams) : Empty Array, Heal Target Active Effect, Color(Team 1),
				Event Player, 1, Visible To);
			Modify Player Variable(Event Player, active_ab_effect_list, Append To Array, Last Created Entity);
		Else If(Global.temp_1 == 7);
			Event Player.active_ab_var = 1000 * Down;
			Create Effect(Event Player.active_ab_cooldown < 0 ? All Players(All Teams) : Empty Array, Cloud, Color(Yellow),
				Event Player.active_ab_var + Up, 8, Visible To Position and Radius);
			Modify Player Variable(Event Player, active_ab_effect_list, Append To Array, Last Created Entity);
			Create Effect(Event Player.active_ab_cooldown < 0 ? All Players(All Teams) : Empty Array, Cloud, Color(Yellow),
				Event Player.active_ab_var + Down, 8, Visible To Position and Radius);
			Modify Player Variable(Event Player, active_ab_effect_list, Append To Array, Last Created Entity);
		Else If(Global.temp_1 == 8);
			Event Player.active_ab_var = Empty Array;
			Create Beam Effect(Count Of(Event Player.active_ab_var) ? All Players(All Teams) : Empty Array, Bad Beam, Event Player, First Of(
				Event Player.active_ab_var), Color(Purple), Visible To Position and Radius);
			Modify Player Variable(Event Player, active_ab_effect_list, Append To Array, Last Created Entity);
			Create Beam Effect(Count Of(Event Player.active_ab_var) > 1 ? All Players(All Teams) : Empty Array, Bad Beam, First Of(
				Event Player.active_ab_var), Event Player.active_ab_var[1], Color(Purple), Visible To Position and Radius);
			Modify Player Variable(Event Player, active_ab_effect_list, Append To Array, Last Created Entity);
			Create Beam Effect(Count Of(Event Player.active_ab_var) > 2 ? All Players(All Teams) : Empty Array, Bad Beam,
				Event Player.active_ab_var[1], Event Player.active_ab_var[2], Color(Purple), Visible To Position and Radius);
			Modify Player Variable(Event Player, active_ab_effect_list, Append To Array, Last Created Entity);
			Create Beam Effect(Count Of(Event Player.active_ab_var) > 3 ? All Players(All Teams) : Empty Array, Bad Beam,
				Event Player.active_ab_var[2], Event Player.active_ab_var[3], Color(Purple), Visible To Position and Radius);
			Modify Player Variable(Event Player, active_ab_effect_list, Append To Array, Last Created Entity);
		End;
		Call Subroutine(play_purchase_confirmation_sound);
	}
}

rule("Subroutine: Remove Active Ability")
{
	event
	{
		Subroutine;
		remove_active_ability;
	}

	actions
	{
		If(Event Player.active_ab_cooldown < 0);
			Event Player.active_ab_cooldown = -0.100;
		End;
		Destroy Effect(Event Player.active_ab_effect_list);
		Event Player.active_ab_effect_list = Empty Array;
		Event Player.active_ab_number = False;
	}
}

rule("Subroutine: Update Ability String and Play Sound")
{
	event
	{
		Subroutine;
		update_ab_string_and_play_sound;
	}

	actions
	{
		Event Player.ab_bought_abilities_string = String Slice(Custom String("{0}{1}{2}", Custom String("{0}{1}{2}", Custom String(
			"{0}{1}{2}", Array(Custom String(""), Custom String("\nPriority A"), Custom String("\nPriority B"), Custom String(
			"\nPriority C"))[Event Player.ab_priority], Array(Custom String(""), Custom String("\nHeadhunter I"), Custom String(
			"\nHeadhunter II"))[Event Player.ab_headhunter], Array(Custom String(""), Custom String("\nAntigens I"), Custom String(
			"\nAntigens II"))[Event Player.ab_antigens]), Custom String("{0}{1}{2}", Array(Custom String(""), Custom String(
			"\nQuick Fix I"), Custom String("\nQuick Fix II"))[Event Player.ab_quick_fix], Array(Custom String(""), Custom String(
			"\nCharged I"), Custom String("\nCharged II"))[Event Player.ab_charged], Array(Custom String(""), Custom String("\nHaste I"),
			Custom String("\nHaste II"))[Event Player.ab_haste]), Custom String("{0}{1}{2}", Array(Custom String(""), Custom String(
			"\nHeavy Impact I"), Custom String("\nHeavy Impact II"))[Event Player.ab_heavy_impact], Array(Custom String(""), Custom String(
			"\nSecond Wind I"), Custom String("\nSecond Wind II"))[Event Player.ab_second_wind], Array(Custom String(""), Custom String(
			"\nTriage I"), Custom String("\nTriage II"))[Event Player.ab_triage])), Custom String("{0}{1}{2}", Custom String("{0}{1}{2}",
			Array(Custom String(""), Custom String("\nResilience I"), Custom String("\nResilience II"))[Event Player.ab_resilience],
			Event Player.perk_mystery_swap ? Custom String("\nMystery Swap") : Custom String(""),
			Event Player.perk_bulletstorm ? Custom String("\nBulletstorm") : Custom String("")), Custom String("{0}{1}{2}",
			Event Player.perk_die_hard ? Custom String("\nDie Hard") : Custom String(""), Event Player.perk_brass_knuckles ? Custom String(
			"\nBrass Knuckles") : Custom String(""), Event Player.perk_vampiric ? Custom String("\nVampiric") : Custom String("")),
			Custom String("{0}{1}{2}", Event Player.perk_crash_n_dash ? Custom String("\nCrash N' Dash") : Custom String(""),
			Event Player.perk_golden_hour ? Custom String("\nGolden Hour") : Custom String(""),
			Event Player.perk_super_charge ? Custom String("\nSupercharge") : Custom String(""))), Custom String("{0}{1}{2}",
			Custom String("{0}{1}{2}", Event Player.perk_nemesis ? Custom String("\nNemesis") : Custom String(""),
			Event Player.perk_special_operator ? Custom String("\nSpec Ops") : Custom String(""),
			Event Player.perk_sharpshooter ? Custom String("\nSharpshooter") : Custom String("")), Custom String("{0}{1}{2}",
			Event Player.perk_shockproof ? Custom String("\nShockproof") : Custom String(""), Custom String("{0}{1}{2}",
			Event Player.Talent1 ? Custom String("\n{0} {1}", Ability Icon String(Hero(Pharah), Button(Jump)), Event Player.talent_text[1])
			: Custom String(""), Event Player.Talent2 ? Custom String("\n{0} {1}", Ability Icon String(Hero(Pharah), Button(Jump)),
			Event Player.talent_text[3]) : Custom String(""), Event Player.ab_health_bonus ? Custom String("\n+{0}% Health",
			Event Player.ab_health_bonus) : Custom String("")), Event Player.ab_damage_bonus ? Custom String("\n+{0}% Damage",
			Event Player.ab_damage_bonus) : Custom String("")), Event Player.ab_healing_bonus ? Custom String("\n+{0}% Healing",
			Event Player.ab_healing_bonus) : Custom String(""))), 1, 511);
	}
}

rule("Subroutine: Play Purchase Confirmation Sound")
{
	event
	{
		Subroutine;
		play_purchase_confirmation_sound;
	}

	actions
	{
		Play Effect(Event Player, Buff Explosion Sound, Color(White), Global.buy_menu_cam_pos, 200);
	}
}

rule("Subroutine: Nearest Walkable Position Teleport")
{
	event
	{
		Subroutine;
		nwp_teleport;
	}

	actions
	{
		If(Global.temp_1 == Empty Array);
			Teleport(Event Player, First Of(Sorted Array(Global.nodes, Distance Between(Event Player, Current Array Element))));
		Else;
			Teleport(Event Player, Global.temp_1);
		End;
	}
}

rule("Subroutine: Spawn Reinforcements")
{
	event
	{
		Subroutine;
		call_reinforcements;
	}

	actions
	{
		Global.special_spawns_count += Global.is_apocalyptic + (Global.wave_number >= 5 ? 2 : 1);
	}
}

rule("Subroutine: Teleport to free Spawn")
{
	event
	{
		Subroutine;
		teleport_to_free_spawn;
	}

	actions
	{
		If(Global.gamemode == 0 && (Event Player.base_tier == -1 || Global.special_spawns_count > 0) && !Event Player.is_alive);
			Event Player.is_nav_reachable_node = False;
			If(Event Player.base_tier == -1 && Global.objective_phase_number == 0);
				Teleport(Event Player, 100 * Up);
			Else;
				Teleport(Event Player, Global.iv_dom_objective_pos + Up);
			End;
		Else If(
				Global.gamemode == 1 && Global.hvt_call_reinforcements_end_t >= Total Time Elapsed && Global.special_spawns_count > 0 && !Event Player.is_alive);
			Event Player.is_nav_reachable_node = False;
			Teleport(Event Player, Players In Slot(1, Team 2));
		Else If(Global.gamemode == 2 && Global.objective_phase_number == 0);
			Event Player.nav_idx = Global.iv_dom_objective_pos[Slot Of(Event Player) == 2 ? 2 : 3];
			Event Player.dom_nav_guard_idx = Event Player.nav_idx;
			Event Player.nav_pos = Global.nodes[Event Player.nav_idx];
			Event Player.is_nav_reachable_node = True;
			Teleport(Event Player, Event Player.nav_pos + 0.100 * Direction From Angles(Horizontal Angle From Direction(Direction Towards(
				Global.iv_dom_objective_pos[Slot Of(Event Player) == 2 ? 0 : 1], Event Player.nav_pos)), False));
		Else;
			Global.temp_2 = Mapped Array(Global.spawn_pos_list, False);
			For Global Variable(temp_1, 0, Count Of(Global.spawn_pos_list), 1);
				If(Is True For Any(Global.combatants, Is In Line of Sight(Global.spawn_pos_list[Global.temp_1] + Up, Eye Position(
					Current Array Element), Barriers Do Not Block LOS)));
					Global.temp_2[Global.temp_1] = 2;
				Else If(Is True For Any(Global.combatants, Distance Between(Global.spawn_pos_list[Global.temp_1], Current Array Element) <= 10));
					Global.temp_2[Global.temp_1] = 1;
				End;
			End;
			Global.temp_1 = First Of(Sorted Array(Global.spawn_pos_list, Global.temp_2[Current Array Index] + Random Real(0, 0.500)));
			Event Player.nav_idx = Global.spawn_nearest_node_idx_list[Index Of Array Value(Global.spawn_pos_list, Global.temp_1)];
			Event Player.nav_pos = Global.nodes[Event Player.nav_idx];
			Event Player.is_nav_reachable_node = True;
			Teleport(Event Player, Global.temp_1);
		End;
	}
}

rule("Subroutine: Find WP near Nav (find a walkable position near the Nav and check if it's reachable)")
{
	event
	{
		Subroutine;
		find_wp_near_nav;
	}

	actions
	{
		Global.temp_1 = Nearest Walkable Position(Event Player.nav_pos);
		"If NWP is valid and not too far from the original destination"
		If(Global.temp_1 != Empty Array && Distance Between(Event Player.nav_pos, Global.temp_1) < 3);
			Event Player.nav_pos = Global.temp_1;
		Else;
			"If original destination is not walkable"
			If(Distance Between(Event Player.nav_pos + Up, Ray Cast Hit Position(Event Player.nav_pos + Up, Event Player.nav_pos + 2 * Down,
				Null, Null, False)) >= 3);
				"Ranged bots stand still"
				If(Global.is_load_limit_reached || Event Player.is_ranged || Distance Between(Event Player, Event Player.target) < 2);
					Event Player.nav_pos = Position Of(Event Player);
					Abort;
				Else;
					Event Player.nav_pos = Position Of(Event Player) + Min(3.500, Distance Between(Event Player, Event Player.target) - 2)
						* Direction Towards(Event Player, Event Player.target);
					If(Is On Ground(Event Player));
						"Check if destination is not walkable"
						If(Distance Between(Event Player.nav_pos + Up, Ray Cast Hit Position(Event Player.nav_pos + Up, Event Player.nav_pos + 2 * Down,
							Null, Null, False)) >= 3);
							Event Player.nav_pos = Position Of(Event Player);
							Event Player.is_using_combat_pathfinding -= 1;
							Abort;
						End;
					End;
				End;
			End;
		End;
		"Check if the destination is reachable"
		If(Is On Ground(Event Player));
			Global.temp_1 = Position Of(Event Player) + 1.750 * Direction Towards(Event Player, Event Player.nav_pos) + Up;
			"If bot is near a ledge"
			If(Distance Between(Global.temp_1, Ray Cast Hit Position(Global.temp_1, Global.temp_1 + 3 * Down, Null, Null, False)) >= 3);
				Event Player.nav_pos = Position Of(Event Player);
				If(!Event Player.is_ranged);
					Event Player.is_using_combat_pathfinding -= 1;
					Abort;
				End;
			End;
		End;
		Event Player.is_using_combat_pathfinding = 3;
	}
}

rule("Subroutine: Check Drop (Avoid dropping too low)")
{
	event
	{
		Subroutine;
		check_drop;
	}

	actions
	{
		If(Global.is_load_limit_reached);
			Event Player.nav_pos = Position Of(Event Player);
			Abort;
		End;
		Global.temp_1 = Position Of(Event Player) + 1.750 * Direction Towards(Event Player, Vector(X Component Of(Event Player.nav_pos),
			Y Component Of(Position Of(Event Player)), Z Component Of(Event Player.nav_pos))) + Up;
		If(Distance Between(Global.temp_1, Ray Cast Hit Position(Global.temp_1, Global.temp_1 + 30 * Down, Null, Null, False))
			>= Y Component Of(Global.temp_1) - Y Component Of(Position Of(Event Player.target)) + 5);
			Event Player.nav_pos = Position Of(Event Player);
			Event Player.is_using_combat_pathfinding -= 1;
			Abort;
		End;
		Global.temp_1 = Position Of(Event Player) + 3.500 * Direction Towards(Event Player, Vector(X Component Of(Event Player.nav_pos),
			Y Component Of(Position Of(Event Player)), Z Component Of(Event Player.nav_pos))) + Up;
		If(Distance Between(Global.temp_1, Ray Cast Hit Position(Global.temp_1, Global.temp_1 + 30 * Down, Null, Null, False))
			>= Y Component Of(Global.temp_1) - Y Component Of(Position Of(Event Player.target)) + 5);
			Event Player.nav_pos = Position Of(Event Player);
			Event Player.is_using_combat_pathfinding -= 1;
			Abort;
		End;
		Event Player.is_using_combat_pathfinding = 3;
	}
}

rule("Subroutine: Start Facing")
{
	event
	{
		Subroutine;
		start_facing;
	}

	actions
	{
		If(Hero Of(Event Player) == Hero(Soldier: 76));
			If(Event Player.real_tier == 4);
				Start Facing(Event Player, (Event Player.is_target_in_los && (!Event Player.ab_var_1 || Event Player.is_using_combat_pathfinding)
					? Vector(False, False, False) : 1.500 * Direction Towards(Event Player, Event Player.nav_pos)) + (
					Event Player.target.is_combatant ? Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target)
					+ Event Player.target.eye_offset) : Vector(False, False, False)), Has Status(Event Player, Stunned) ? 0 : (
					Event Player.ab_var_1 ? 1000 : 300), To World, Direction and Turn Rate);
			Else;
				Start Facing(Event Player, (Event Player.is_target_in_los ? Vector(False, False, False) : 1.500 * Direction Towards(Event Player,
					Event Player.nav_pos)) + (Event Player.target.is_combatant ? Direction Towards(Eye Position(Event Player), Eye Position(
					Event Player.target) + Event Player.target.eye_offset) : Vector(False, False, False)), Has Status(Event Player, Stunned)
					? 0 : (Event Player.Slowed_until >= Total Time Elapsed ? 50 : 300), To World, Direction and Turn Rate);
			End;
		Else;
			If(Hero Of(Event Player) == Hero(Widowmaker) || Hero Of(Event Player) == Hero(Hanzo));
				Start Facing(Event Player, Event Player.facing_override_direction ? Event Player.facing_override_direction : (
					Event Player.is_target_in_los ? Vector(False, False, False) : 1.500 * Direction Towards(Event Player, Event Player.nav_pos))
					+ (Event Player.target.is_combatant ? Direction Towards(Eye Position(Event Player), Eye Position(Event Player.target)
					+ Event Player.target.eye_offset) : Vector(False, False, False)), Has Status(Event Player, Stunned) ? 0 : 300, To World,
					Direction and Turn Rate);
				Event Player.facing_override_direction = False;
			Else If(!Event Player.iv_is_portal);
				Start Facing(Event Player, (Event Player.is_target_in_los ? Vector(False, False, False) : 1.500 * Direction Towards(Event Player,
					Event Player.nav_pos)) + (Event Player.target.is_combatant ? Direction Towards(Eye Position(Event Player), Eye Position(
					Event Player.target) + Event Player.target.eye_offset) : Vector(False, False, False)), Has Status(Event Player, Stunned)
					? 0 : (Event Player.Slowed_until >= Total Time Elapsed ? 50 : 300), To World, Direction and Turn Rate);
			End;
		End;
	}
}

rule("Subroutine: Find Chase Target")
{
	event
	{
		Subroutine;
		find_chase_target;
	}

	actions
	{
		Abort If(Event Player.is_ignoring_other_targets);
		Event Player.target = First Of(Sorted Array(Filtered Array(Global.combatants,
			!Current Array Element.downed_start_t && !Current Array Element.active_ab_is_cloaked && !(
			Current Array Element.is_invisible && Distance Between(Event Player, Current Array Element) > 2.400)), Distance Between(
			Event Player, Current Array Element)));
	}
}

rule("Subroutine: Update Target Nav")
{
	event
	{
		Subroutine;
		update_target_nav;
	}

	actions
	{
		Event Player.target.last_nav_update_t = Total Time Elapsed;
		Global.temp_1 = Eye Position(Event Player.target) + Event Player.target.eye_offset;
		Event Player.target.best_nav_idx = Index Of Array Value(Global.nodes, First Of(Sorted Array(Filtered Array(Remove From Array(
			Global.nodes, Global.elevator_nodes), Is In Line of Sight(Current Array Element + Vector(0, 1.500, 0), Global.temp_1,
			Barriers Do Not Block LOS)), Distance Between(Event Player.target, Current Array Element) + Absolute Value(Y Component Of(
			Position Of(Event Player.target)) - Y Component Of(Current Array Element)))));
		If(Event Player.target.best_nav_idx == -1);
			Event Player.target.best_nav_idx = Index Of Array Value(Global.nodes, First Of(Sorted Array(Remove From Array(Global.nodes,
				Global.elevator_nodes), Distance Between(Event Player.target, Current Array Element))));
		End;
	}
}

rule("Subroutine: Upgrade Health and Healing")
{
	event
	{
		Subroutine;
		upgrade_health_and_healing;
	}

	actions
	{
		Global.upgrade_count += 1;
		Set Healing Received(All Players(Team 1), 85 + 2.500 * Global.upgrade_count);
		Start Heal Over Time(All Players(Team 1), Null, 1, 100000);
	}
}

rule("Subroutine: Start Kill remaining Phase")
{
	event
	{
		Subroutine;
		start_kill_remaining_phase;
	}

	actions
	{
		Big Message(All Players(All Teams), Custom String("Kill the remaining enemies!"));
		Global.enable_normal_spawns = False;
		All Players(Team 2).is_expendable = False;
		Global.special_spawns_count = False;
		Global.objective_phase_number = 3;
		Communicate(Random Value In Array(Global.combatants), Press the Attack);
	}
}

rule("IV Subroutine: Defend Portal")
{
	event
	{
		Subroutine;
		iv_defend_portal;
	}

	actions
	{
		Global.money_amount += 95;
		If(Global.objective_phase_number == 1);
			Global.enable_normal_spawns = True;
			Call Subroutine(call_reinforcements);
			Start Rule(play_incoming_sound_twice, Do Nothing);
			Event Player.ab_var_2 = Total Time Elapsed + 10;
		End;
		Global.temp_2 = Filtered Array(Players Within Radius(Global.iv_dom_objective_pos, 15, Team 1, Surfaces),
			Current Array Element.is_combatant && !Has Status(Current Array Element, Phased Out) && Is In Line of Sight(Event Player,
			Current Array Element, Enemy Barriers Block LOS));
		For Global Variable(temp_1, 0, Count Of(Global.temp_2), 1);
			Apply Impulse(Global.temp_2[Global.temp_1], Direction From Angles(Horizontal Angle From Direction(Vector Towards(
				Global.iv_dom_objective_pos, Global.temp_2[Global.temp_1])), -20), 25, To World, Cancel Contrary Motion XYZ);
		End;
		Global.temp_1 = Random Integer(0, 5);
		If(Global.temp_1 == 5 && Global.wave_number >= 7);
			Global.temp_2.tased_end_t = Total Time Elapsed + 3;
		Else If(Global.temp_1 <= 1 && Global.wave_number >= 4);
			Set Ultimate Charge(Event Player, 100);
			Press Button(Event Player, Button(Ultimate));
		Else If(Global.temp_1 == 3 && Global.wave_number >= 4);
			Press Button(Event Player, Button(Ability 1));
		End;
		Play Effect(All Players(All Teams), Explosion Sound, Color(White), Event Player, 200);
		Play Effect(All Players(All Teams), Bad Explosion, Global.temp_1 == 5 && Global.wave_number >= 7 ? Color(Purple) : Color(Red),
			Global.iv_dom_objective_pos + 1.110 * Up, 10);
	}
}
