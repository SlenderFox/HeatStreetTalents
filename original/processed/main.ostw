import "settings.lobby";
import "debug.ostw";
import "subroutines.ostw";

globalvar Boolean gIsVcitoryDeclared;
globalvar Boolean gIsMutatorActivationDisabled; // Useless
globalvar Boolean gMutReinforcements;
globalvar Boolean pGmutExpendable;
globalvar Number gLastSpawnPhaseEndT;
globalvar Number[] gGameOrMutatorsStartHuds; // Holds TextIDs *2
globalvar Number[] gMutatorsList; // 0 to 19
globalvar Number[] gGmutList; // 0 to 3
globalvar Number gMutCount;

void set_map_cg() "Subroutine (Set Map CG): Set Spawns, Nodes, Edges, Distance Matrix, Ability Buy Location"
{
	gSpawnPosList = [Vector(206.454, 0.001, 70.22), Vector(221.427, 8.692, 66.933), Vector(193.658, 0.998, 67.449), Vector(229.543, 1.999, 85.875), Vector(224.599, 5.001, 110.683), Vector(199.902, 8.843, 109.823), Vector(176.589, 6.999, 66.024), Vector(212.836, 9, 81.39), Vector(228.988, 12.998, 65.82), Vector(186.82, 0.999, 87.814)];
	gSpawnNearestNodeIdxList = [0, 24, 2, 40, 42, 35, 10, 25, 21, 7];
	gNodes = [Vector(206.137, 0.041, 81.572), Vector(197.753, 1.002, 81.213), Vector(189.242, 0.998, 66.794), Vector(188.545, 3, 51.941), Vector(193.895, 16.5, 51.891), Vector(196.476, 16.501, 68.781), Vector(186.703, 0.999, 80.98), Vector(187.579, 0.999, 92.388), Vector(174.916, 5.001, 92.33), Vector(174.294, 5, 80.881), Vector(173.301, 6.999, 66.065), Vector(173.262, 6.998, 57.01), Vector(183.04, 7.999, 56.064), Vector(183.491, 7.999, 63.766), Vector(191.037, 7.999, 64.119), Vector(199.061, 7.998, 49.104), Vector(201.742, 7.998, 60.913), Vector(209.518, 7.998, 60.774), Vector(208.498, 9, 44.68), Vector(218.343, 12, 45.13), Vector(216.613, 14.001, 61.938), Vector(229.231, 13.001, 61.763), Vector(229.677, 9.187, 73.895), Vector(220.985, 7.998, 81.14), Vector(221.33, 9.002, 61.664), Vector(206.1, 9, 81.084), Vector(206.313, 7.999, 70.046), Vector(183.802, 5.998, 74.325), Vector(186.933, 6, 80.94), Vector(185.025, 6.001, 87.18), Vector(194.265, 8.001, 96.067), Vector(205.974, 9.025, 95.64), Vector(216.192, 7.999, 95.441), Vector(180.423, 8.998, 104.206), Vector(205.974, 8.027, 103.778), Vector(206.172, 7.998, 110.406), Vector(193.533, 9, 110.488), Vector(219.054, 5.998, 103.97), Vector(219.07, 1.998, 90.657), Vector(235.431, 1.998, 90.539), Vector(229.409, 1.999, 90.044), Vector(237.966, 3.998, 104.629), Vector(226.962, 4.284, 112.037), Vector(219.008, 0.998, 81.327), Vector(177.92, 0.002, 51.147), Vector(196.386, 16.5, 51.909), Vector(196.295, 16.5, 46.848), Vector(208.835, 16.5, 47.146)];
	gEdges = [[1, 43], [0, 2, 6, 43], [1, 3], [2, 4, 44], [45], [14, 45], [1, 7], [6, 8], [7, 9], [8, 10, 27, 29], [9, 11], [10, 12], [3, 11, 13], [12, 14, 16, 27, 29], [1, 3, 13, 15, 16], [14, 16], [13, 14, 15, 17, 18, 24, 26], [16, 18, 24, 26], [16, 17, 19], [18, 20], [17, 19, 21], [20, 22], [21, 23, 40], [22, 24, 25, 38], [16, 17, 23], [6, 23, 26], [16, 17, 25], [9, 13, 28, 29], [1, 27, 29], [9, 13, 27, 28, 30], [29, 31, 33, 34, 36], [30, 32, 34], [31, 38], [9, 30, 34], [30, 31, 33, 35, 37], [34, 36], [30, 35], [34, 38, 41], [37, 39, 40, 43], [38, 40, 41], [38, 39], [37, 39, 42], [35, 41], [0, 1, 38], [3], [3, 5, 15, 16, 46], [45, 47], [17, 19, 46]];
	gDistanceMatrix = ["012346234567877667789!9878767655654563233451456710123512345676655667898767656555654563233451345621012423456765544556787656567666", "76567434456223453210133456765443344567654545656787677545567312345432025665654332233456543434545676676656678531233232303454543212", "23345654343343456556554556733123212346012345656667789!98787454567656643445624567323457101234545656678987676343456556554556735678", "43456821012343454556787656523234544545566674678943445732101232343445676545412123433434566564567854434643210123454556787656523234", "54454567767545675432355432101234344567654543434565565667778534564321244543210123233456543432323454454556667423453232353432321012", "12234543232121234334344555633456212124234343210112234543232232345445443445622345323235345454321012234543232343456556554556733456", "32323534434321110112343212123234544544344563345643434634545432221012343212134345655654344564456743434645545432221101234323234345", "65565545567445675454575665654333221012343434545676676655467556785454574565654333212101232324545676676544356556785565684566765444", "32321012333565667656743324546789445568345676544433432101223565556545632213436789334457234565433322343210112454445434521223425678", "43434634545432221123432102234345654553233453456732345712345543332234432120145455654563233453567843434623445432221123443221034345", "65565434456445673233463321232123233456543430112343343445556345672123462332343234344567654541012343343434456245673233463321232123", "23345654343110123223234554534567434457443234323434456765454221012112123443445678445568554345434545567876565332101212222333436789", "33456845545654565667898767644321032332122342678954556843212343454556787656523212301222344344678944556854323443454556787656533211", "210121233233678955667965434554565667898767644322321012344344789!5455685543454345455678765653321232210345545567893345684543455456", "56678987676443223212301221226789223457345456656767789!9878755433432341011231567833456845656776787889!?!9898665445433421011226789", "33456845656776787889!?!9898665445434521102326789445679565456656767789!9878755433432231212013789!55678!665456656767789!9878755433", "43212232310489!?112346234567767667789!987876654454345212234045674321244567876554455678765656767898788656678403454321214554543221", "12234543232343456556554556742012543232566565433222323454343454567667665667853101544343456565433321212343232454567667654556754210"];
	gElevatorNodes = [];
	if (gGamemode == 0)
	{
		gIvDomObjectiveAllPosList = [Vector(206.094, 2, 77.597), Vector(232.886, 4, 93.877), Vector(230.416, 6, 107.918), Vector(193.307, 11, 113.551), Vector(180.089, 11, 101.823), Vector(205.915, 11.043, 93.96), Vector(168.798, 7, 81.112), Vector(173.483, 9, 57.292), Vector(189.454, 5, 56.301), Vector(196.295, 18.5, 68.985), Vector(206.485, 10, 51.593), Vector(206.259, 10.999, 81.079), Vector(218.594, 10, 85.339), Vector(224.043, 3, 78.247), Vector(182.628, 3, 83.08)];
	}
	else if (gGamemode == 2)
	{
		gIvDomObjectiveAllPosList = [[Vector(201.832, 8, 52.598), Vector(218.7, 8, 82.857), 47, 23], [Vector(188.463, 3, 54.695), Vector(173.555, 6.997, 65.855), 14, 10], [Vector(192.951, 9, 112.137), Vector(168.563, 5, 81.053), 35, 9], [Vector(205.608, 0.039, 81.423), Vector(232.253, 2, 97.003), 28, 39], [Vector(206.304, 9, 81.776), Vector(185.063, 1, 82.814), 25, 7]];
	}
	gPlayerSpawnPos = Vector(181.974, 9, 96.862);
	gPlayerSpawnFacing = Forward();
	gAbilityShopPos = Vector(182.587, 8.998, 105.229);
	gBuyMenuLeftUpForward[2] = Forward();
	gBuyMenuCamPos = 900 * Up();
}

void mut_add_mutator() "MUT Subroutine: Add Mutator"
{
	gTemp2 = -50 - CountOf(gMutatorsList);
	if (gMutCount % 5 == 0 && gWaveNumber > 0)
	{
		BigMessage(AllPlayers(Team.All), "Gamechanging Mutator added!");
		gIsGmutEnabled = true;
		gTemp1 = gGmutList.Random();
		ModifyVariable(gGmutList, Operation.RemoveFromArrayByValue, gTemp1);
		if (gTemp1 == 0)
		{
			gGmutStormRaging = true;
			CreateHudText(AllPlayers(Team.All), null, "Storm Raging: Some enemies are enraged, killing them spreads the rage", null, Location.Right, gTemp2 - 0.5, null, Color.Orange, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartDamageModification(
				gCombatants,
				AllPlayers(Team.Team2).Filter(p => p.pGmutVar),
				140,
				DamageModificationRev.ReceiversAndDamagers
			);
		}
		else if (gTemp1 == 1)
		{
			gGmutSympathyGains = true;
			CreateHudText(AllPlayers(Team.All), null, "Sympathy Gains: Killing enemies heals other nearby enemies", null, Location.Right, gTemp2 - 0.5, null, Color.Orange, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 2)
		{
			gGmutAdaptiveShield = true;
			CreateHudText(AllPlayers(Team.All), null, "Adaptive Shield: Enemies below 50% HP gain shields for every nearby player", null, Location.Right, gTemp2 - 0.5, null, Color.Orange, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 3)
		{
			gGmutFortified = true;
			CreateHudText(AllPlayers(Team.All), null, "Fortified: Enemies resist stuns, knockbacks, and gain extra armour", null, Location.Right, gTemp2 - 0.5, null, Color.Orange, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 4)
		{
			gGmutSalvation = true;
			CreateHudText(AllPlayers(Team.All), null, "Salvation: Enemies heal themselves a small amount when they die", null, Location.Right, gTemp2 - 0.5, null, Color.Orange, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
	}
	else if (CountOf(gMutatorsList))
	{
		BigMessage(AllPlayers(Team.All), "New Mutator added!");
		gTemp1 = gMutatorsList.Random();
		ModifyVariable(gMutatorsList, Operation.RemoveFromArrayByValue, gTemp1);
		if (gTemp1 == 0)
		{
			gMutAmpted = true;
			CreateHudText(AllPlayers(Team.All), null, "Stampede: Enemies move faster", null, Location.Right, gTemp2, null, Color.Green, Color.Green, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 1)
		{
			gMutHardWired = true;
			CreateHudText(AllPlayers(Team.All), null, "Hardwired: Mechanical enemies gain shields and resist fear & electrocution", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 2)
		{
			gMutPromotion = true;
			CreateHudText(AllPlayers(Team.All), null, "Promotion: Higher tier heroes spawn more frequently", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 3)
		{
			gMutAdvancedMedkit = true;
			CreateHudText(AllPlayers(Team.All), null, "Advanced Medkit: Medics can revive tier 4 enemies and have less cooldown", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 4)
		{
			CreateHudText(AllPlayers(Team.All), null, "Berserk: Enemies below 50% health deal 25% more damage", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartDamageModification(
				gCombatants,
				AllPlayers(Team.Team2).Filter(p => NormalizedHealth(p) <= 0.5),
				125,
				DamageModificationRev.ReceiversAndDamagers
			);
		}
		else if (gTemp1 == 5)
		{
			CreateHudText(AllPlayers(Team.All), null, "Regeneration: Enemies slowly regenerate health", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartHealOverTime(AllPlayers(Team.Team2), null, 9999, 10);
		}
		else if (gTemp1 == 6)
		{
			gMutYakuza = true;
			CreateHudText(AllPlayers(Team.All), null, "Yakuza: Shinobis, Bowmasters, and Yokais gain more health and spawn as tier 3 enemies", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 7)
		{
			gMutEmpRound = true;
			CreateHudText(AllPlayers(Team.All), null, "EMP Rounds: Enemies deal double damage to barriers and objects", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartDamageModification(gCombatants, AllPlayers(Team.Team2), 50, DamageModificationRev.ReceiversAndDamagers);
		}
		else if (gTemp1 == 8)
		{
			gMutHeartBurn = true;
			CreateHudText(AllPlayers(Team.All), null, "Heartburn: Healing in combat is reduced by 30%", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartHealingModification(
				gCombatants.Filter(
					p => p.pLastDamageTakenT + (p.pPerkDieHard ? 0.5 : 1) * (gMutDeepWounds ? 5 : 2.5) > TotalTimeElapsed()
				),
				gCombatants,
				70,
				HealingModificationRev.ReceiversDamagersAndDamagePercent
			);
		}
		else if (gTemp1 == 9)
		{
			gMutDeepWounds = true;
			CreateHudText(AllPlayers(Team.All), null, "Deep Wounds: Health regeneration delay is doubled", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 10)
		{
			gMutGearUpgrade = true;
			CreateHudText(AllPlayers(Team.All), null, "Gear Upgrade: All Troopers are replaced with Heavy Troopers", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 11)
		{
			CreateHudText(AllPlayers(Team.All), null, "Last Men Standing: The final enemies take 25% less damage", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			StartDamageModification(
				AllPlayers(Team.Team2),
				gCombatants,
				gObjectivePhaseNumber == 3 ? 75 : 100,
				DamageModificationRev.ReceiversDamagersAndDamagePercent
			);
		}
		else if (gTemp1 == 12)
		{
			gMutReinforcements = true;
			CreateHudText(AllPlayers(Team.All), null, "Reinforcements: Enemy spawn rate is increased", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 13)
		{
			gMutMutation = TotalTimeElapsed();
			CreateHudText(AllPlayers(Team.All), null, "Mutation: Some enemies spawn with increased strength and size", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 14)
		{
			pGmutExpendable = true;
			CreateHudText(AllPlayers(Team.All), null, "Expendable: Dead Troopers are replaced almost instantly", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 15)
		{
			gMutCounterStrike = true;
			CreateHudText(AllPlayers(Team.All), null, "Counterstrike: Enemies can retreat from ultimates and counter back with their own", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 16)
		{
			gMutSwanSong = true;
			CreateHudText(AllPlayers(Team.All), null, "Swan Song: Boss enemies continue fighting for 5 seconds before going down", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 17)
		{
			gMutBulletProof = true;
			CreateHudText(AllPlayers(Team.All), null, "Bulletproof: Tier 2 enemies gain an additional layer of overhealth", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 18)
		{
			gMutFullyLoaded = true;
			CreateHudText(AllPlayers(Team.All), null, "Lock N' Load: Enemies can use additional abilities and have a higher clip size", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
		else if (gTemp1 == 19)
		{
			gMutLowBlow = true;
			CreateHudText(AllPlayers(Team.All), null, "Low Blow: Enemy knockback attacks double in damage and knockback", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
			SetKnockbackDealt(AllPlayers(Team.Team2), 200);
		}
		else if (gTemp1 == 20)
		{
			gGmutArtfulDodger = true;
			CreateHudText(AllPlayers(Team.All), null, "Artful Dodger: Enemies can dodge attacks more often and easily", null, Location.Right, gTemp2, null, Color.Green, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
		}
	}
}

void declare_victory() "Subroutine: Declare Victory"
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIf(gIsVcitoryDeclared);
	gIsVcitoryDeclared = true;
	DeclareTeamVictory(Team.Team1);
}

rule: "Source code: https://github.com/SlenderFox/HeatStreetTalents"
{
	DisableInspectorRecording();
}

rule: "Global (Init): Set Workshop Vars, Game Vars, Disable Game Components, Create Game Entities"
{
	# Select and initialize Gamemode
	gGamemode = [];
	if (WorkshopSettingToggle("Enabled Game Modes", "Invasion", true, 0))
	{
		ModifyVariable(gGamemode, Operation.AppendToArray, 0);
	}
	if (WorkshopSettingToggle("Enabled Game Modes", "High Value Target", true, 1))
	{
		ModifyVariable(gGamemode, Operation.AppendToArray, 1);
	}
	# Workaround: Need to reduce Slots because of spectator bug
	if (WorkshopSettingToggle("Enabled Game Modes", "Domination", true, 2) && NumberOfSlots(Team.Team1) <= 7)
	{
		ModifyVariable(gGamemode, Operation.AppendToArray, 2);
	}
	if (CountOf(gGamemode))
	{
		// Stays like this until gGamemode is sorted out
		gGamemode = RandomValueInArray(gGamemode);
	}
	else
	{
		# Workaround: Need to reduce Slots because of spectator bug
		gGamemode = RandomInteger(0, NumberOfSlots(Team.Team1) <= 7 ? 2 : 1);
	}
	if (gGamemode == 2)
	{
		gBossList1 = [Hero.Baptiste, Hero.Cassidy, Hero.Baptiste, Hero.Echo, Hero.Zarya, Hero.Lucio, Hero.Widowmaker, Hero.Ana, Hero.Orisa, Hero.Sigma, Hero.Tracer, Hero.Ana, Hero.Orisa, Hero.Hanzo, Hero.Genji, Hero.Brigitte, Hero.Widowmaker, Hero.Reaper, Hero.Kiriko, Hero.Dva, Hero.Pharah, Hero.Reinhardt];
		gBossList2 = [Hero.Brigitte, Hero.Sombra, Hero.Reaper, Hero.Pharah, Hero.Kiriko, Hero.Tracer, Hero.Roadhog, Hero.Zarya, Hero.Lucio, Hero.Dva, Hero.Kiriko, Hero.Roadhog, Hero.Dva, Hero.Genji, Hero.Reinhardt, Hero.Mei, Hero.Cassidy, Hero.Sombra, Hero.Sigma, Hero.Echo, Hero.Brigitte, Hero.Mei];
	}
	else
	{
		gBossList1 = [Hero.Cassidy, Hero.Baptiste, Hero.Lucio, Hero.Pharah, Hero.Widowmaker, Hero.Sombra, Hero.Reaper, Hero.Ana, Hero.Echo, Hero.Mei, Hero.Zarya, Hero.Tracer, Hero.Orisa, Hero.Kiriko, Hero.Reinhardt, Hero.Brigitte, Hero.Hanzo, Hero.Genji, Hero.Dva, Hero.Roadhog, Hero.Sigma, Hero.Reinhardt];
	}
	# 0=Easy, 1=Normal, 2=Hard, 3=Apocalypse
	gTemp1 = WorkshopSettingCombo("Settings", "Difficulty", 1, ["Easy", "Normal", "Hard", "Apocalyptic"], 0);
	# 100-500%
	gMoneyMult = WorkshopSettingInteger("Settings", "Money Generation Scalar (in Percent)", 100, 50, 500, 1);
	# 0=15w, 1=22w
	gIsGameLengthLong = WorkshopSettingCombo("Settings", "Game Length", 0, ["15 Waves", "22 Waves"], 2);
	CreateHudText(AllPlayers(), null, null, <"<0> Difficulty<1>", ["Easy", "Normal", "Hard", "Apocalyptic"][gTemp1], gMoneyMult == 100 ? "" : <", +<0>% money", gMoneyMult - 100>>, Location.Right, -100, null, null, Color.Orange, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
	gMoneyMult /= 100;
	if (gTemp1 == 0)
	{
		gDiffHealthMult = 0.6;
		gDiffDamageMult = 0.6;
	}
	else if (gTemp1 == 1)
	{
		gDiffHealthMult = 0.8;
		gDiffDamageMult = 0.8;
	}
	else if (gTemp1 == 2)
	{
		gIsHardModeEnabled = true;
		gDiffHealthMult = 1.15;
		gDiffDamageMult = 1.15;
		gMutCount = 5;
	}
	else
	{
		gIsApocalyptic = true;
		gMoneyMult *= 1.4;
		gDiffHealthMult = 1.5;
		gDiffDamageMult = 1.25;
		gMutCount = 5;
	}
	# 0=On, 1=Off
	gIsMutatorActivationDisabled = false;
	if (!gIsMutatorActivationDisabled)
	{
		gIsmutatorModeEnabled = true;
		gMoneyMult *= 2;
	}
	DisableCompletion();
	DisableScoring();
	DisableAnnouncer();
	gProgressBarStrings = ["□□□□□", "▣□□□□", "■□□□□", "■▣□□□", "■■□□□", "■■▣□□", "■■■□□", "■■■▣□", "■■■■□", "■■■■▣", "■■■■■"];
	gCharString = "0123456789!?#$%";
	gAimOffset = 0.5 * Down();
	gMutatorsList[20] = null;
	gMutatorsList = MappedArray(gMutatorsList, CurrentArrayIndex());
	gGmutList[4] = null;
	gGmutList = MappedArray(gGmutList, CurrentArrayIndex());
	if (gIsHardModeEnabled || gIsApocalyptic)
	{
		for (gIterator = -1; 3; 1)
		{
			MinWait();
			mut_add_mutator();
		}
	}
	# Initialize Map Specific Variables
	if (CurrentMap() == Map.Chateau_Guillard || CurrentMap() == Map.Chateau_Guillard_Halloween)
	{
		set_map_cg();
		gIsMapCg = true;
	}
	else
	{
		CreateHudText(AllPlayers(), "\n\n\n\n\n\n\n\n\n\n\n\n\n\n     This Map is not supported! Restart and choose a valid map.     \n\n\n\n\n\n\n\n\n\n\n\n\n\n", null, null, Location.Top, -1000, Color.Yellow, null, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
	}
	gNodesCount = CountOf(gNodes);
	gBuyMenuLeftUpForward[1] = DirectionFromAngles(
		HorizontalAngleFromDirection(gBuyMenuLeftUpForward[2]),
		VerticalAngleFromDirection(gBuyMenuLeftUpForward[2]) - 90
	);
	gBuyMenuLeftUpForward[0] = CrossProduct(gBuyMenuLeftUpForward[1], gBuyMenuLeftUpForward[2]);
	gBuyMenuBasePos = gBuyMenuCamPos - (9 * gBuyMenuLeftUpForward[1]) + (142 * gBuyMenuLeftUpForward[2]);
	# Workaround: Need to reduce Slots because of spectator bug
	if (NumberOfSlots(Team.Team1) > 8)
	{
		CreateHudText(AllPlayers(), "\n\n\n\n\n\n\n\n\n\n\n\n\n\n     Too many player slots! Set Max Team 1 Players to 5 or lower and restart.     \n\n\n\n\n\n\n\n\n\n\n\n\n\n", null, null, Location.Top, -1000, Color.Yellow, null, null, HudTextRev.VisibleTo, Spectators.DefaultVisibility);
	}
	# Create HUDs
	CreateHudText(
		AllPlayers(),
		null,
		null,
		"Heat Street Talents Revival [WSCODE 4.0.0] | Chateau Guillard ​-​ {0} {1}".Format([
			["Invasion", "High Value Target", "Domination"][gGamemode],
			MatchTime()
				? "{0}{1}{2}".Format([
					MatchTime() > 10 ? "0:" : "",
					RoundToInteger(RoundToInteger(10 * MatchTime(), Rounding.Up) / 10, Rounding.Down),
					MatchTime() > 10 ? "" : ".{0}".Format([
						RoundToInteger(10 * MatchTime(), Rounding.Up) % 10
					])
				])
				: ""
		]),
		Location.Top,
		-100,
		null,
		null,
		Color.White,
		HudTextRev.VisibleToAndString,
		Spectators.DefaultVisibility
	);
	if (!gIsGameLengthLong)
	{
		CreateHudText(
			AllPlayers(),
			"Wave {0}/{1} ".Format([
				gWaveNumber,
				gIsGameLengthLong ? "22" : "15"
			]),
			null,
			null,
			Location.Top,
			-99,
			Color.White,
			null,
			null,
			HudTextRev.VisibleToAndString,
			Spectators.DefaultVisibility
		);
	}
	CreateHudText(
		AllPlayers(),
		null,
		gObjectivePhaseNumber == 1 || (gObjectivePhaseNumber == 2 && gGamemode != 2) ? "" : "\n\n",
		null,
		Location.Top,
		-98,
		null,
		Color.White,
		null,
		HudTextRev.VisibleToAndString,
		Spectators.DefaultVisibility
	);
	//> Spacing char " "
	CreateHudText(
		gCombatants.Filter(p => DistanceBetween(p, gAbilityShopPos) > 2),
		"\n{0}\n Press {1} to start \n".Format([
			["   Invasion", "  High Value Target", "    Domination"][gGamemode],
			InputBindingString(Button.Interact)
		]),
		null,
		null,
		Location.Top,
		-92,
		Color.White,
		null,
		null,
		HudTextRev.VisibleToAndString,
		Spectators.DefaultVisibility
	);
	gGameOrMutatorsStartHuds[0] = LastTextID();
	CreateHudText(
		gCombatants.Filter(p => DistanceBetween(p, gAbilityShopPos) > 2),
		null,
		null,
		"Change the Objective in the Workshop Settings",
		Location.Top,
		-91,
		null,
		null,
		Color.Green,
		HudTextRev.VisibleTo,
		Spectators.DefaultVisibility
	);
	gGameOrMutatorsStartHuds[1] = LastTextID();
	CreateHudText(
		gCombatants.Filter(
			p => !p.pDownedStartT
			&& (p.pIsChangedHeroes || gObjectivePhaseNumber == 0 && !p.pInBuyMenu)
		),
		"\n Hold {0} to change heroes \n".Format([
			InputBindingString(Button.Reload)
		]),
		null,
		null,
		Location.Top,
		-90,
		Color.Yellow,
		null,
		null,
		HudTextRev.VisibleToAndString,
		Spectators.DefaultVisibility
	);
	CreateHudText(
		gCombatants.Filter(p => p.pDownedStartT),
		null,
		null,
		"Waiting for revival. Press {0} to spectate the next player.".Format([
			InputBindingString(Button.Jump)
		]),
		Location.Top,
		-70,
		null,
		null,
		Color.Yellow,
		HudTextRev.VisibleToAndString,
		Spectators.DefaultVisibility
	);
	CreateHudText(
		LocalPlayer(),
		null,
		LocalPlayer().pTutActive
			? "\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"
			: "Press [{0}] + [{1}] to toggle hud".Format([
				InputBindingString(Button.Crouch),
				InputBindingString(Button.Reload)
			]),
		null,
		Location.Left,
		-90,
		null,
		Color.Orange,
		null,
		HudTextRev.VisibleToAndString,
		Spectators.DefaultVisibility
	);
	CreateProgressBarHudText(
		LocalPlayer().pDownedStartT
			? LocalPlayer().pReviveTimer
			: gCombatants.IsTrueForAny(p => p.pRevivers.Contains(LocalPlayer()))
				? LocalPlayer()
				: [],
		LocalPlayer().pDownedStartT
			? LocalPlayer().pReviveTimer
			: gCombatants.Filter(
				p => p.pRevivers.Contains(LocalPlayer())
			).Sort(p => p.pReviveTimer).Last.pReviveTimer,
		LocalPlayer().pDownedStartT
			? "You are being revived"
			: "Reviving {0}".Format([
				CountOf(gCombatants.Filter(
					p => ArrayContains(p.pRevivers, LocalPlayer())
				)) > 1
					? "{0} Teammates".Format([
						CountOf(gCombatants.Filter(p => p.pRevivers.Contains(LocalPlayer())))
					])
					: gCombatants.Filter(p => p.pRevivers.Contains(LocalPlayer()))[0]
			]),
		Location.Top,
		-60,
		LocalPlayer().pDownedStartT
			? LocalPlayer().pIsReviveSlow
			: gCombatants.IsTrueForAll(
				p => !p.pRevivers.Contains(LocalPlayer()) || p.pIsReviveSlow
			)
				? Color.Orange
				: Color.SkyBlue,
		Color.White,
		ProgressBarHudEvaluation.VisibleToValuesAndColor,
		Spectators.DefaultVisibility
	);
	CreateHudText(
		gIsInfrasightOn ? AllPlayers() : [],
		"{0} Enemies have improved aim!".Format([
			AbilityIconString(Hero.Widowmaker, Button.Ultimate)
		]),
		null,
		null,
		Location.Top,
		-50,
		Color.Violet,
		null,
		null,
		HudTextRev.VisibleTo,
		Spectators.DefaultVisibility
	);
	/*CreateHudText(
		PlayersOnHero(Hero.Soldier76, Team.Team2).IsTrueForAny(p => p.pAbVar1 && p.pMyTarget == LocalPlayer()) ? LocalPlayer() : [],
		"{0} Locked on!".Format([
			AbilityIconString(Hero.Soldier76, Button.Ultimate)
		]),
		null,
		null,
		Location.Top,
		-49,
		CustomColor(
			245 + 10 * SineFromRadians(4 * TotalTimeElapsed()),
			205 + 50 * SineFromRadians(4 * TotalTimeElapsed()),
			200 * SineFromRadians(4 * TotalTimeElapsed()),
			255
		),
		null,
		null,
		HudTextRev.VisibleToAndColor,
		Spectators.DefaultVisibility
	);*/
	# Hide the default hud
	CreateHudText(
		AllPlayers(),
		null,
		null,
		"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
		Location.Top,
		-1,
		null,
		null,
		Color.White,
		HudTextRev.VisibleTo,
		Spectators.DefaultVisibility
	);
	CreateHudText(
		AllPlayers(Team.Team2),
		"Server Load: {0}, Average: {1}, Peak: {2}".Format([
			ServerLoad(),
			ServerLoadAverage(),
			ServerLoadPeak()
		]),
		null,
		null,
		Location.Left,
		-110,
		gIsWaitingToRemoveBot ? Color.Yellow : Color.White,
		null,
		null,
		HudTextRev.VisibleToStringAndColor,
		Spectators.DefaultVisibility
	);
	CreateHudText(
		[],
		null,
		"Mod by Lemonaid:\nChateau Guillard: KFVAY\nKanezaka: H4H7K\nDorado: NNNS6\nEichenwalde: MH9DN\nHollywood: K3235\nMalevento: 8GRV8\\Rout", "____\nCredits to:\n Shingen\n SgtMoody\nDevelopful\n",
		Location.Left,
		-1000,
		Color.White,
		Color.LimeGreen,
		Color.Green,
		HudTextRev.VisibleTo,
		Spectators.VisibleAlways
	);
	# Create Sombra Stealth Timer IWT
	CreateProgressBarInWorldText(
		HeroOf(LocalPlayer()) == Hero.Sombra && LocalPlayer().pIsInvisible ? LocalPlayer() : [],
		LocalPlayer().pSombraStealthTimer,
		"Invisible",
		UpdateEveryFrame(
			EyePosition(LocalPlayer()) + 100 * DirectionFromAngles(
				HorizontalFacingAngleOf(LocalPlayer()),
				VerticalFacingAngleOf(LocalPlayer()) + 13.5
			)
		),
		1.2,
		Clipping.DoNotClip,
		Color.Purple,
		Color.White,
		ProgressBarWorldEvaluation.VisibleToPositionAndValues,
		Spectators.DefaultVisibility
	);
	gMoneyAmount = 1400;
	set_random_perks();
	# Priority A: Players to Bots Damage Increase
	StartDamageModification(
		AllPlayers(Team.Team2).Filter(p => p.pIsTargetInLos && p.pMyTarget.pAbPriority == 1),
		gCombatants,
		125,
		DamageModificationRev.ReceiversAndDamagers
	);
	# Priority A: Bots to Players Damage Decrease
	StartDamageModification(
		gCombatants,
		AllPlayers(Team.Team2).Filter(p => p.pIsTargetInLos && p.pMyTarget.pAbPriority == 1),
		75,
		DamageModificationRev.ReceiversAndDamagers
	);
	# Priority C: Players to Players Healing Increase
	StartHealingModification(
		gCombatants.Filter(
			p => NormalizedHealth(p) <= 0.5
			&& p.pLastDamageTakenT + 2.5 > TotalTimeElapsed()
		),
		gCombatants.Filter(p => p.pAbPriority == 3),
		140,
		HealingModificationRev.ReceiversDamagersAndDamagePercent
	);
	# Nemesis: Your Nemesis IWT
	CreateInWorldText(
		LocalPlayer().pPerkNemesisKiller ? LocalPlayer() : [],
		"Your Nemesis",
		LocalPlayer().pPerkNemesisKiller,
		1.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToAndPosition,
		Color.Team2,
		Spectators.DefaultVisibility
	);
	CreateEffect(
		AllPlayers(),
		Effect.Ring,
		Color.SkyBlue,
		gAbilityShopPos,
		2,
		EffectRev.VisibleTo
	);
	CreateInWorldText(
		AllPlayers(),
		"Ability Shop",
		gAbilityShopPos, 1.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleTo,
		Color.SkyBlue,
		Spectators.DefaultVisibility
	);
	CreateHudText(
		!LocalPlayer().pIsCombatant || LocalPlayer().pDownedStartT || LocalPlayer().pInBuyMenu || LocalPlayer().pIsChangedHeroes
			? []
			: LocalPlayer(),
		DistanceBetween(LocalPlayer(), gAbilityShopPos) <= 2
			? MatchTime()
				? "\n Press {0} to buy Abilities \n".Format([InputBindingString(Button.Interact)])
				: "\n Press {0} to buy Abilities \n".Format([InputBindingString(Button.Interact)])
			: LocalPlayer().pCanUseDropInBuyMenu || MatchTime()
				? "\n Hold {0} to buy Abilities \n".Format([InputBindingString(Button.Interact)])
				: "",
		null,
		null,
		Location.Top,
		-80,
		Color.Green,
		null,
		null,
		HudTextRev.VisibleToAndString,
		Spectators.DefaultVisibility
	);
	# Create Buy Menu IWTs, on scale 2.5 1 space is 8.5 pixels
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		"┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃",
		gBuyMenuBasePos - 21 * gBuyMenuLeftUpForward[1] + 90 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleTo,
		Color.White,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		"┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃\n┃",
		gBuyMenuBasePos - 21 * gBuyMenuLeftUpForward[1] - 90 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleTo,
		Color.White,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		"Refund",
		gBuyMenuBasePos + 45 * gBuyMenuLeftUpForward[1] + 90 * gBuyMenuLeftUpForward[0],
		3,
		Clipping.DoNotClip,
		InworldTextRev.VisibleTo,
		Color.Green,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		"[{0}] {1}".Format([
			InputBindingString(Button.Melee),
			LocalPlayer().pIsShowingActiveAbilities ? "Show passive Abilities" : "Show active Abilities"
		]),
		gBuyMenuBasePos + 45 * gBuyMenuLeftUpForward[1],
		3,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToAndString,
		Color.Green,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		"[{0}] Leave".Format([InputBindingString(Button.Interact)]),
		gBuyMenuBasePos + 45 * gBuyMenuLeftUpForward[1] - 90 * gBuyMenuLeftUpForward[0],
		3,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToAndString,
		Color.Green,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		LocalPlayer().pAbPriority ? "Priority A\n  Swap" : "Priority A\n 1200$",
		gBuyMenuBasePos + 20 * gBuyMenuLeftUpForward[1] + 112.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToStringAndColor,
		LocalPlayer().pAbPriority ? Color.Yellow : CustomColor(0, 134, 171, 255),
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		LocalPlayer().pAbPriority ? "Priority B\n  Swap" : "Priority B\n 1200$",
		gBuyMenuBasePos - 2.5 * gBuyMenuLeftUpForward[1] + 112.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToStringAndColor,
		LocalPlayer().pAbPriority ? Color.Yellow : CustomColor(0, 134, 171, 255),
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		LocalPlayer().pAbPriority ? "Priority C\n  Swap" : "Priority C\n 1200$",
		gBuyMenuBasePos - 25 * gBuyMenuLeftUpForward[1] + 112.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToStringAndColor,
		LocalPlayer().pAbPriority ? Color.Yellow : CustomColor(0, 134, 171, 255),
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? "Stim Infusion\n    Swap"
				: "Stim Infusion\n   1200$"
			: LocalPlayer().pAbHeadhunter
				? "Headhunter II\n  800$"
				: "Headhunter I\n  800$",
		gBuyMenuBasePos + 20 * gBuyMenuLeftUpForward[1] + 67.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToStringAndColor,
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? Color.Yellow
				: Color.Green
			: LocalPlayer().pAbHeadhunter < 2
				? Color.Green
				: Color.Gray,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? "Smoke Bomb\n    Swap"
				: "Smoke Bomb\n   1200$"
			: LocalPlayer().pAbAntigens
				? "Antigens II\n   600$"
				: "Antigens I\n   600$",
		gBuyMenuBasePos - 2.5 * gBuyMenuLeftUpForward[1] + 67.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToStringAndColor,
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? Color.Yellow
				: Color.Green
			: LocalPlayer().pAbAntigens < 2
				? Color.Green
				: Color.Gray,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		LocalPlayer().pIsShowingActiveAbilities
			? ""
			: LocalPlayer().pAbQuickFix
				? "Quick Fix II\n  700$"
				: "Quick Fix I\n  700$",
		gBuyMenuBasePos - 25 * gBuyMenuLeftUpForward[1] + 67.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToStringAndColor,
		LocalPlayer().pAbQuickFix < 2 ? Color.Green : Color.Gray,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? "Cloak\n Swap"
				: "Cloak\n1200$"
			: LocalPlayer().pAbCharged
				? "Charged II\n  700$"
				: "Charged I\n  700$",
		gBuyMenuBasePos + 20 * gBuyMenuLeftUpForward[1] + 22.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToStringAndColor,
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? Color.Yellow
				: Color.Green
			: LocalPlayer().pAbCharged < 2
				? Color.Green
				: Color.Gray,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? "Resurgence\n   Swap"
				: "Resurgence\n  1200$"
			: LocalPlayer().pAbHaste
				? "Haste II\n  800$"
				: "Haste I\n  800$",
		gBuyMenuBasePos - 2.5 * gBuyMenuLeftUpForward[1] + 22.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToStringAndColor,
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? Color.Yellow
				: Color.Green
			: LocalPlayer().pAbHaste < 2
				? Color.Green
				: Color.Gray,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		LocalPlayer().pIsShowingActiveAbilities
			? ""
			: LocalPlayer().pAbHeavyImpact
				? "Heavy Impact II\n  1000$"
				: "Heavy Impact I\n  1000$",
		gBuyMenuBasePos - 25 * gBuyMenuLeftUpForward[1] + 22.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToStringAndColor,
		LocalPlayer().pAbHeavyImpact < 2
			? Color.Green
			: Color.Gray,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? "Feint\nSwap"
				: "Feint\n1200$"
			: LocalPlayer().pAbSecondWind
				? "Second Wind II\n   1000$"
				: "Second Wind I\n   1000$",
		gBuyMenuBasePos + 20 * gBuyMenuLeftUpForward[1] - 22.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToStringAndColor,
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? Color.Yellow
				: Color.Green
			: LocalPlayer().pAbSecondWind < 2
				? Color.Green
				: Color.Gray,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? "Tear Gas\n Swap"
				: "Tear Gas\n   1200$"
			: LocalPlayer().pAbTriage
				? "Triage II\n  700$"
				: "Triage I\n  700$",
		gBuyMenuBasePos - 2.5 * gBuyMenuLeftUpForward[1] - 22.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToStringAndColor,
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? Color.Yellow
				: Color.Green
			: LocalPlayer().pAbTriage < 2
				? Color.Green
				: Color.Gray,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		LocalPlayer().pIsShowingActiveAbilities
			? ""
			: LocalPlayer().pAbResilience
				? "Resilience II\n   800$"
				: "Resilience I\n   800$",
		gBuyMenuBasePos - 25 * gBuyMenuLeftUpForward[1] - 22.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToStringAndColor,
		LocalPlayer().pAbResilience < 2
			? Color.Green
			: Color.Gray,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? "Frenzy\n  Swap"
				: "Frenzy\n 1200$"
			: "+5% Health\n   500$",
		gBuyMenuBasePos + 20 * gBuyMenuLeftUpForward[1] - 67.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToStringAndColor,
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? Color.Yellow
				: Color.Green
			: Color.Green,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? "Chain Hack\n   Swap"
				: "Chain Hack\n  1200$"
			: "+5% Damage\n  500$",
		gBuyMenuBasePos - 2.5 * gBuyMenuLeftUpForward[1] - 67.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToStringAndColor,
		LocalPlayer().pIsShowingActiveAbilities
			? LocalPlayer().pActiveAbNumber
				? Color.Yellow
				: Color.Green
			: Color.Green,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		LocalPlayer().pIsShowingActiveAbilities
			? ""
			: "+5% Healing\n  500$",
		gBuyMenuBasePos - 25 * gBuyMenuLeftUpForward[1] - 67.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToAndString,
		Color.Green,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		"Limited offer!",
		gBuyMenuBasePos + 22.5 * gBuyMenuLeftUpForward[1] - 112.5 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToAndString,
		Color.White,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		LocalPlayer().pInBuyMenu && LocalPlayer().pIsShowingActiveAbilities  ? LocalPlayer() : [],
		"Hold or double tap {0} to use your active ability\n".Format([InputBindingString(Button.Melee)]),
		gBuyMenuBasePos - 25 * gBuyMenuLeftUpForward[1],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToAndString,
		Color.White,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		gCombatants.Filter(p => p.pInBuyMenu),
		"Press {0} to buy\n".Format([InputBindingString(Button.PrimaryFire)]),
		gBuyMenuBasePos - 74 * gBuyMenuLeftUpForward[1] - 55 * gBuyMenuLeftUpForward[0],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToAndString,
		Color.White,
		Spectators.DefaultVisibility
	);
	# Create Ability Entities and Cursor
	CreateInWorldText(
		LocalPlayer().pInBuyMenu ? LocalPlayer() : [],
		"{0}$\n".Format([
			RoundToInteger(gMoneyMult * gMoneyAmount - LocalPlayer().pMoneySpentAmount, Rounding.Down)
		]),
		gBuyMenuBasePos - 74 * gBuyMenuLeftUpForward[1],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToAndString,
		Color.White,
		Spectators.DefaultVisibility
	);
	CreateInWorldText(
		LocalPlayer().pInBuyMenu ? LocalPlayer() : [],
		"▲",
		UpdateEveryFrame(gBuyMenuBasePos - (4 + VerticalFacingAngleOf(LocalPlayer())) * gBuyMenuLeftUpForward[1] + HorizontalFacingAngleOf(LocalPlayer()) * gBuyMenuLeftUpForward[0]),
		4,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToPositionAndColor,
		CustomColor(
			245 + 10 * SineFromRadians(4 * TotalTimeElapsed()),
			205 + 50 * SineFromRadians(4 * TotalTimeElapsed()),
			200 * SineFromRadians(4 * TotalTimeElapsed()),
			255
		),
		Spectators.DefaultVisibility
	);
	# Use Update Every Frame to avoid showing the String when the cursor is out of bounds, resulting in 0
	CreateInWorldText(
		UpdateEveryFrame(
			LocalPlayer().pInBuyMenu
			&& AbsoluteValue(HorizontalFacingAngleOf(LocalPlayer())) < 135
			&& AbsoluteValue(VerticalFacingAngleOf(LocalPlayer()) + 11.25) < 45
				? LocalPlayer()
				: []
		),
		UpdateEveryFrame(VerticalFacingAngleOf(LocalPlayer()) < -33.75
			? [
				"Leave Buy Menu\n", LocalPlayer().pIsShowingActiveAbilities
					? "Swap to the passive abilities page\n"
					: "Swap to the active abilities page\n", "Refund your money\n"
			][RoundToInteger((HorizontalFacingAngleOf(LocalPlayer()) + 135) / 90, Rounding.Down)]
			: [
				VerticalFacingAngleOf(LocalPlayer()) < -11.25
					? "The limited offer changes every wave\n"
					: [
						"Mystery Swap: Periodically swap to a random hero with a free ult.\nHealth, damage and healing are increased by 20%",
						"Bulletstorm: Your weapon can hold unlimited ammo\n",
						"Die Hard: Your health regeneration delay is halved\n",
						"Brass Knuckles: While using quick melee you are immune to Cloakers' charge attack\nYour quick melee attack knocks enemies down (15 second cooldown)",
						"Vampiric: Heal for 30% of all dealt damage\n",
						"Crash N' Dash: Regenerate health while moving faster than 8 meters per second\n",
						"Golden Hour: You can be revived twice as fast\n",
						"Supercharge: Healing allies slowly charges their ultimate\n",
						"Nemesis: After going down automatically revive yourself when your killer dies\n",
						"Spec Ops: Gain 50 armour and immunity to grenadier smokes\n",
						"Sharpshooter: Deal 50% more damage to enemies that are further than 20 meters away\n",
						"Shockproof: Gain +15% speed and pass through enemies.\nBecome immune and deflect Taser electrocution attempts",
						"{0}: {1}".Format([LocalPlayer().pTalentText[0], LocalPlayer().pTalentText[1]]),
						"{0}: {1}".Format([LocalPlayer().pTalentText[2], LocalPlayer().pTalentText[3]])
					][gCurrentPerks[VerticalFacingAngleOf(LocalPlayer()) >= 11.25]],
				(LocalPlayer().pIsShowingActiveAbilities
					? [
						"Frenzy: Become invincible and force enemies to target you\n",
						"          Chain Hack: Hack and electrocute an enemy\nCan jump to nearby enemies up to 3 times with a shorter duration after each jump",
						""
					]
					: [
						"Increase your health by 5%\n",
						"Increase your damage by 5%\n",
						"Increase your healing by 5%\n"
					])[RoundToInteger((VerticalFacingAngleOf(LocalPlayer()) + 33.75) / 22.5, Rounding.Down)],
				(LocalPlayer().pIsShowingActiveAbilities
					? [
						"Feint: Dodge and dash into any direction, creating an explosion from start to finish",
						"Tear Gas: Launch a grenade that releases lingering noxious gas\n                 Enemies in the gas get stunned",
						""
					]
					: [
						LocalPlayer().pAbSecondWind
							? "Second Wind II: Revive yourself when downed. Can only happen once every 60 seconds"
							: "Second Wind I: Revive yourself when downed. Can only happen once every 90 seconds",
						LocalPlayer().pAbTriage
							? "Triage II: Heal 50% more to players under 50% health\n"
							: "Triage I: Heal 25% more to players under 50% health\n",
						LocalPlayer().pAbResilience
							? "Resilience II: Receive 20% less damage\nReceive 60% less knockback and inflict 60% more"
							: "Resilience I: Receive 20% less damage\nReceive 30% less knockback and inflict 30% more"
					])[RoundToInteger((VerticalFacingAngleOf(LocalPlayer()) + 33.75) / 22.5, Rounding.Down)],
				(LocalPlayer().pIsShowingActiveAbilities
					? [
						"Cloak: Become invisible and freeze nearby enemies when you become visible again\n",
						"   Resurgence: Heal yourself for 300 health per second\nIf you are at full health, heal a nearby injured ally instead",
						""
					]
					: [
						LocalPlayer().pAbCharged
							? "Charged II: Ultimates cost 30% less\n"
							: "Charged I: Ultimates cost 15% less\n",
						LocalPlayer().pAbHaste
							? "Haste II: Ability cooldown is reduced by 50%\nDoes not affect abilities with multiple charges"
							: "Haste I: Ability cooldown is reduced by 25%\nDoes not affect abilities with multiple charges",
						LocalPlayer().pAbHeavyImpact
							? "Heavy Impact II: Every hit has a chance to stun the enemy for 2 seconds\n"
							: "Heavy Impact I: Every hit has a chance to stun the enemy for 1 second\n"
					])[RoundToInteger((VerticalFacingAngleOf(LocalPlayer()) + 33.75) / 22.5, Rounding.Down)],
				(LocalPlayer().pIsShowingActiveAbilities
					? [
						"Stim Infusion: Instantly start health regeneration\nGain +100% damage, +100% healing and +50% speed",
						"      Smoke Bomb: Create a smoke screen\nEnemies are less accurate when targeting allies in the smoke",
						""
					]
					: [
						LocalPlayer().pAbHeadhunter
							? "Headhunter II: Critical hits deal 60% more damage\n"
							: "Headhunter I: Critical hits deal 30% more damage\n",
						LocalPlayer().pAbAntigens
							? "Antigens II: Receive 40% more healing and a natural overtime heal"
							: "Antigens I: Receive 20% more healing and a natural overtime heal",
						LocalPlayer().pAbQuickFix
							? "Quick Fix II: Eliminations restore 100 HP and shortly increase speed by 30%\n"
							: "Quick Fix I: Eliminations restore 50 HP and shortly increase speed by 15%\n"
					])[RoundToInteger((VerticalFacingAngleOf(LocalPlayer()) + 33.75) / 22.5, Rounding.Down)],
				[
					"    Priority A: Enemies are more likely to target you\nEnemies targeting you take 25% more and deal 25% less damage",
					"         Priority B: Enemies are less likely to target you\nGain +20% damage and speed if you did not take damage in the last 3 seconds",
					"  Priority C: Enemies are much less likely to target you\nHeal 40% more to allies in combat. Heal for 25% of dealt healing"
				][RoundToInteger((VerticalFacingAngleOf(LocalPlayer()) + 33.75) / 22.5, Rounding.Down)]
			][RoundToInteger((HorizontalFacingAngleOf(LocalPlayer()) + 135) / 45, Rounding.Down)]
		),
		gBuyMenuBasePos - 55 * gBuyMenuLeftUpForward[1],
		2.5,
		Clipping.DoNotClip,
		InworldTextRev.VisibleToAndString,
		Color.White,
		Spectators.DefaultVisibility
	);
	# Skip Assembling Heroes
	SetMatchTime(3);
	WaitUntil(IsGameInProgress(), 3.5);
	SetMatchTime(0);
	# Workaround: Need to reduce Slots because of spectator bug
	if (NumberOfSlots(Team.Team1) <= 8)
	{
		CreateDummyBot(Hero.Ana, Team.Team2, gGamemode, 1000 * Down(), Forward());
		if (NumberOfSlots(Team.Team1) <= 8)
		{
			CreateDummyBot(Hero.Roadhog, Team.Team2, 3, 1000 * Down(), Forward());
		}
		if (NumberOfSlots(Team.Team1) <= 5)
		{
			CreateDummyBot(Hero.Cassidy, Team.Team2, 4, 1000 * Down(), Forward());
		}
		if (NumberOfSlots(Team.Team1) <= 6)
		{
			CreateDummyBot(Hero.Cassidy, Team.Team2, 5, 1000 * Down(), Forward());
		}
		CreateDummyBot(Hero.Soldier76, Team.Team2, 6, 1000 * Down(), Forward());
		CreateDummyBot(Hero.Soldier76, Team.Team2, 7, 1000 * Down(), Forward());
		CreateDummyBot(Hero.Soldier76, Team.Team2, 8, 1000 * Down(), Forward());
		CreateDummyBot(Hero.Soldier76, Team.Team2, 9, 1000 * Down(), Forward());
		CreateDummyBot(Hero.Soldier76, Team.Team2, 10, 1000 * Down(), Forward());
	}
	gIsGmutEnabled = true;
	Wait(2, WaitBehavior.IgnoreCondition);
}

// After the other settings
rule: "Special thanks"
{
	Any Special_Thanks = WorkshopSettingCombo(" Remade by SlenderFox", "Credits", 0, ["LemonAid", "Shingen", "LtVictory", "SgtMoody", "Developful"], 0);
}

rule: "Global (First Wave): Create Mutator Start HUD, Scale Values, Set Level"
if (gWaveNumber == 0)
if (gCombatants.IsTrueForAny(
	p => IsButtonHeld(p, Button.Interact) && DistanceBetween(p, gAbilityShopPos) > 2
))
{
	DestroyHudText(gGameOrMutatorsStartHuds[0]);
	DestroyHudText(gGameOrMutatorsStartHuds[1]);
	EnableMusic();
	gWaveNumber = 1;
	SetUltimateCharge(gCombatants, 0);
	AllPlayers(Team.Team2).pBaseTier = 1;
	gEnableNormalSpawns = true;
	ModifyTeamScore(Team.Team1, 1);
	if (gGamemode == 2)
	{
		gEnableObjectiveEnemySpawns = 2;
		gIvDomObjectivePos = gIvDomObjectiveAllPosList.Random();
		gObjectiveProgress = [0, 0];
	}
	else
	{
		gEnableObjectiveEnemySpawns = true;
		(<Player>PlayersInSlot(gGamemode, Team.Team2)).pBaseTier = -1;
	}
}

rule: "Global (Next Wave): Revive Players, Scale Values, Set Level, Set Mutators"
if (gObjectivePhaseNumber == 3)
if (NumberOfLivingPlayers(Team.Team2) == 0)
{
	if (gWaveNumber >= 15 && !gIsGameLengthLong)
	{
		async! declare_victory();
	}
	else if (gWaveNumber >= 22 && gIsGameLengthLong)
	{
		async! declare_victory();
	}
	gObjectivePhaseNumber = 0;
	gCombatants.Filter(p => p.pDownedStartT && p.pDownedStartT + 0.1 < TotalTimeElapsed()).pDownedStartT = false;
	BigMessage(AllPlayers(), "Wave cleared!");
	gMoneyAmount += (gWaveNumber >= 2 ? 30 : 45) + 25 * gWaveNumber;
	set_random_perks();
	if (gIsmutatorModeEnabled && gWaveNumber % 2 == 1 || gIsApocalyptic)
	{
		SkipIf(gIsHardModeEnabled || gIsApocalyptic, 1);
		gMutCount += 1;
		mut_add_mutator();
		SkipIf(!(gIsHardModeEnabled || gIsApocalyptic), 1);
		gMutCount += 1;
	}
	DisableMusic();
	SetMatchTime(20);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	WaitUntil(!MatchTime(), 99999);
	EnableMusic();
	gWaveNumber += 1;
	gEnableNormalSpawns = true;
	ModifyTeamScore(Team.Team1, 1);
	if (gGamemode == 2)
	{
		gEnableObjectiveEnemySpawns = 2;
		gHvtDomObjectiveKilledCount = false;
		gIvDomObjectivePos = gIvDomObjectiveAllPosList.Remove(gIvDomObjectivePos).Random();
		gObjectiveProgress = [0, 0];
	}
	else
	{
		gEnableObjectiveEnemySpawns = true;
	}
	if (gWaveNumber == 2)
	{
		(<Player>PlayersInSlot(5, Team.Team2)).pBaseTier = 2;
		(<Player>PlayersInSlot(6, Team.Team2)).pBaseTier = 2;
	}
	else if (gWaveNumber == 3)
	{
		(<Player>PlayersInSlot(8, Team.Team2)).pBaseTier = 2;
	}
	else if (gWaveNumber == 4)
	{
		(<Player>PlayersInSlot(2, Team.Team2)).pBaseTier = 3;
		(<Player>PlayersInSlot(3, Team.Team2)).pBaseTier = 3;
	}
	else if (gWaveNumber == 5)
	{
		(<Player>PlayersInSlot(7, Team.Team2)).pBaseTier = 2;
	}
	else if (gWaveNumber == 8)
	{
		(<Player>PlayersInSlot(7, Team.Team2)).pBaseTier = 3;
	}
	else if (gWaveNumber == 9)
	{
		(<Player>PlayersInSlot(4, Team.Team2)).pBaseTier = 3;
	}
	AbortIf(!pGmutExpendable);
	PlayersOnHero(Hero.Soldier76, Team.Team2).Filter(p => p.pBaseTier <= 2).pIsExpendable = true;
}

rule: "Global: Enable normal Spawns"
if (gObjectivePhaseNumber == 1 || gObjectivePhaseNumber == 2)
if (!gEnableNormalSpawns)
if (NumberOfLivingPlayers(Team.Team2) < NumberOfPlayers(Team.Team2))
{
	// TODO arithmetic stuff here
	if (
		(2 * CountOf(
			AllLivingPlayers(Team.Team2).Filter(p => !p.pIsLivingBoss).Filter(p => p.pRealTier <= 2)
		) + 5 * CountOf(
			AllLivingPlayers(Team.Team2).Filter(p => !p.pIsLivingBoss).Filter(p => p.pRealTier == 3)
		) + 10 * CountOf(
			AllLivingPlayers(Team.Team2).Filter(p => !p.pIsLivingBoss).Filter(p => p.pRealTier == 4)
		)) <= Max(
			5,
			TotalTimeElapsed() - gLastSpawnPhaseEndT - 25 - 20 * CountOf(
				gCombatants.Filter(p => p.pDownedStartT)
			) / CountOf(gCombatants)
		)
	)
	{
		Wait(
			(
				gGamemode == 1
				&& gObjectivePhaseNumber == 1
				|| gGamemode == 2
				&& AllLivingPlayers(Team.Team2).IsTrueForAny(p => p.pIsLivingBoss)
					? 11
					: 6
			) - (gMutReinforcements ? 3 : 0),
			WaitBehavior.AbortWhenFalse
		);
		AbortIfConditionIsFalse();
		gEnableNormalSpawns = true;
		ModifyTeamScore(Team.Team1, 1);
	}
	else
	{
		Wait(1, WaitBehavior.AbortWhenFalse);
		LoopIfConditionIsTrue();
	}
}

rule: "Global: Disable normal Spawns"
if (gObjectivePhaseNumber == 1 || gObjectivePhaseNumber == 2)
if (gEnableNormalSpawns)
if (NumberOfLivingPlayers(Team.Team2) == NumberOfPlayers(Team.Team2))
{
	gEnableNormalSpawns = false;
	gLastSpawnPhaseEndT = TotalTimeElapsed();
}

rule: "Global: Defeat"
if (gWaveNumber > 0)
if (IsTrueForAll(gCombatants, ArrayElement().pDownedStartT))
{
	Wait(2, WaitBehavior.AbortWhenFalse);
	AbortIf(gIsVcitoryDeclared);
	gIsVcitoryDeclared = true;
	DeclareTeamVictory(Team.Team2);
}

rule: "Global: Anti-crash"
if (NumberOfPlayers(Team.Team2) > 7)
if (ServerLoadAverage() >= 255)
{
	gIsLoadLimitReached = true;
	if (!gIsWaitingToRemoveBot && gWaveNumber > 0)
	{
		WaitUntil(ServerLoadAverage() < 255, 4);
		if (ServerLoadAverage() >= 255)
		{
			gIsWaitingToRemoveBot = true;
			WaitUntil(ServerLoadAverage() < 255, 99999);
		}
	}
	else
	{
		WaitUntil(ServerLoadAverage() < 255, 99999);
	}
	gIsLoadLimitReached = false;
}

rule: "All Teams: Player left Match, Scale Damage"
Event.OnPlayerLeave
{
	update_combatants();
	for (gIterator = 0; NumberOfLivingPlayers(Team.Team2); 1)
	{
		SetDamageDealt(
			AllLivingPlayers(Team.Team2)[gIterator],
			AllLivingPlayers(Team.Team2)[gIterator].pDamageDealt * (gMutEmpRound ? 2 : 1) * (20 + 8.25 * (gWaveNumber - 1 + Max(0, gWaveNumber - 9))) * (0.139 + 0.2 * CountOf(gCombatants)) * 9 / NumberOfPlayers(Team.Team2)
		);
	}
}

import "pathing.ostw";
import "bots.ostw";
import "team1.ostw";
import "perks.ostw";
import "mutators.ostw";
import "gamemodes/invasion.ostw";
import "gamemodes/highvaluetarget.ostw";
import "gamemodes/domination.ostw";
import "info.ostw";
import "talents.ostw";
