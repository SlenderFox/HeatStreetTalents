import "globalvars.ostw";
import "playervars.ostw";
import "subroutines.ostw";

globalvar Boolean gMutLockNLoad;
globalvar Boolean gIsInfrasightOn;
globalvar Boolean gIsWaitingToRemoveBot;
globalvar Boolean gIsmutatorModeEnabled;
globalvar Boolean gMutHardWired;
globalvar Boolean gMutPromotion;
globalvar Boolean gMutGearUpgrade;
globalvar Boolean gMutMutation;
globalvar Boolean gMutAdvancedMedkit;
globalvar Boolean gMutEmpRound;
globalvar Boolean gMutFullyLoaded;
globalvar Boolean gMutBulletProof;
globalvar Boolean gMutYakuza;
globalvar Number gTier4SpawnsBlockEndT;
globalvar Number gDiffHealthMult;
globalvar Number gDiffDamageMult;
globalvar Hero[] gBossList1;
globalvar Hero[] gBossList2;

playervar Boolean pIsWraith;
playervar Boolean pCanStagger;
playervar Boolean pCanQuickMelee;
playervar Boolean pIsHardWired;
playervar Boolean pIsMutated;
playervar Boolean pIsIgnoringOtherTargets;
playervar Number pRecallBlockEndT;
playervar Vector pAbWraithPos;
playervar Vector pFacingOverrideDirection;

void start_facing() "Subroutine: Start Facing"
{
	if (EventPlayer().Hero() == Hero.Soldier76)
	{
		if (pRealTier == 4)
		{
			StartFacing(
				EventPlayer(),
				(
					pIsTargetInLos
					&& (!pAbVar1 || pIsUsingCombatPathfinding)
						? Vector(false, false, false)
						: 1.5 * DirectionTowards(EventPlayer(), pNavPos)
				) + (
					pMyTarget.pIsCombatant
						? DirectionTowards(
							EventPlayer().EyePosition(),
							EyePosition(pMyTarget) + pMyTarget.pEyeOffset
						)
						: Vector(false, false, false)
				),
				HasStatus(
					EventPlayer(), Status.Stunned
				)
					? 0
					: pAbVar1
						? 1000
						: 300,
				Relative.ToWorld,
				FacingRev.DirectionAndTurnRate
			);
		}
		else
		{
			StartFacing(
				EventPlayer(),
				(
					pIsTargetInLos
						? Vector(false, false, false)
						: 1.5 * DirectionTowards(EventPlayer(), pNavPos)
				) + (
					pMyTarget.pIsCombatant
						? DirectionTowards(
							EventPlayer().EyePosition(),
							EyePosition(pMyTarget) + pMyTarget.pEyeOffset
						)
						: Vector(false, false, false)
				),
				HasStatus(EventPlayer(), Status.Stunned)
					? 0
					: pSlowedUntil >= TotalTimeElapsed()
						? 50
						: 300,
						Relative.ToWorld,
						FacingRev.DirectionAndTurnRate
			);
		}
	}
	else
	{
		if (EventPlayer().Hero() == Hero.Widowmaker || EventPlayer().Hero() == Hero.Hanzo)
		{
			StartFacing(
				EventPlayer(),
				pFacingOverrideDirection
					? pFacingOverrideDirection
					: (
						pIsTargetInLos
							? Vector(false, false, false)
							: 1.5 * DirectionTowards(EventPlayer(), pNavPos)
					) + (
						pMyTarget.pIsCombatant
							? DirectionTowards(
								EventPlayer().EyePosition(),
								EyePosition(pMyTarget) + pMyTarget.pEyeOffset
							)
							: Vector(false, false, false)
					),
					HasStatus(EventPlayer(), Status.Stunned)
						? 0
						: 300,
					Relative.ToWorld,
					FacingRev.DirectionAndTurnRate
			);
			pFacingOverrideDirection = false;
		}
		else if (!pIvIsPortal)
		{
			StartFacing(
				EventPlayer(),
				(
					pIsTargetInLos
						? Vector(false, false, false)
						: 1.5 * DirectionTowards(EventPlayer(), pNavPos)
				) + (
					pMyTarget.pIsCombatant
						? DirectionTowards(
							EventPlayer().EyePosition(),
							EyePosition(pMyTarget) + pMyTarget.pEyeOffset
						)
						: Vector(false, false, false)
				),
				HasStatus(EventPlayer(), Status.Stunned)
					? 0
					: pSlowedUntil >= TotalTimeElapsed()
						? 50
						: 300,
						Relative.ToWorld,
						FacingRev.DirectionAndTurnRate
			);
		}
	}
}

void find_chase_target() "Subroutine: Find Chase Target"
{
	AbortIf(pIsIgnoringOtherTargets);
	# Target the closest player who is not an invalid target
	pMyTarget = gCombatants.Filter(
		p => !p.pDownedStartT
		&& !pActiveAbIsCloaked
		&& !(p.pIsInvisible && DistanceBetween(EventPlayer(), p) > 2.4)
	).Sort(p => DistanceBetween(EventPlayer(), p))[0];
}

Hero pick_hero(in Hero[] list)
{
	return list.Sort(h => RandomReal(0, 0.5) + IsHeroBeingPlayed(h, Team.Team2))[0];
}

void wait_until_aiming_at()
{
	Wait(
		AngleBetweenVectors(EventPlayer().FacingDirection(), VectorTowards(EventPlayer(), pMyTarget)) / 300,
		WaitBehavior.IgnoreCondition
	);
}

rule: "Team 2: Bot Init"
Event.OngoingPlayer
Team.Team2
{
	SetRespawnMaxTime(EventPlayer(), 9999);
	pAbBoughtAbilitiesString = "";
	# Workaround: Create Boss Health Bars
	if (SlotOf(EventPlayer()) == 0 || gGamemode == 2 && SlotOf(EventPlayer()) <= 3)
	{
		CreateProgressBarInWorldText(
			!pIvIsPortal && pIsLivingBoss ? AllPlayers() : [],
			100 * NormalizedHealth(EventPlayer()) + 0 * TotalTimeElapsed(),
			"",
			EventPlayer(),
			0.5,
			Clipping.ClipAgainstSurfaces,
			Color.Red,
			Color.Blue,
			ProgressBarWorldEvaluation.VisibleToAndValues,
			Spectators.DefaultVisibility
		);
	}
}

rule: "Team 2: Find Target"
Event.OngoingPlayer
Team.Team2
if (pIsAlive)
{
	if (!(pFearEndT >= TotalTimeElapsed() || pIsWraith || EventPlayer().Hero() == Hero.Sombra && pAbPlayer))
	{
		if (pIsIgnoringOtherTargets)
		{
			gTemp1 = pMyTarget.pIsCombatant
				&& !pMyTarget.pDownedStartT
				&& !pMyTarget.pActiveAbIsCloaked
				&& !(pMyTarget.pIsInvisible
				&& DistanceBetween(EventPlayer(), pMyTarget) > 2.4)
				&& IsInLineOfSight(
					EventPlayer().EyePosition(),
					EyePosition(pMyTarget) + pMyTarget.pEyeOffset,
					BarrierLOS.NoBarriersBlock
				) ? pMyTarget : null;
		}
		else
		{
			gTemp1 = gCombatants.Filter(
				p => !p.pDownedStartT
				&& !p.pActiveAbIsCloaked
				&& !(p.pIsInvisible && DistanceBetween(EventPlayer(), p) > 2.4)
				&& IsInLineOfSight(EventPlayer().EyePosition(), p.EyePosition() + p.pEyeOffset, BarrierLOS.NoBarriersBlock)
			).Sort(
				p => [1, 0.25, 2, 4][p.pAbPriority] * (p == pMyTarget ? 0.25 : 1) * DistanceBetween(EventPlayer(), p) + (!pIsRanged && p.pIsFlying ? 500 : 0) + (HasStatus(p, Status.Asleep) ? 1000 : 0) + (HasStatus(p, Status.Invincible) || HasStatus(p, Status.PhasedOut) ? 2000 : 0) + (p.pActiveAbIsFrenzied ? -5000 : 0)
			)[0];
		}

		if (gTemp1)
		{
			pIsTargetInLos = 5;
			pMyTarget = gTemp1;
			pTargetLastSeenPos = PositionOf(pMyTarget);
		}
		else
		{
			if (
				pMyTarget.pDownedStartT
				|| !pMyTarget.pIsCombatant
				|| pMyTarget.pActiveAbIsCloaked
				|| !(pMyTarget.pIsInvisible && DistanceBetween(EventPlayer(), pMyTarget) > 2.4)
			)
			{
				find_chase_target();
				pIsTargetInLos = 0;
			}
			else if (pIsTargetInLos)
			{
				if (!pIsFlying && PositionOf(pMyTarget).Y - EventPlayer().Position().Y > 2)
				{
					pIsUsingCombatPathfinding = 0;
				}
				pIsTargetInLos -= 1;
			}
			if (!pIsTargetInLos && Ammo(EventPlayer(), false) < 0.5 * MaxAmmo(EventPlayer(), 0))
			{
				PressButton(EventPlayer(), Button.Reload);
			}
		}
	}
	# Load relief
	Wait(gIsLoadLimitReached ? 1 : 0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 (Death): Field Resurrection"
Event.OnDeath
Team.Team2
{
	AbortIf(gWaveNumber == 0);
	pFearEndT = false;
	ClearStatus(EventPlayer(), Status.Hacked);
	if (SlotOf(EventPlayer()) == 1 && (gObjectivePhaseNumber == 1 || gObjectivePhaseNumber == 2))
	{
		if (gObjectivePhaseNumber == 1)
		{
			if (gHvtDomObjectiveKilledCount)
			{
				BigMessage(AllPlayers(), "HVT subdued!");
			}
			else
			{
				BigMessage(AllPlayers(), "HVT subdued! Gained bonus health");
			}
			gHvtDomObjectiveKilledCount += 1;
			gObjectivePhaseNumber = 2;
			pReviveTimer = false;
			pDownedStartT = 2;
			pGmutFortifiedBypassEndT = 100000;
		}

		if (EventWasEnvironment())
		{
			gTemp1 = NearestWalkablePosition(EventPlayer());
			nwp_teleport();
		}
		Resurrect(EventPlayer());
		ClearStatus(EventPlayer(), Status.PhasedOut);
		SetStatus(EventPlayer(), null, Status.Invincible, 9999);
		SetStatus(EventPlayer(), null, Status.KnockedDown, 9999);
		Wait(0.05, WaitBehavior.RestartWhenTrue);
		SetStatus(EventPlayer(), null, Status.PhasedOut, 9999);
		Abort();
	}
	if (!EventWasEnvironment() && EventPlayer().Hero() != Hero.Baptiste && !pIsLivingBoss && !pIsMutated && (gMutAdvancedMedkit || pRealTier < 4))
	{
		gTemp1 = PlayersOnHero(Hero.Baptiste, Team.Team2).Filter(
			p => IsAlive(p)
			&& !(HasStatus(p, Status.Hacked) || HasStatus(p, Status.Stunned) || p.pFearEndT >= TotalTimeElapsed())
			&& p.pAbVar2 + (gMutAdvancedMedkit ? 1 : 3) < TotalTimeElapsed()
			&& DistanceBetween(EventPlayer(), p) <= 10
			&& IsInLineOfSight(EventPlayer(), p, BarrierLOS.NoBarriersBlock)
		).Random();
		if (gTemp1)
		{
			Communicate(gTemp1, Communication.YouAreWelcome);
			gTemp1.pAbVar2 = TotalTimeElapsed();
			PressButton(gTemp1, Button.Ability1);
			Resurrect(EventPlayer());
			PlayEffect(AllPlayers(), PlayEffect.GoodPickupEffect, Color.Green, EventPlayer(), 1);
			if (EventPlayer().Hero() == Hero.Orisa)
			{
				# Disable Fortify so that Orisa can be knocked down
				SetAbilityCooldown(EventPlayer(), Button.Ability1, 0.5);
			}
			# Knocked Down Status is not applied when the bot is killed while stunned without a wait
			Wait(0.016, WaitBehavior.RestartWhenTrue);
			pGmutFortifiedBypassEndT = Max(TotalTimeElapsed() + 1.75, pGmutFortifiedBypassEndT);
			SetStatus(EventPlayer(), null, Status.KnockedDown, 1.75);
			Abort();
		}
	}
	if (gGmutStormRaging && pGmutVar)
	{
		gTemp1 = PlayersWithinRadius(EventPlayer().EyePosition(), 8, Team.Team2, RadiusLOS.Surfaces).Filter(
			p => p.pIsAlive
			&& !p.pGmutVar
			&& !p.pIvIsPortal
		).Sort(
			p => DistanceBetween(EventPlayer(), ArrayElement())
		).Slice(0, 2);
		gTemp1.pGmutVar = true;
		for (gIterator = 0; CountOf(gTemp1); 1)
		{
			PlayEffect(AllPlayers(), PlayEffect.GoodPickupEffect, Color.Red, gTemp1[gIterator], 1);
		}
		pGmutVar = false;
	}
	if (gGamemode == 2 && pIsLivingBoss)
	{
		gMoneyAmount += 40;
		if (gHvtDomObjectiveKilledCount)
		{
			BigMessage(AllPlayers(), "Killed both guards! Gained bonus health");
			gEnableNormalSpawns = true;
			call_reinforcements();
			async! play_incoming_sound_twice();
			upgrade_health_and_healing();
		}
		else
		{
			BigMessage(AllPlayers(), "Killed a guard!");
		}
		gHvtDomObjectiveKilledCount += 1;
	}
	StopForcingPlayerOutlines(EventPlayer(), AllPlayers());
	StopFacing(EventPlayer());
	StopThrottleInDirection(EventPlayer());
	pIsLivingBoss = false;
	pIsUsingBossAggression = false;
	pIsTargetInLos = 0;
	pIsAlive = false;
}

rule: "Team 2 (Respawn): Reset Dummy, Change Hero"
Event.OngoingPlayer
Team.Team2
if (!pIsAlive)
if (pBaseTier == -1 ? gEnableObjectiveEnemySpawns : gSpecialSpawnsCount > 0 || gEnableNormalSpawns || pIsExpendable)
{
	if (!(pBaseTier == -1 || gGamemode == 2 && gObjectivePhaseNumber == 0 && SlotOf(EventPlayer()) <= 3))
	{
		Wait(0.5 + 0.1 * Max(0, SlotOf(EventPlayer()) - 2), WaitBehavior.AbortWhenFalse);
	}
	StopAllDamageOverTime(EventPlayer());
	ClearStatus(EventPlayer(), Status.Burning);
	ClearStatus(EventPlayer(), Status.Rooted);
	AbortIfConditionIsFalse();
	if (pIsMutated)
	{
		StopScalingPlayer(EventPlayer());
		StopModifyingHeroVoiceLines(EventPlayer());
		pIsMutated = false;
		gMutMutation = TotalTimeElapsed() + 30;
	}
	if (gIsWaitingToRemoveBot && SlotOf(EventPlayer()) >= 9)
	{
		gIsWaitingToRemoveBot = false;
		DestroyDummyBot(Team.Team2, SlotOf(EventPlayer()));
		Abort();
	}
	DestroyEffect(pActiveAbEffectList);
	pActiveAbEffectList = [];
	if (pIsHardWired)
	{
		RemoveHealthPoolFromPlayer(pHpPool[4]);
	}
	if (gMutBulletProof)
	{
		RemoveHealthPoolFromPlayer(pHpPool[5]);
	}
	if (gMutYakuza)
	{
		RemoveHealthPoolFromPlayer(pHpPool[7]);
	}
	teleport_to_free_spawn();
	if (EventPlayer().Hero() == Hero.Soldier76)
	{
		# Select Soldier Variant
		if (gSpecialSpawnsCount > 0)
		{
			gSpecialSpawnsCount -= 1;
			if (gTier4SpawnsBlockEndT >= TotalTimeElapsed() || gWaveNumber < 5)
			{
				pRealTier = 3;
			}
			else
			{
				gTier4SpawnsBlockEndT = TotalTimeElapsed() + 10;
				pRealTier = 4;
			}
		}
		else
		{
			gTemp1 = pBaseTier + (gMutPromotion && RandomInteger(1, 100) <= 20);
			if (gTemp1 == 1)
			{
				pRealTier = gMutGearUpgrade ? 2 : 1;
			}
			else if (gTemp1 == 2)
			{
				pRealTier = 2;
			}
			else
			{
				pRealTier = IsTrueForAny(AllLivingPlayers(Team.Team2), !ArrayElement().pIsLivingBoss && ArrayElement().pRealTier == 4) || RandomInteger(1, 100) <= 80 ? 3 : 4;
			}
		}
		Resurrect(EventPlayer());
		if (pRealTier == 1)
		{
			StartForcingDummyBotName(EventPlayer(), "Trooper");
			pCombatPathfindingType = 0;
			pAbVar3 = true;
			pIsRanged = true;
			pCanDodge = false;
			pDamageDealt = 0.5;
			pHealthPercent = 0.333;
		}
		else if (pRealTier == 2)
		{
			StartForcingDummyBotName(EventPlayer(), "Heavy Trooper");
			pCombatPathfindingType = 8;
			pAbVar3 = false;
			pIsRanged = false;
			pCanDodge = false;
			pDamageDealt = 0.45;
			pHealthPercent = 0.417;
		}
		else if (pRealTier == 3)
		{
			StartForcingDummyBotName(EventPlayer(), "Grenadier");
			pCombatPathfindingType = 4;
			pAbVar3 = false;
			pIsRanged = true;
			pCanDodge = true;
			pDamageDealt = 0.55;
			pHealthPercent = 0.5;
		}
		else
		{
			StartForcingDummyBotName(EventPlayer(), "Cloaker");
			CreateEffect(AllPlayers(), Effect.EchoCloningEffect, EvaluateOnce(TotalTimeElapsed() + 0.5) >= TotalTimeElapsed() || pAbVar1 || pAbVar2 ? Color.Team1 : Color.Team2, EventPlayer(), 1, EffectRev.VisibleToAndColor);
			pActiveAbEffectList.ModAppend(LastCreatedEntity());
			pCombatPathfindingType = 9;
			pAbVar3 = true;
			pIsRanged = false;
			pCanDodge = false;
			pDamageDealt = 1;
			pHealthPercent = 1.1;
			pRealTier = 4;
		}

		if (!gMutLockNLoad)
		{
			gTemp1 = [30, 40, 1, 60][pRealTier - 1];
			SetMaxAmmo(EventPlayer(), false, gTemp1);
			SetAmmo(EventPlayer(), false, gTemp1);
		}
		pIsFortified = gGmutFortified;
		pCanStagger = !pIsFortified && pRealTier != 4;
		pCanQuickMelee = pRealTier != 4;
	}
	else
	{
		# Select Hero
		if (pBaseTier == -1)
		{
			pIsLivingBoss = true;
			gEnableObjectiveEnemySpawns = false;
			if (gGamemode == 0)
			{
				if (gObjectivePhaseNumber)
				{
					ForcePlayerHero(EventPlayer(), gBossList1[gWaveNumber - 1]);
					pIvIsPortal = false;
					pIsPathfindingDisabled = false;
				}
				else
				{
					ForcePlayerHero(EventPlayer(), Hero.Torbjorn);
					pIvIsPortal = true;
					pIsPathfindingDisabled = true;
					gObjectivePhaseNumber = 1;
					BigMessage(AllPlayers(), "Portal Opened!");
				}
			}
			else
			{
				ForcePlayerHero(EventPlayer(), gBossList1[gWaveNumber - 1]);
				gObjectivePhaseNumber = 1;
				gHvtDomObjectiveKilledCount = false;
				pIsUsingBossAggression = true;
				pGmutFortifiedBypassEndT = false;
				BigMessage(AllPlayers(), "High Value Target located!");
			}
		}
		else if (gGamemode == 2 && gObjectivePhaseNumber == 0)
		{
			pIsLivingBoss = true;
			pIsUsingBossAggression = true;
			gEnableObjectiveEnemySpawns -= 1;
			if (SlotOf(EventPlayer()) == 2)
			{
				ForcePlayerHero(EventPlayer(), gBossList1[gWaveNumber - 1]);
			}
			else
			{
				ForcePlayerHero(EventPlayer(), gBossList2[gWaveNumber - 1]);
			}
			if (gEnableObjectiveEnemySpawns <= 0)
			{
				gObjectivePhaseNumber = 1;
				BigMessage(AllPlayers(), "Control Points located!");
			}
		}
		else if (gSpecialSpawnsCount > 0)
		{
			gSpecialSpawnsCount -= 1;
			if (gTier4SpawnsBlockEndT >= TotalTimeElapsed() || gWaveNumber < 5)
			{
				ForcePlayerHero(
					EventPlayer(),
					pick_hero([
						Hero.Roadhog,
						gMutYakuza
							? Hero.Hanzo
							: false,
						gMutYakuza
							? Hero.Genji
							: false,
						gMutYakuza
							? Hero.Kiriko
							: false,
						gWaveNumber >= 2
							? Hero.Sigma
							: false,
						gWaveNumber >= 2
							? Hero.Orisa
							: false,
						gWaveNumber >= 3
							? Hero.Dva
							: false,
						gWaveNumber >= 3
							? Hero.Tracer
							: false,
						gWaveNumber >= 4
							? Hero.Ana
							: false,
						gWaveNumber >= 4
							? Hero.Mei
							: false,
						gWaveNumber >= 6
							? Hero.WreckingBall
							: false
					])
				);
			}
			else
			{
				gTier4SpawnsBlockEndT = TotalTimeElapsed() + 10;
				ForcePlayerHero(
					EventPlayer(),
					pick_hero([
						Hero.Hanzo,
						Hero.Genji,
						Hero.Kiriko,
						gWaveNumber >= 10
							? Hero.Reinhardt
							: false
					])
				);
			}
		}
		else
		{
			gTemp1 = pBaseTier + (gMutPromotion && RandomInteger(1, 100) <= 20);
			if (gTemp1 == 1)
			{
				ForcePlayerHero(
					EventPlayer(),
					pick_hero([
						Hero.Cassidy,
						gWaveNumber >= 3
							? Hero.Brigitte
							: false
					])
				);
			}
			else if (gTemp1 == 2)
			{
				ForcePlayerHero(
					EventPlayer(),
					pick_hero([
						Hero.Widowmaker,
						Hero.Baptiste,
						Hero.Zarya,
						Hero.Pharah,
						gWaveNumber >= 5
							? Hero.Echo
							: false,
						gWaveNumber >= 7
							? Hero.Sombra
							: false,
						gWaveNumber >= 11
							? Hero.Reaper
							: false,
						gWaveNumber >= 8
							? Hero.Lucio
							: false
					])
				);
			}
			else
			{
				ForcePlayerHero(
					EventPlayer(),
					pick_hero([
						Hero.Roadhog,
						Hero.WreckingBall,
						Hero.Mei,
						gWaveNumber >= 6
							? Hero.Orisa
							: false,
						gWaveNumber >= 4
							? Hero.Sigma
							: false,
						gWaveNumber >= 8
							? Hero.Tracer
							: false,
						gWaveNumber >= 9
							? Hero.Ana
							: false,
						gWaveNumber >= 9
							? Hero.Dva
							: false
					])
				);
			}
		}

		# Selected Hero is the same as current Hero
		if (EventPlayer().IsDead())
		{
			Resurrect(EventPlayer());
			SetAmmo(EventPlayer(), false, MaxAmmo(EventPlayer(), false));
			# D.Va is resurrected without mech, so remech
			if (EventPlayer().Hero() == Hero.Dva)
			{
				SetUltimateCharge(EventPlayer(), 100);
				PressButton(EventPlayer(), Button.Ultimate);
			}
		}

		if (
			EventPlayer().Hero() == Hero.Cassidy
			|| EventPlayer().Hero() == Hero.Baptiste
		)
		{
			pCombatPathfindingType = 0;
			pIsRanged = true;
			pCanDodge = false;
		}
		else if (
			EventPlayer().Hero() == Hero.Brigitte
			|| EventPlayer().Hero() == Hero.Reinhardt
			|| EventPlayer().Hero() == Hero.WreckingBall
		)
		{
			pCombatPathfindingType = 1;
			pIsRanged = false;
			pCanDodge = false;
		}
		else if (EventPlayer().Hero() == Hero.Orisa)
		{
			pCombatPathfindingType = 2;
			pIsRanged = true;
			pCanDodge = false;
		}
		else if (
			EventPlayer().Hero() == Hero.Sombra
			|| EventPlayer().Hero() == Hero.Dva
			|| EventPlayer().Hero() == Hero.Kiriko
		)
		{
			pCombatPathfindingType = 3;
			pIsRanged = false;
			pCanDodge = false;
			if (EventPlayer().Hero() == Hero.Sombra)
			{
				CreateBeamEffect(
					pAbPlayer ? AllPlayers() : [],
					BeamType.BadBeam,
					EventPlayer(),
					pAbPlayer,
					Color.Red,
					EffectRev.VisibleToPositionAndRadius
				);
				pActiveAbEffectList.ModAppend(LastCreatedEntity());
			}
			if (EventPlayer().Hero() == Hero.Kiriko)
			{
				pIsRanged = true;
				CreateEffect(
					pAbVar1 ? AllPlayers() : [],
					Effect.Sphere,
					Color.Turquoise,
					EventPlayer(),
					pAbVar1,
					EffectRev.VisibleToPositionAndRadius
				);
				pActiveAbEffectList.ModAppend(LastCreatedEntity());
			}
		}
		else if (
			EventPlayer().Hero() == Hero.Widowmaker
			|| EventPlayer().Hero() == Hero.Ana
			|| EventPlayer().Hero() == Hero.Pharah
		)
		{
			pCombatPathfindingType = 4;
			pIsRanged = true;
			pCanDodge = true;
		}
		else if (
			EventPlayer().Hero() == Hero.Roadhog
			|| EventPlayer().Hero() == Hero.Reaper
			|| EventPlayer().Hero() == Hero.Sigma
			|| EventPlayer().Hero() == Hero.Mei
			|| EventPlayer().Hero() == Hero.Zarya
		)
		{
			pCombatPathfindingType = 5;
			pIsRanged = false;
			pCanDodge = true;
		}
		else if (
			EventPlayer().Hero() == Hero.Tracer
			|| EventPlayer().Hero() == Hero.Genji
			|| EventPlayer().Hero() == Hero.Lucio
		)
		{
			pCombatPathfindingType = 6;
			pIsRanged = false;
			pCanDodge = false;
			if (EventPlayer().Hero() == Hero.Tracer)
			{
				pRecallBlockEndT = TotalTimeElapsed() + 4;
			}
		}
		else if (
			EventPlayer().Hero() == Hero.Echo
			|| EventPlayer().Hero() == Hero.Hanzo
		)
		{
			pCombatPathfindingType = 7;
			pIsRanged = true;
			pCanDodge = false;
		}
		else if (pIvIsPortal)
		{
			pCanDodge = false;
		}

		if (
			EventPlayer().Hero() == Hero.Brigitte
			|| EventPlayer().Hero() == Hero.Cassidy
		)
		{
			pRealTier = 1;
		}
		else if (
			EventPlayer().Hero() == Hero.Echo
			|| EventPlayer().Hero() == Hero.Baptiste
			|| EventPlayer().Hero() == Hero.Reaper
			|| EventPlayer().Hero() == Hero.Sombra
			|| EventPlayer().Hero() == Hero.Widowmaker
			|| EventPlayer().Hero() == Hero.Pharah
			|| EventPlayer().Hero() == Hero.Lucio
			|| EventPlayer().Hero() == Hero.Zarya
		)
		{
			pRealTier = 2;
			if (gMutBulletProof)
			{
				AddHealthPoolToPlayer(
					EventPlayer(),
					HealthType.Health,
					0.9 * pHealthPercent,
					false,
					false
				);
				pHpPool[5] = LastCreatedHealthPool();
			}
		}
		else if (
			EventPlayer().Hero() == Hero.Dva
			|| EventPlayer().Hero() == Hero.Orisa
			|| EventPlayer().Hero() == Hero.Roadhog
			|| EventPlayer().Hero() == Hero.Ana
			|| EventPlayer().Hero() == Hero.Tracer
			|| EventPlayer().Hero() == Hero.Mei
			|| EventPlayer().Hero() == Hero.WreckingBall
			|| EventPlayer().Hero() == Hero.Sigma
		)
		{
			pRealTier = 3;
		}
		else
		{
			pRealTier = 4;
		}

		pIsFortified = gGmutFortified || pIsLivingBoss;
		pCanStagger = !pIsFortified && (
			EventPlayer().Hero() == Hero.Cassidy
			|| EventPlayer().Hero() == Hero.Baptiste
			|| EventPlayer().Hero() == Hero.Pharah
			|| EventPlayer().Hero() == Hero.Widowmaker
		);

		pCanQuickMelee = EventPlayer().Hero() != Hero.Brigitte
			&& EventPlayer().Hero() != Hero.Roadhog
			&& EventPlayer().Hero() != Hero.WreckingBall
			&& EventPlayer().Hero() != Hero.Reinhardt
			&& !pIvIsPortal;

		if (pIsLivingBoss)
		{
			pHealthPercent = (gIsmutatorModeEnabled ? 1.2 : 1) * (!gIsGameLengthLong ? 1.25 : 1.5) * [4, 2.25, 2.25, 1][pRealTier - 1];
			pDamageDealt = (gIsmutatorModeEnabled ? 1.2 : 1) * ((gGamemode == 0 ? 1.5 : 1.3) + gWaveNumber / 35) * [3.5, 2.25, 1.7, 1.05][pRealTier - 1];
		}
		else
		{
			if (
				gMutMutation
				&& gMutMutation < TotalTimeElapsed()
				&& RandomInteger(1, 100) <= 15
				&& pRealTier < 4
			)
			{
				StartScalingPlayer(EventPlayer(), 1.3, false);
				StartModifyingHeroVoiceLines(EventPlayer(), 0.5, false);
				gMutMutation = 100000;
				pIsMutated = true;
				pHealthPercent = 2.5;
				pDamageDealt = 1.3;
				CreateEffect(
					AllPlayers(),
					Effect.WinstonPrimalRageEffect,
					Color.Team2,
					EventPlayer(),
					1,
					EffectRev.VisibleTo
				);
				pActiveAbEffectList.ModAppend(LastCreatedEntity());
			}
			else
			{
				pHealthPercent = 1;
				pDamageDealt = 1;
			}
		}

		if (gMutHardWired)
		{
			if (
				EventPlayer().Hero() == Hero.Echo
				|| EventPlayer().Hero() == Hero.Orisa
				|| EventPlayer().Hero() == Hero.Dva
				|| EventPlayer().Hero() == Hero.Genji
				|| EventPlayer().Hero() == Hero.WreckingBall
			)
			{
				pIsHardWired = true;
				if (EventPlayer().Hero() == Hero.Dva)
				{
					AddHealthPoolToPlayer(
						EventPlayer(),
						HealthType.Shields,
						IsInAlternateForm(EventPlayer())
							? 0
							: 0.75 * pHealthPercent,
						true,
						true
					);
				}
				else
				{
					AddHealthPoolToPlayer(
						EventPlayer(),
						HealthType.Shields,
						0.75 * pHealthPercent,
						true,
						true
					);
				}
				pHpPool[4] = LastCreatedHealthPool();
			}
			else
			{
				pIsHardWired = false;
			}
		}

		if (gMutYakuza)
		{
			if (
				EventPlayer().Hero() == Hero.Kiriko
				|| EventPlayer().Hero() == Hero.Hanzo
				|| EventPlayer().Hero() == Hero.Genji
			)
			{
				AddHealthPoolToPlayer(EventPlayer(), HealthType.Armor, 0.75 * pHealthPercent, true, true);
				pHpPool[7] = LastCreatedHealthPool();
			}
		}

		StopHoldingButton(EventPlayer(), Button.PrimaryFire);
		StopHoldingButton(EventPlayer(), Button.SecondaryFire);
		SetDamageReceived(EventPlayer(), pIsLivingBoss ? 50 : 100);

		if (EventPlayer().Hero() == Hero.Dva && pIsLivingBoss)
		{
			SetDamageReceived(EventPlayer(), 100);
		}
	}

	start_facing();

	if (SlotOf(EventPlayer()) == 1)
	{
		StartThrottleInDirection(
			EventPlayer(),
			VectorTowards(EventPlayer(), pNavPos),
			(
				pSlowedUntil >= TotalTimeElapsed() ? 0.3 : 1
			) * (
				DistanceBetween(
					EventPlayer(),
					Vector(
						pNavPos.X,
						EventPlayer().Position().Y,
						pNavPos.Z
					)
				) >= 0.5
					? pIsAggressive
						? 1
						: 0.9
					: 0),
			Relative.ToWorld,
			ThrottleBehavior.ReplaceExistingThrottle,
			ThrottleRev.DirectionAndMagnitude
		);
	}
	else if (!pIvIsPortal)
	{
		StartThrottleInDirection(
			EventPlayer(),
			VectorTowards(EventPlayer(), pNavPos),
			(
				pSlowedUntil >= TotalTimeElapsed() ? 0.3 : 1
			) * (
				DistanceBetween(
					EventPlayer(),
					Vector(
						pNavPos.X,
						EventPlayer().Position().Y,
						pNavPos.Z
					)
				) >= 0.5
			),
			Relative.ToWorld,
			ThrottleBehavior.ReplaceExistingThrottle,
			ThrottleRev.DirectionAndMagnitude
		);
	}

	# pHealthPercent value in percent, health does not scale during a bot's live
	pHealthPercent[0] *= gDiffHealthMult * (gIsmutatorModeEnabled ? 1.1 : 1) * (100 + 5 * (gWaveNumber - 1 + Max(0, gWaveNumber - 9))) * (0.111 + 0.222 * CountOf(gCombatants));
	SetMaxHealth(EventPlayer(), pHealthPercent[0]);
	# pDamageDealt value as a factor, damage can scale during a bot's live
	pDamageDealt[0] *= gDiffDamageMult;
	SetDamageDealt(
		EventPlayer(),
		pDamageDealt * (gMutEmpRound ? 2 : 1) * (20 + 9.25 * (gWaveNumber - 1 + Max(0, gWaveNumber - 9))) * (0.111 + 0.222 * CountOf(gCombatants)) * 9 / NumberOfPlayers(Team.Team2)
	);
	SetHealingReceived(
		EventPlayer(),
		pIvIsPortal
			? 0
			: gDiffHealthMult * (pIsLivingBoss ? 0.5 : 1) * (gIsmutatorModeEnabled ? 1.1 : 1) * (100 + 4 * (gWaveNumber - 1 + Max(0, gWaveNumber - 9))) * (0.111 + 0.222 * CountOf(gCombatants))
	);
	SetKnockbackReceived(EventPlayer(), pIsFortified ? 60 : 100);
	SetStatus(EventPlayer(), null, Status.Rooted, 1);
	if (pCombatPathfindingType == 9)
	{
		SetMoveSpeed(EventPlayer(), gMutAmpted ? 161 : 140);
	}
	else
	{
		SetMoveSpeed(EventPlayer(), gMutAmpted ? 115 : 100);
	}
	if (gMutLockNLoad)
	{
		SetMaxAmmo(EventPlayer(), false, 600);
		SetAmmo(EventPlayer(), false, 600);
	}
	find_chase_target();
	pAbPlayer = null;
	pAbVar1 = false;
	pAbVar2 = false;
	pFearEndT = pIvIsPortal
		? 100000
		: gGamemode == 2 && pIsLivingBoss
			? TotalTimeElapsed() + 3
			: 0;
	pIsAggressive = !pIsUsingBossAggression;
	if (gGmutStormRaging)
	{
		pGmutVar = !pIsLivingBoss
			&& pRealTier < 3
			&& RandomInteger(1, 3) > CountOf(AllLivingPlayers(Team.Team2).Filter(p => p.pGmutVar));
	}
	else if (gGmutAdaptiveShield)
	{
		pGmutVar = false;
	}
	if (!pIvIsPortal)
	{
		SetPlayerHealth(EventPlayer(), 100000);
	}
	pIsAlive = true;
	AbortIf(!pIsLivingBoss);
	StartForcingPlayerOutlines(EventPlayer(), AllPlayers(), true, Color.Yellow, OutlineType.Always);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	if (pIsAlive)
	{
		# Workaround: Sometimes outlines don't appear when set too early
		StartForcingPlayerOutlines(EventPlayer(), AllPlayers(), true, Color.Yellow, OutlineType.Always);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2: Bot took damage, Dodge"
Event.OnDamageTaken
Team.Team2
if (!gIsLoadLimitReached)
if (!pIsPathfindingDisabled)
if (pCanDodge)
if (pIsUsingCombatPathfinding)
{
	if (!(gIsLoadLimitReached || HasStatus(EventPlayer(), Status.Rooted) || HasStatus(EventPlayer(), Status.Stunned)))
	{
		if (pCombatPathfindingType == 4)
		{
			pNavPos = EventPlayer().Position() - gGmutArtfulDodger
				? 7
				: 3.5 * DirectionFromAngles(
					HorizontalAngleFromDirection(VectorTowards(EventPlayer(), pMyTarget)) + RandomInteger(-90, 90),
					false
				);
		}
		else
		{
			pNavPos = EventPlayer().Position() + gGmutArtfulDodger
				? 7
				: 3.5 * DirectionFromAngles(
					HorizontalAngleFromDirection(VectorTowards(EventPlayer(), pMyTarget)) + RandomInteger(-90, 90),
					false
				);
		}
		find_wp_near_nav();
	}
	Wait(gGmutArtfulDodger ? 0.6 : 1.2, WaitBehavior.IgnoreCondition);
}

rule: "Team 2: Is Hacked, Tase Bot"
Event.OngoingPlayer
Team.Team2
if (HasStatus(EventPlayer(), Status.Hacked))
if (!pIsLivingBoss)
if (!pIsHardWired)
{
	pSoldierEspionage = true;
	SetReloadEnabled(EventPlayer(), false);
	SetStatus(EventPlayer(), null, Status.Burning, 9999);
	SetStatus(EventPlayer(), null, Status.Rooted, 9999);
	StartFacing(
		EventPlayer(),
		DirectionFromAngles(
			EvaluateOnce(HorizontalFacingAngleOf(EventPlayer())) + RandomInteger(-75, -15),
			RandomInteger(35, 55) + Max(-90, (EvaluateOnce(TotalTimeElapsed()) - TotalTimeElapsed()) * 18)
		),
		HasStatus(EventPlayer(), Status.Stunned)
			? 0
			: EvaluateOnce(TotalTimeElapsed()) - TotalTimeElapsed() > -0.2
				? 1000
				: 100,
		Relative.ToWorld,
		FacingRev.DirectionAndTurnRate
	);
	WaitUntil(!HasStatus(EventPlayer(), Status.Hacked), 3.5);
	SetReloadEnabled(EventPlayer(), true);
	ClearStatus(EventPlayer(), Status.Burning);
	ClearStatus(EventPlayer(), Status.Rooted);
	Wait(0.1, WaitBehavior.IgnoreCondition);
	AbortIf(!pIsAlive);
	start_facing();
}

rule: "Team 2: Is Hacked, effect"
Event.OngoingPlayer
Team.Team2
if (HasStatus(EventPlayer(), Status.Hacked))
{
	pSoldierEspionage = true;
	WaitUntil(!HasStatus(EventPlayer(), Status.Hacked), 99999);
	Wait(0.1, WaitBehavior.IgnoreCondition);
	pSoldierEspionage = false;
	LoopIfConditionIsTrue();
}

rule: "Team 2: Quick Melee"
Event.OngoingPlayer
Team.Team2
if (pCanQuickMelee)
if (pIsTargetInLos)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(IsReloading(EventPlayer()));
	LoopIf(HasStatus(EventPlayer(), Status.Hacked));
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) >= 3);
	PressButton(EventPlayer(), Button.Melee);
	Wait(10, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2: Bot is feared"
Event.OngoingPlayer
Team.Team2
if (pFearEndT >= TotalTimeElapsed())
{
	pIsTargetInLos = 0;
	if (pIsLivingBoss)
	{
		StartForcingPlayerOutlines(
			EventPlayer(),
			AllPlayers(),
			true,
			Color.Violet,
			OutlineType.Always
		);
	}
	else
	{
		StartForcingPlayerOutlines(
			EventPlayer(),
			AllPlayers(),
			true,
			Color.Violet,
			OutlineType.Default
		);
	}

	WaitUntil(pFearEndT < TotalTimeElapsed(), 99999);

	if (pIsLivingBoss)
	{
		StartForcingPlayerOutlines(
			EventPlayer(),
			AllPlayers(),
			true,
			Color.Yellow,
			OutlineType.Always
		);
	}
	else
	{
		StopForcingPlayerOutlines(
			EventPlayer(),
			AllPlayers()
		);
	}
}

rule: "Team 2 (Ability): Heavy Impact / Damage Stagger"
Event.OnDamageTaken
Team.Team2
{
	AbortIf(!(pCanStagger || Attacker().pAbHeavyImpact));
	# the lower the minimum, the higher the chance
	AbortIf(RandomReal(0.003, 0.75) > EventDamage() / MaxHealth(EventPlayer()));
	pGmutFortifiedBypassEndT = Max(
		TotalTimeElapsed() + 0.5 * Max(0.8, Attacker().pAbHeavyImpact),
		pGmutFortifiedBypassEndT
	);
	SetStatus(EventPlayer(), Attacker(), Status.Stunned, (pIsFortified ? 0.5 : 1) * Max(0.8, Attacker().pAbHeavyImpact));
	Wait(5.5, WaitBehavior.IgnoreCondition);
}

rule: "Team 2 Brigitte: Hold / Drop Shield if Target and Distance to Target >= 6m"
Event.OngoingPlayer
Team.Team2
Player.Brigitte
if (pIsTargetInLos)
if (DistanceBetween(EventPlayer(), pMyTarget) >= 6)
{
	StartHoldingButton(EventPlayer(), Button.SecondaryFire);
	WaitUntil(!(pIsTargetInLos && DistanceBetween(EventPlayer(), pMyTarget) >= 6), 99999);
	StopHoldingButton(EventPlayer(), Button.SecondaryFire);
}

rule: "Team 2 Brigitte: Start / Stop Attacking if Distance to Target < 6m"
Event.OngoingPlayer
Team.Team2
Player.Brigitte
if (pIsTargetInLos)
if (DistanceBetween(EventPlayer(), pMyTarget) < 6)
{
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	WaitUntil(!(pIsTargetInLos && DistanceBetween(EventPlayer(), pMyTarget) < 6), 99999);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
}

rule: "Team 2 Brigitte: Increase / Normalize Move Speed while holding Shield"
Event.OngoingPlayer
Team.Team2
Player.Brigitte
if (EventPlayer().IsFiringSecondary())
{
	SetMoveSpeed(EventPlayer(), gMutAmpted ? 164.286 : 142.857);
	WaitUntil(!EventPlayer().IsFiringSecondary(), 99999);
	SetMoveSpeed(EventPlayer(), gMutAmpted ? 115 : 100);
}

rule: "Team 2 Brigitte: Whip Shot"
Event.OngoingPlayer
Team.Team2
Player.Brigitte
if (pIsTargetInLos >= 4)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > (pMyTarget.pIsFlying ? 100 : 50));
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) <= 6 || DistanceBetween(EventPlayer(), pMyTarget) >= 20);
	PressButton(EventPlayer(), Button.Ability1);
	Wait(3, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Zarya: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Zarya
if (pIsTargetInLos >= 4)
{
	wait_until_aiming_at();
	AbortIfConditionIsFalse();
	if (DistanceBetween(EventPlayer(), pMyTarget) > 10)
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
		Wait(1.5, WaitBehavior.IgnoreCondition);
	}
	else
	{
		StartHoldingButton(EventPlayer(), Button.PrimaryFire);
		Wait(3, WaitBehavior.IgnoreCondition);
		StopHoldingButton(EventPlayer(), Button.PrimaryFire);
		PressButton(EventPlayer(), Button.SecondaryFire);
		Wait(0.5, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2 Zarya: Self Bubble"
Event.OngoingPlayer
Team.Team2
Player.Zarya
if (pIsTargetInLos >= 4)
{
	Wait(10, WaitBehavior.IgnoreCondition);
	PressButton(EventPlayer(), Button.Ability1);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Zarya: Team Bubble"
Event.OngoingPlayer
Team.Team2
Player.Zarya
if (pIsTargetInLos >= 4)
if (AbilityCooldown(EventPlayer(), Button.Ability2) <= 0)
{
	PressButton(EventPlayer(), Button.Ability2);
	Wait(10, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Zarya: Grav"
Event.OngoingPlayer
Team.Team2
Player.Zarya
if (pIsTargetInLos >= 5)
if (!EventPlayer().IsUsingAbility1())
if (gWaveNumber >= 12 || pIsLivingBoss)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	SetProjectileSpeed(EventPlayer(), 30);
	SetProjectileGravity(EventPlayer(), 60);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(0.1, WaitBehavior.IgnoreCondition);
	SetProjectileSpeed(EventPlayer(), 100);
	SetProjectileGravity(EventPlayer(), 100);
	Wait(RandomReal(60, 80), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Lucio: Swap to heal and shoot"
Event.OngoingPlayer
Team.Team2
Player.Lucio
if (pIsTargetInLos >= 4)
{
	wait_until_aiming_at();
	AbortIfConditionIsFalse();
	PressButton(EventPlayer(), Button.Ability1);
	// Why is this sorting by nothing??
	if (DistanceBetween(EventPlayer(), AllLivingPlayers(Team.Team1).Filter(
		p => IsInViewAngle(EventPlayer(), p, 45)
	).Sort(p => ArrayElement())[0]) <= 4)
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
		Wait(0.7, WaitBehavior.IgnoreCondition);
	}
	else
	{
		StartHoldingButton(EventPlayer(), Button.PrimaryFire);
		Wait(2, WaitBehavior.IgnoreCondition);
	}
	PressButton(EventPlayer(), Button.Ability2);
	LoopIfConditionIsTrue();
	PressButton(EventPlayer(), Button.Ability1);
}

rule: "Team 2 Lucio: Ultimate"
Event.OngoingPlayer
Team.Team2
Player.Lucio
if (pIsTargetInLos >= 4)
if (!EventPlayer().IsUsingAbility1())
if (gWaveNumber >= 12 || pIsLivingBoss)
{
	AbortIfConditionIsFalse();
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(RandomReal(40, 60), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Kiriko: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Kiriko
if (pIsTargetInLos >= 4)
{
	PressButton(EventPlayer(), Button.SecondaryFire);
	Wait(0.6, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Kiriko: Swift Step"
Event.OngoingPlayer
Team.Team2
Player.Kiriko
if ((pIsAlive && NormalizedHealth(EventPlayer()) <= 0.5) == pIsAggressive)
{
	pIsAggressive = !pIsAggressive;
	pAbVar1 = 1;
	ChaseVariableOverTime(pAbVar1, 0, 3, TimeChaseReevaluation.DestinationAndDuration);
	Wait(3, WaitBehavior.IgnoreCondition);
	StopChasingVariable(pAbVar1);
	PlayEffect(AllPlayers(), PlayEffect.GoodPickupEffect, Color.Turquoise, EventPlayer().Position(), 1);
	PlayEffect(AllPlayers(), PlayEffect.BadPickupEffect, Color.White, EventPlayer().Position(), 200);
	MinWait();
	SkipIf(HasStatus(EventPlayer(), Status.Stunned), 1);
	teleport_to_free_spawn();
	pIsAggressive = true;
	WaitUntil(pIsTargetInLos, 15);
	Wait(RandomInteger(16, 22), WaitBehavior.IgnoreCondition);
}

rule: "Team 2 Kiriko: Jump"
Event.OngoingPlayer
Team.Team2
Player.Kiriko
if (pIsUsingCombatPathfinding)
if (!pMyTarget.pIsFlying)
if (IsOnGround(EventPlayer()))
{
	StartHoldingButton(EventPlayer(), Button.Jump);
	Wait(1, WaitBehavior.IgnoreCondition);
	StopHoldingButton(EventPlayer(), Button.Jump);
	Wait(RandomReal(0.8, 1.2), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Kiriko: Suzu"
Event.OngoingPlayer
Team.Team2
Player.Kiriko
if (DistanceBetween(EventPlayer(), pMyTarget) <= 40)
if (pIsTargetInLos >= 3)
{
	Wait(RandomInteger(7, 15), WaitBehavior.IgnoreCondition);
	PressButton(EventPlayer(), Button.Ability2);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Kiriko: Ult"
Event.OngoingPlayer
Team.Team2
Player.Kiriko
if (pIsTargetInLos >= 5)
if (DistanceBetween(EventPlayer(), pMyTarget) <= 20)
if (gWaveNumber >= 6 || pIsLivingBoss)
{
	AbortIfConditionIsFalse();
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(RandomReal(18, 30), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Wrecking Ball: Explode"
Event.OngoingPlayer
Team.Team2
Player.WreckingBall
if (pIsTargetInLos >= 4)
if (DistanceBetween(EventPlayer(), pMyTarget) <= 2.4)
{
	PlayEffect(
		AllPlayers(),
		PlayEffect.GoodPickupEffect,
		Color.White,
		EventPlayer(),
		1
	);
	SetUltimateCharge(EventPlayer(), 100);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	StartDamageOverTime(
		EventPlayer(),
		null,
		9999,
		MaxHealth(EventPlayer()) * 0.05
	);
	while (EventPlayer().IsAlive())
	{
		SetUltimateCharge(EventPlayer(), 100);
		MinWait();
		PressButton(EventPlayer(), Button.Ultimate);
		Wait(0.25, WaitBehavior.IgnoreCondition);
		SetStatus(EventPlayer(), null, Status.Stunned, 0.1);
		Wait(5, WaitBehavior.IgnoreCondition);
	}
	Kill(EventPlayer(), null);
}

rule: "Team 2 Cassidy: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Cassidy
if (pIsTargetInLos >= 4)
if (!IsUsingUltimate(EventPlayer()))
{
	wait_until_aiming_at();
	AbortIfConditionIsFalse();
	if (gMutLockNLoad || DistanceBetween(EventPlayer(), pMyTarget) > 5)
	{
		StartHoldingButton(EventPlayer(), Button.PrimaryFire);
		Wait(0.6, WaitBehavior.IgnoreCondition);
		StopHoldingButton(EventPlayer(), Button.PrimaryFire);
	}
	else
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
	}
	Wait(RandomReal(0.8, 1.2), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Cassidy: Combat Roll"
Event.OnDamageTaken
Team.Team2
Player.Cassidy
if (!gIsLoadLimitReached)
if (pIsUsingCombatPathfinding)
if (RandomInteger(1, 100) <= 30)
{
	gTemp1 = RayCastHitPosition(
		EventPlayer().EyePosition(),
		EventPlayer().EyePosition() + 6 * WorldVectorOf(
			ThrottleOf(EventPlayer()) == Vector(false, false, false)
				? Forward()
				: ThrottleOf(EventPlayer()),
			EventPlayer(),
			LocalVector.Rotation
		),
		null,
		null,
		false
	);
	if (
		DistanceBetween(
			gTemp1,
			RayCastHitPosition(gTemp1, gTemp1 + 5 * Down(), null, null, false)
		) < 5
	)
	{
		PressButton(EventPlayer(), Button.Ability1);
		Wait(10, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Wait(2, WaitBehavior.IgnoreCondition);
	}
}

rule: "Team 2 Soldier: Shoot, Is Charging (1), Protecting Charge Target (2), Has Used Ability (3)"
Event.OngoingPlayer
Team.Team2
Player.Soldier76
if (!pAbVar1)
if (pIsTargetInLos >= 4)
{
	wait_until_aiming_at();
	AbortIfConditionIsFalse();
	if (pRealTier == 3)
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
		if (gMutLockNLoad)
		{
			Wait(0.5, WaitBehavior.IgnoreCondition);
			PressButton(EventPlayer(), Button.SecondaryFire);
			Wait(1, WaitBehavior.IgnoreCondition);
		}
		else
		{
			if (EventPlayer().IsFiringSecondary())
			{
				Wait(0.5, WaitBehavior.IgnoreCondition);
				PressButton(EventPlayer(), Button.SecondaryFire);
				SetAmmo(EventPlayer(), false, false);
			}
			else
			{
				Wait(0.5, WaitBehavior.IgnoreCondition);
				PressButton(EventPlayer(), Button.SecondaryFire);
				if (EventPlayer().IsFiringSecondary())
				{
					SetAmmo(EventPlayer(), false, false);
				}
			}
			Wait(2, WaitBehavior.IgnoreCondition);
		}
	}
	else if (pRealTier == 4)
	{
		StartHoldingButton(EventPlayer(), Button.PrimaryFire);
		Wait(1.6, WaitBehavior.IgnoreCondition);
		StopHoldingButton(EventPlayer(), Button.PrimaryFire);
		if (Ammo(EventPlayer(), false) <= 4)
		{
			PressButton(EventPlayer(), Button.Reload);
		}
		Wait(
			pAbVar2
				? 0.2
				: RandomReal(1.2, 1.6),
			WaitBehavior.IgnoreCondition
		);
	}
	else
	{
		StartHoldingButton(EventPlayer(), Button.PrimaryFire);
		Wait(0.5, WaitBehavior.IgnoreCondition);
		StopHoldingButton(EventPlayer(), Button.PrimaryFire);
		if (Ammo(EventPlayer(), false) <= 2)
		{
			PressButton(EventPlayer(), Button.Reload);
		}
		Wait(
			pRealTier == 1
				? RandomReal(1.2, 1.8)
				: RandomReal(0.5, 0.9),
			WaitBehavior.IgnoreCondition
		);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2 Soldier: Biotic Field (Heavy Trooper), Emit Smoke (Grenadier)"
Event.OngoingPlayer
Team.Team2
Player.Soldier76
if (!pAbVar3)
if (NormalizedHealth(EventPlayer()) <= 0.5)
{
	pAbVar3 = true;
	if (pRealTier == 3)
	{
		for (gIterator = 5; 0; -1)
		{
			PlayEffect(
				AllPlayers(),
				PlayEffect.GoodExplosion,
				Color.White,
				EventPlayer(),
				0.1
			);
			if (EventPlayer().IsDead())
			{
				break;
			}
			Wait(0.2, WaitBehavior.IgnoreCondition);
		}

		PlayersWithinRadius(
			EventPlayer().EyePosition(),
			7,
			Team.Team1,
			RadiusLOS.Surfaces
		).pSmokedScreen = true;
		PlayEffect(
			AllPlayers(),
			PlayEffect.BadExplosion,
			Color.White,
			EventPlayer(),
			7
		);
		PlayEffect(
			AllPlayers(),
			PlayEffect.BadExplosion,
			Color.Gray,
			EventPlayer(),
			7
		);
		PlayEffect(
			AllPlayers(),
			PlayEffect.ExplosionSound,
			Color.White,
			EventPlayer(),
			200
		);
	}
	else
	{
		PressButton(EventPlayer(), Button.Ability2);
	}
}

rule: "Team 2 Soldier (Cloaker): Tactical Visor"
Event.OngoingPlayer
Team.Team2
Player.Soldier76
if (pRealTier == 4)
if (pIsTargetInLos >= 5)
if (!pMyTarget.pIsFlying)
if (DistanceBetween(EventPlayer(), pMyTarget) <= 40)
{
	Wait(0.5, WaitBehavior.IgnoreCondition);
	if (
		CountOf(
			gCombatants.Filter(p => p.pDownedStartT)
		) <= (
			CountOf(gCombatants) >= 4 ? 1 : 0
		)
		&& RandomInteger(0, 1)
	)
	{
		SetUltimateCharge(EventPlayer(), 100);
		PressButton(EventPlayer(), Button.Ultimate);
		if (IsUsingUltimate(EventPlayer()))
		{
			DisableMovementCollisionWithPlayers(EventPlayer());
			gTemp1 = DistanceBetween(EventPlayer(), pMyTarget) <= 10 ? 2 : 1.5;
			SetStatus(EventPlayer(), null, Status.Rooted, gTemp1);
			pIsIgnoringOtherTargets = true;
			pAbVar1 = 1;
			WaitUntil(
				pMyTarget.pDownedStartT
				|| !pMyTarget.pIsCombatant
				|| pMyTarget.pActiveAbIsCloaked
				|| !(
					pMyTarget.pIsInvisible
					&& DistanceBetween(EventPlayer(), pMyTarget) > 2.4
				) || !pAbVar1
				|| !IsUsingUltimate(EventPlayer())
				|| HasStatus(EventPlayer(), Status.Stunned)
				|| pFearEndT >= TotalTimeElapsed(),
				gTemp1 + 0.05
			);
			pAbVar1 = 2;
			WaitUntil(
				pMyTarget.pDownedStartT
				|| !pMyTarget.pIsCombatant
				|| pMyTarget.pActiveAbIsCloaked
				|| !(
					pMyTarget.pIsInvisible
					&& DistanceBetween(EventPlayer(), pMyTarget) > 2.4
				) || !pAbVar1
				|| !IsUsingUltimate(EventPlayer())
				|| HasStatus(EventPlayer(), Status.Stunned)
				|| pFearEndT >= TotalTimeElapsed(),
				99999
			);
			pIsIgnoringOtherTargets = false;
			pAbVar1 = false;
			EnableMovementCollisionWithPlayers(EventPlayer());
			WaitUntil(!IsUsingUltimate(EventPlayer()), 99999);
			Wait(12, WaitBehavior.IgnoreCondition);
		}
	}
	else
	{
		Wait(4, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2 Soldier (Cloaker): Stuck while charging"
Event.OngoingPlayer
Team.Team2
Player.Soldier76
if (pAbVar1 == 2)
if (pRealSpeed <= 1.5 || pMyTarget.pIsFlying)
{
	Wait(2, WaitBehavior.AbortWhenFalse);
	pAbVar1 = false;
}

rule: "Team 2 Soldier (Cloaker): Sprint"
Event.OngoingPlayer
Team.Team2
Player.Soldier76
if (pAbVar1 == 2)
if (!EventPlayer().IsUsingAbility1())
if (MagnitudeOf(ThrottleOf(EventPlayer())) > 0)
if (
	AbsoluteValue(
		HorizontalAngleFromDirection(ThrottleOf(EventPlayer()))
	) <= 60
)
{
	PressButton(EventPlayer(), Button.Ability1);
	Wait(0.5, WaitBehavior.AbortWhenFalse);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Soldier (Cloaker): Quick Melee"
Event.OngoingPlayer
Team.Team2
Player.Soldier76
if (pAbVar1 == 2)
if (DistanceBetween(EventPlayer(), pMyTarget) <= 3)
{
	pNavPos = PositionOf(pMyTarget) + 2.5 * DirectionTowards(EventPlayer(), pMyTarget);
	pAbVar1 = false;
	PressButton(EventPlayer(), Button.Melee);
}

rule: "Team 2 Soldier (Cloaker): Quick Melee, apply Stun"
Event.PlayerDealtKnockback
Team.Team2
Player.Soldier76
{
	AbortIf(EventAbility() != Button.Melee);
	AbortIf(pRealTier != 4);
	AbortIf(pMyTarget != Victim());
	if (Victim().pPerkBrassKnuckles && IsMeleeing(Victim()))
	{
		Wait(2, WaitBehavior.IgnoreCondition);
	}
	else if (
		HeroOf(Victim()) == Hero.Reinhardt
		&& IsUsingAbility1(Victim())
		&& AbsoluteValue(
			HorizontalAngleTowards(Victim(), EventPlayer())
		) <= 60
	)
	{
		pGmutFortifiedBypassEndT = Max(TotalTimeElapsed() + 2, pGmutFortifiedBypassEndT);
		SetStatus(EventPlayer(), Victim(), Status.KnockedDown, 2);
		SetStatus(Victim(), EventPlayer(), Status.KnockedDown, 2);
		Wait(1, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Damage(Victim(), EventPlayer(), 150);
		# Stun Sound
		SetStatus(Victim(), EventPlayer(), Status.Stunned, 3.5);
		Wait(0.05, WaitBehavior.IgnoreCondition);
		SetStatus(Victim(), EventPlayer(), Status.KnockedDown, 3.5);
		pAbVar2 = true;
		StartHoldingButton(EventPlayer(), Button.Crouch);
		Wait(1, WaitBehavior.IgnoreCondition);
		WaitUntil(
			!(
				pIsTargetInLos
				&& pMyTarget == Victim()
				&& HasStatus(Victim(), Status.KnockedDown)
			),
			2
		);
		pAbVar2 = false;
		StopHoldingButton(EventPlayer(), Button.Crouch);
	}
}

rule: "Team 2 Baptiste: Shoot, Has Used Immortality Field (1), Revive last time used (2)"
Event.OngoingPlayer
Team.Team2
Player.Baptiste
if (pIsTargetInLos >= 4)
{
	wait_until_aiming_at();
	AbortIfConditionIsFalse();
	PressButton(EventPlayer(), Button.PrimaryFire);
	Wait(RandomReal(0.7, 1.1), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Baptiste: Immortality Field"
Event.OngoingPlayer
Team.Team2
Player.Baptiste
if (pIsTargetInLos)
if (!pAbVar1)
if (NormalizedHealth(EventPlayer()) <= 0.25)
if (gWaveNumber >= 10 || pIsLivingBoss)
if (!HasStatus(EventPlayer(), Status.Hacked))
if (!HasStatus(EventPlayer(), Status.Stunned))
{
	pAbVar1 = true;
	AbortIf(!pIsLivingBoss && RandomInteger(1, 100) > 40);
	PressButton(EventPlayer(), Button.Ability2);
}

rule: "Team 2 Echo: Shoot, Is Landing (1)"
Event.OngoingPlayer
Team.Team2
Player.Echo
if (pIsTargetInLos >= 4)
{
	wait_until_aiming_at();
	AbortIfConditionIsFalse();
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	Wait(1.1, WaitBehavior.IgnoreCondition);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
	Wait(RandomReal(0.4, 0.6), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Echo: Sticky Bombs"
Event.OngoingPlayer
Team.Team2
Player.Echo
if (pIsTargetInLos >= 4)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 50);
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) >= 20);
	PressButton(EventPlayer(), Button.SecondaryFire);
	Wait(6, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Echo: Flight"
Event.OngoingPlayer
Team.Team2
Player.Echo
if (pIsTargetInLos >= 5)
if (pIsAggressive)
if (DistanceBetween(EventPlayer(), pMyTarget) <= 40)
{
	pIsUsingCombatPathfinding = 3;
	pIsNavReachableNode = false;
	PressButton(EventPlayer(), Button.Jump);
	PressButton(EventPlayer(), Button.Ability1);
	if (EventPlayer().IsUsingAbility1())
	{
		pIsFlying = true;
		WaitUntil(!EventPlayer().IsUsingAbility1(), 99999);
		if (pIsLivingBoss)
		{
			# Without a wait the second flight is silent
			MinWait();
			PressButton(EventPlayer(), Button.Jump);
			PressButton(EventPlayer(), Button.Ability1);
			WaitUntil(!EventPlayer().IsUsingAbility1(), 99999);
		}
		pNavPos = gNodes.Filter(
			v => IsInLineOfSight(EventPlayer(), v, BarrierLOS.NoBarriersBlock)
		).Sort(
			v => 2 * DistanceBetween(EventPlayer(), v) - VerticalAngleTowards(EventPlayer(), v)
		)[0];
		if (!pNavPos)
		{
			pNavPos = gNodes.Sort(v => DistanceBetween(EventPlayer(), v))[0];
		}
		pIsFlying = false;
		pAbVar1 = true;
		pIsPathfindingDisabled = true;
		WaitUntil(IsOnGround(EventPlayer()) || !pIsAlive, 99999);
		pAbVar1 = false;
		pIsPathfindingDisabled = false;
		Wait(4, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Wait(2, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2 Echo: Ascend / Descend"
Event.OngoingPlayer
Team.Team2
Player.Echo
if (pIsFlying)
if (AbsoluteValue(EventPlayer().Position().Y - pNavPos.Y) >= 1)
{
	if (EventPlayer().Position().Y < pNavPos.Y)
	{
		StartHoldingButton(EventPlayer(), Button.Jump);
		WaitUntil(
			!(pIsFlying && pNavPos.Y - EventPlayer().Position().Y >= 1),
			99999
		);
		StopHoldingButton(EventPlayer(), Button.Jump);
	}
	else
	{
		StartHoldingButton(EventPlayer(), Button.Crouch);
		WaitUntil(
			!(pIsFlying && EventPlayer().Position().Y - pNavPos.Y >= 1),
			99999
		);
		StopHoldingButton(EventPlayer(), Button.Crouch);
	}
}

rule: "Team 2 Echo: Glide"
Event.OngoingPlayer
Team.Team2
Player.Echo
if (pAbVar1)
{
	Wait(0.25, WaitBehavior.AbortWhenFalse);
	StartHoldingButton(EventPlayer(), Button.Jump);
	WaitUntil(!pAbVar1, 2.5);
	StopHoldingButton(EventPlayer(), Button.Jump);
}

rule: "Team 2 Mei: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Mei
if (pIsTargetInLos >= 4)
if (!EventPlayer().IsUsingAbility1())
{
	wait_until_aiming_at();
	AbortIfConditionIsFalse();
	if (DistanceBetween(EventPlayer(), pMyTarget) > 8)
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
		Wait(1.5, WaitBehavior.IgnoreCondition);
	}
	else
	{
		StartHoldingButton(EventPlayer(), Button.PrimaryFire);
		Wait(2.468, WaitBehavior.IgnoreCondition);
		StopHoldingButton(EventPlayer(), Button.PrimaryFire);
		PressButton(EventPlayer(), Button.SecondaryFire);
		Wait(0.5, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2 Mei: Ice Block + Wall"
Event.OngoingPlayer
Team.Team2
Player.Mei
if (NormalizedHealth(EventPlayer()) <= 0.499)
if (!EventPlayer().IsUsingAbility1())
{
	PressButton(
		EventPlayer(),
		RandomInteger(1, 4) <= 3
			? Button.Ability2
			: Button.Ability1
	);
	if (EventPlayer().IsUsingAbility2())
	{
		Wait(0.05, WaitBehavior.IgnoreCondition);
		PressButton(EventPlayer(), Button.PrimaryFire);
	}
	Wait(0.5, WaitBehavior.IgnoreCondition);
	if (EventPlayer().IsUsingAbility1())
	{
		Heal(
			EventPlayer(),
			null,
			MaxHealth(EventPlayer()) * 0.25
		);
	}
	Wait(7, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Mei: Ult"
Event.OngoingPlayer
Team.Team2
Player.Mei
if (pIsTargetInLos >= 5)
if (DistanceBetween(EventPlayer(), pMyTarget) <= 25)
if (!EventPlayer().IsUsingAbility1())
if (gWaveNumber >= 12 || pIsLivingBoss)
{
	AbortIfConditionIsFalse();
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(RandomReal(18, 40), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sombra: Shoot, Tase Target (Player), Just used Translocater (1), Took Damage (2), Tase / EMP Start Health (3)"
Event.OngoingPlayer
Team.Team2
Player.Sombra
if (pIsTargetInLos >= 4)
if (pAbPlayer == null)
{
	wait_until_aiming_at();
	AbortIfConditionIsFalse();
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	Wait(0.7, WaitBehavior.IgnoreCondition);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
	if (Ammo(EventPlayer(), false) <= 7)
	{
		PressButton(EventPlayer(), Button.Reload);
	}
	Wait(RandomReal(0.8, 1.2), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sombra: Translocator"
Event.OngoingPlayer
Team.Team2
Player.Sombra
if (pIsTargetInLos >= 5)
if (pIsAggressive)
if (!pMyTarget.pIsFlying)
if (DistanceBetween(EventPlayer(), pMyTarget) >= 7.5)
if (DistanceBetween(EventPlayer(), pMyTarget) <= 25)
if (PositionOf(pMyTarget).Y - EventPlayer().Position().Y >= 3)
if (IsInViewAngle(EventPlayer(), pMyTarget, 5))
{
	if (EventPlayer().IsUsingAbility2())
	{
		PressButton(EventPlayer(), Button.Interact);
		Wait(0.05, WaitBehavior.IgnoreCondition);
	}
	PressButton(EventPlayer(), Button.Ability2);
	Wait(
		0.2 + DistanceBetween(EventPlayer(), pMyTarget) / 25,
		WaitBehavior.IgnoreCondition
	);
	AbortIf(!EventPlayer().IsUsingAbility2());
	PressButton(EventPlayer(), Button.Ability2);
	Wait(0.1, WaitBehavior.IgnoreCondition);
	AbortIf(!HasStatus(EventPlayer(), Status.PhasedOut));
	pAbVar1 = true;
	pIsNavReachableNode = false;
	Wait(2, WaitBehavior.IgnoreCondition);
	pAbVar1 = false;
	Wait(8, WaitBehavior.IgnoreCondition);
}

rule: "Team 2 Sombra: EMP"
Event.OngoingPlayer
Team.Team2
Player.Sombra
if (pIsTargetInLos >= 5)
if (gWaveNumber >= 13 || pIsLivingBoss)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > (pAbVar1 ? 60 : 30));
	LoopIf(
		HasStatus(EventPlayer(), Status.Hacked)
		|| HasStatus(EventPlayer(), Status.Stunned)
	);
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) >= 12);
	LoopIf(
		!IsInLineOfSight(
			EventPlayer().EyePosition(),
			EyePosition(pMyTarget),
			BarrierLOS.NoBarriersBlock
		)
	);
	PlayEffect(
		AllPlayers(),
		PlayEffect.GoodPickupEffect,
		Color.Purple,
		EventPlayer(),
		1
	);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	pAbVar2 = false;
	pAbVar3 = EventPlayer().Health();
	WaitUntil(
		UltimateChargePercent(EventPlayer()) != 100
		&& (
			pAbVar2
			|| EventPlayer().Health() < pAbVar3
		),
		0.3
	);
	if (
		UltimateChargePercent(EventPlayer()) != 100
		&& (
			pAbVar2
			|| EventPlayer().Health() < pAbVar3
		)
	)
	{
		pGmutFortifiedBypassEndT = Max(TotalTimeElapsed() + 0.5, pGmutFortifiedBypassEndT);
		SetStatus(EventPlayer(), null, Status.Stunned, 0.5);
		Wait(8, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Wait(14, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sombra: Tase"
Event.OngoingPlayer
Team.Team2
Player.Sombra
if (pIsTargetInLos)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(
		RandomInteger(1, 100) > (pMyTarget.pIsFlying ? 80 : 40)
	);
	LoopIf(
		HasStatus(EventPlayer(), Status.Hacked)
		|| HasStatus(EventPlayer(), Status.Stunned)
	);
	LoopIf(EventPlayer().IsDead());
	LoopIf(pMyTarget.pTasedEndT >= TotalTimeElapsed());
	LoopIf(
		HasStatus(pMyTarget, Status.Invincible)
		|| HasStatus(pMyTarget, Status.PhasedOut)
		|| IsUsingUltimate(pMyTarget)
	);
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) >= 12);
	LoopIf(
		!IsInLineOfSight(
			EventPlayer().EyePosition(),
			EyePosition(pMyTarget),
			BarrierLOS.AllBarriersBlock
		)
	);
	pAbPlayer = pMyTarget;
	pAbVar2 = false;
	pAbVar3 = EventPlayer().Health();
	pAbPlayer.pTasedEndT = TotalTimeElapsed() + 6;
	SetStatus(EventPlayer(), null, Status.Rooted, 6);
	if (!pAbPlayer.pPerkShockProof)
	{
		SmallMessage(pAbPlayer, "A Taser is stunning you! Shoot her to break free!");
	}
	Wait(10, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sombra: Tase times out / Lost Health / Target is downed / Target left / Is CCd / Distance too High / LOS lost"
Event.OngoingPlayer
Team.Team2
Player.Sombra
if (pAbPlayer != null)
if (
	pAbPlayer.pTasedEndT < TotalTimeElapsed()
	|| pAbVar2
	|| EventPlayer().Health() < pAbVar3
	|| pAbPlayer.pDownedStartT
	|| !pAbPlayer.pIsCombatant
	|| HasStatus(EventPlayer(), Status.Hacked)
	|| HasStatus(EventPlayer(), Status.Stunned)
	|| DistanceBetween(EventPlayer(), pAbPlayer) >= 11
	|| !IsInLineOfSight(
		EventPlayer().EyePosition(),
		EyePosition(pAbPlayer),
		BarrierLOS.AllBarriersBlock
	)
)
{
	if (pAbPlayer.pPerkShockProof)
	{
		Damage(EventPlayer(), pAbPlayer, 50);
		SetStatus(
			PlayersWithinRadius(
				EventPlayer().EyePosition(),
				10,
				Team.Team2,
				RadiusLOS.Surfaces
			).Filter(
				p => !HasStatus(p, Status.PhasedOut)
			), null, Status.Hacked, 2
		);
		PlayEffect(
			AllPlayers(),
			PlayEffect.BadExplosion,
			Color.Purple,
			EventPlayer(),
			10
		);
		PlayEffect(
			AllPlayers(),
			PlayEffect.ExplosionSound,
			Color.White,
			EventPlayer(),
			200
		);
	}
	pAbPlayer.pTasedEndT = false;
	pAbPlayer = null;
	AbortIf(HasStatus(EventPlayer(), Status.Hacked));
	ClearStatus(EventPlayer(), Status.Rooted);
}

rule: "Team 2 Sombra: Took Damage"
Event.OnDamageTaken
Team.Team2
Player.Sombra
{
	pAbVar2 = true;
}

rule: "Team 1: Is Tased, Disable Abilities, Movement, Shake Facing, Set Aimspeed, Shoot"
Event.OngoingPlayer
Team.Team1
if (pTasedEndT >= TotalTimeElapsed())
{
	AbortIf(pPerkShockProof);
	SetStatus(
		EventPlayer(),
		null,
		Status.Burning,
		10
	);
	SetStatus(
		EventPlayer(),
		null,
		Status.Hacked,
		10
	);
	SetStatus(
		EventPlayer(),
		null,
		Status.Rooted,
		10
	);
	StartFacing(
		EventPlayer(),
		DirectionFromAngles(
			HorizontalFacingAngleOf(EventPlayer()) + RandomInteger(-100, 20),
			VerticalFacingAngleOf(EventPlayer()) + RandomInteger(-100, 80)
		),
		100,
		Relative.ToWorld,
		FacingRev.DirectionAndTurnRate
	);
	PressButton(
		EventPlayer(),
		EventPlayer().Hero() == Hero.Moira
			? Button.SecondaryFire
			: Button.PrimaryFire
	);
	Wait(0.3, WaitBehavior.IgnoreCondition);
	StopFacing(EventPlayer());
	while (pTasedEndT >= TotalTimeElapsed())
	{
		SetAimSpeed(EventPlayer(), 50);
		PressButton(
			EventPlayer(),
			EventPlayer().Hero() == Hero.Moira
			? Button.SecondaryFire
			: Button.PrimaryFire
		);
		WaitUntil(pTasedEndT < TotalTimeElapsed(), RandomReal(0.1, 0.3));
		SetAimSpeed(EventPlayer(), 200);
		PressButton(
			EventPlayer(),
			EventPlayer().Hero() == Hero.Moira
			? Button.SecondaryFire
			: Button.PrimaryFire
		);
		WaitUntil(pTasedEndT < TotalTimeElapsed(), RandomReal(0.1, 0.3));
	}
	SetAimSpeed(EventPlayer(), 100);
	ClearStatus(EventPlayer(), Status.Burning);
	ClearStatus(EventPlayer(), Status.Hacked);
	ClearStatus(EventPlayer(), Status.Rooted);
}

rule: "Team 2 Widowmaker: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Widowmaker
if (pIsTargetInLos >= 4)
{
	if (
		DistanceBetween(EventPlayer(), pMyTarget) < 8
		|| !pIsLivingBoss
		&& HasStatus(EventPlayer(), Status.Hacked)
	)
	{
		wait_until_aiming_at();
		AbortIfConditionIsFalse();
		StartHoldingButton(EventPlayer(), Button.PrimaryFire);
		Wait(0.25, WaitBehavior.IgnoreCondition);
		StopHoldingButton(EventPlayer(), Button.PrimaryFire);
		if (Ammo(EventPlayer(), false) <= 1)
		{
			PressButton(EventPlayer(), Button.Reload);
		}
	}
	else
	{
		StartHoldingButton(EventPlayer(), Button.SecondaryFire);
		pIsIgnoringOtherTargets = true;
		WaitUntil(
			!(EventPlayer().IsFiringSecondary() && pIsTargetInLos),
			1.3
		);
		pIsIgnoringOtherTargets = false;
		if (EventPlayer().IsFiringSecondary() && pIsTargetInLos >= 4)
		{
			PressButton(EventPlayer(), Button.PrimaryFire);
			MinWait();
		}
		StopHoldingButton(EventPlayer(), Button.SecondaryFire);
	}
	Wait(1, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Widowmaker: Grappling Hook"
Event.OngoingPlayer
Team.Team2
Player.Widowmaker
if (pIsUsingCombatPathfinding)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > (pRealSpeed <= 1 ? 100 : 25));
	LoopIf(EventPlayer().IsFiringSecondary());
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) >= 8);
	PressButton(EventPlayer(), Button.Ability1);
	if (EventPlayer().IsUsingAbility1())
	{
		pFacingOverrideDirection = DirectionFromAngles(
			HorizontalFacingAngleOf(EventPlayer()) + (RandomInteger(0, 1) ? -45 : 45),
			-5
		);
		Wait(0.16, WaitBehavior.IgnoreCondition);
		pFacingOverrideDirection = false;
		WaitUntil(!EventPlayer().IsUsingAbility1(), 99999);
		pNavPos = EventPlayer().Position();
		Wait(8, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

disabled rule: "Team 2 Widowmaker: Infra-Sight"
Event.OngoingPlayer
Team.Team2
Player.Widowmaker
if (pIsTargetInLos)
if (!gIsInfrasightOn)
if (gWaveNumber >= 1 || pIsLivingBoss)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 20);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(38, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Widowmaker: Infra-Sight if Sombra is stealthed"
Event.OngoingPlayer
Team.Team2
Player.Widowmaker
if (pMyTarget == 0)
if (!gIsInfrasightOn)
if (gCombatants.IsTrueForAny(p => p.pIsInvisible))
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 40);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
}

rule: "Global: Set / Unset Is Infrasight on (Bots)"
Event.OngoingGlobal
if (
	gIsInfrasightOn != PlayersOnHero(Hero.Widowmaker, Team.Team2)
		.IsTrueForAny(p => IsUsingUltimate(p))
)
{
	gIsInfrasightOn = !gIsInfrasightOn;
	gAimOffset = (gIsInfrasightOn ? 0 : 0.5) * Down();
	MinWait();
	LoopIfConditionIsTrue();
}

rule: "Team 2 Pharah: Flight"
Event.OngoingPlayer
Team.Team2
Player.Pharah
if (pIsTargetInLos >= 4)
{
	PressButton(EventPlayer(), Button.Ability1);
	StartHoldingButton(EventPlayer(), Button.Jump);
	Wait(RandomReal(0.777, 1.111), WaitBehavior.AbortWhenFalse);
	StopHoldingButton(EventPlayer(), Button.Jump);
	Wait(RandomReal(0.222, 0.555), WaitBehavior.AbortWhenFalse);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Pharah: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Pharah
if (pIsTargetInLos >= 4)
{
	wait_until_aiming_at();
	AbortIfConditionIsFalse();
	PressButton(EventPlayer(), Button.PrimaryFire);
	Wait(RandomReal(0.6, 1.3), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Reaper: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Reaper
if (pIsTargetInLos >= 4)
if (!EventPlayer().IsUsingAbility1())
{
	wait_until_aiming_at();
	AbortIfConditionIsFalse();
	PressButton(EventPlayer(), Button.PrimaryFire);
	Wait(0.6, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Reaper: Wraith Form, Force Position"
Event.OngoingPlayer
Team.Team2
Player.Reaper
if (pIsAlive)
if (pIsAggressive)
if (pFearEndT < TotalTimeElapsed())
if (!HasStatus(EventPlayer(), Status.Hacked))
if (!HasStatus(EventPlayer(), Status.Rooted))
if (!HasStatus(EventPlayer(), Status.Stunned))
if (DistanceBetween(EventPlayer(), pMyTarget) >= 10)
if (DistanceBetween(EventPlayer(), pMyTarget) <= 40)
{
	PressButton(EventPlayer(), Button.Ability1);
	if (EventPlayer().IsUsingAbility1())
	{
		pAbWraithPos = EventPlayer().Position();
		ChaseVariableAtRate(
			pAbWraithPos,
			PositionOf(pMyTarget) + 0.5 * Up(),
			15,
			RateChaseReevaluation.DestinationAndRate
		);
		StartForcingPlayerPosition(EventPlayer(), pAbWraithPos, true);
		DisableMovementCollisionWithEnvironment(EventPlayer(), true);
		pIsWraith = true;
		pIsPathfindingDisabled = true;
		pIsTargetInLos = 5;
		Wait(8, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Wait(1, WaitBehavior.IgnoreCondition);
	}
	LoopIfConditionIsTrue();
}

rule: "Team 2 Reaper: Cancel Wraith Form, Stop Forcing Position"
Event.OngoingPlayer
Team.Team2
Player.Reaper
if (pIsWraith)
if (EventPlayer().IsUsingAbility1())
if (DistanceBetween(EventPlayer(), pMyTarget) <= 3)
if (
	IsInLineOfSight(
		pMyTarget,
		EventPlayer().Position(),
		BarrierLOS.NoBarriersBlock
	)
)
{
	if (
		DistanceBetween(
			EventPlayer(),
			RayCastHitPosition(
				EventPlayer(),
				EventPlayer().Position() + 5 * Down(),
				null,
				null,
				false
			)
		) >= 5
	)
	{
		Wait(0.15, WaitBehavior.IgnoreCondition);
		AbortIf(!pIsWraith);
	}
	PressButton(EventPlayer(), Button.Ability1);
	StopChasingVariable(pAbWraithPos);
	StopForcingPlayerPosition(EventPlayer());
	EnableMovementCollisionWithEnvironment(EventPlayer());
	pIsWraith = false;
	pIsPathfindingDisabled = false;
	pNavPos = PositionOf(pMyTarget);
	pIsNavReachableNode = false;
}

rule: "Team 2 Reaper: Wraith Form Timed out / Target left / Target is invisible, Stop Forcing Position"
Event.OngoingPlayer
Team.Team2
Player.Reaper
if (pIsWraith)
if (
	!EventPlayer().IsUsingAbility1()
	|| !pMyTarget.pIsCombatant
	|| pMyTarget.pActiveAbIsCloaked
)
{
	StopChasingVariable(pAbWraithPos);
	StopForcingPlayerPosition(EventPlayer());
	EnableMovementCollisionWithEnvironment(EventPlayer());
	pIsWraith = false;
	pIsPathfindingDisabled = false;
	pIsNavReachableNode = false;
}

rule: "Team 2 Reaper: Death Blossom"
Event.OngoingPlayer
Team.Team2
Player.Reaper
if (pIsTargetInLos >= 5)
if (!EventPlayer().IsUsingAbility1())
if (gWaveNumber >= 12 || pIsLivingBoss)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 20);
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) >= 7);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(28, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Ana: Shoot, Has Used Nano Boost (1)"
Event.OngoingPlayer
Team.Team2
Player.Ana
if (pIsTargetInLos >= 4)
{
	if (
		DistanceBetween(EventPlayer(), pMyTarget) < 8
		|| !pIsLivingBoss
		&& HasStatus(EventPlayer(), Status.Hacked)
	)
	{
		StopHoldingButton(EventPlayer(), Button.SecondaryFire);
		wait_until_aiming_at();
		AbortIfConditionIsFalse();
	}
	else
	{
		if (!EventPlayer().IsFiringSecondary())
		{
			StartHoldingButton(EventPlayer(), Button.SecondaryFire);
			Wait(0.5, WaitBehavior.IgnoreCondition);
		}
	}
	PressButton(EventPlayer(), Button.PrimaryFire);
	Wait(1, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
	StopHoldingButton(EventPlayer(), Button.SecondaryFire);
}

rule: "Team 2 Ana: Biotic Grenade"
Event.OngoingPlayer
Team.Team2
Player.Ana
if (pIsTargetInLos >= 4)
{
	Wait(1.75, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 40);
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) >= 15);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(9, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Ana: Nano Boost"
Event.OngoingPlayer
Team.Team2
Player.Ana
if (pIsTargetInLos)
if (!pAbVar1)
if (NormalizedHealth(EventPlayer()) <= 0.75)
if (gWaveNumber >= 13 || pIsLivingBoss)
if (!HasStatus(EventPlayer(), Status.Hacked))
if (!HasStatus(EventPlayer(), Status.Stunned))
{
	pAbVar1 = true;
	AbortIf(!pIsLivingBoss && RandomInteger(1, 100) > 50);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
}

rule: "Team 2 D.Va: Start / Stop Shooting, Has Used Self-Destruct (1), Can remech (2)"
Event.OngoingPlayer
Team.Team2
Player.Dva
if (pIsTargetInLos >= 3)
if (
	DistanceBetween(EventPlayer(), pMyTarget) <= 10
	|| EventPlayer().IsUsingAbility1()
	|| IsStanding(EventPlayer())
	|| IsInAlternateForm(EventPlayer())
)
{
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	WaitUntil(
		!(
			pIsTargetInLos >= 3
			&& (
				DistanceBetween(EventPlayer(), pMyTarget) <= 15
				|| EventPlayer().IsUsingAbility1()
				|| IsStanding(EventPlayer())
				|| IsInAlternateForm(EventPlayer())
			)
		),
		RandomInteger(4, 8)
	);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
	StartHoldingButton(EventPlayer(), Button.SecondaryFire);
	WaitUntil(AbilityResource(EventPlayer(), Button.SecondaryFire) <= 30, 2);
	StopHoldingButton(EventPlayer(), Button.SecondaryFire);
	LoopIfConditionIsTrue();
}

rule: "Team 2 D.Va: Boosters"
Event.OngoingPlayer
Team.Team2
Player.Dva
if (pIsTargetInLos >= 5)
if (pIsAggressive)
if (!IsInAlternateForm(EventPlayer()))
if (DistanceBetween(EventPlayer(), pMyTarget) >= 7.5)
if (DistanceBetween(EventPlayer(), pMyTarget) <= 25)
if (IsInViewAngle(EventPlayer(), pMyTarget, 5))
{
	PressButton(EventPlayer(), Button.Ability1);
	pIsPathfindingDisabled = true;
	WaitUntil(
		!EventPlayer().IsUsingAbility1()
		|| DistanceBetween(EventPlayer(), pMyTarget) < 1,
		3
	);
	PressButton(EventPlayer(), Button.Ability1);
	pIsPathfindingDisabled = false;
	pIsNavReachableNode = false;
	Wait(5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 D.Va: Self-Destruct"
Event.OngoingPlayer
Team.Team2
Player.Dva
if (pIsTargetInLos >= 5)
if (!pAbVar1)
if (gWaveNumber >= 15)
if (!IsInAlternateForm(EventPlayer()))
if (NormalizedHealth(EventPlayer()) <= 0.8)
if (EventPlayer().Health() > 1)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 30);
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) >= 15);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	if (IsUsingUltimate(EventPlayer()))
	{
		pAbVar1 = true;
		Wait(3.5, WaitBehavior.IgnoreCondition);
		pAbVar2 = true;
	}
	else
	{
		Loop();
	}
}

rule: "Team 2 D.Va: Boss Self-Destruct"
Event.OngoingPlayer
Team.Team2
Player.Dva
if (pIsLivingBoss)
if (!pAbVar1)
if (!IsInAlternateForm(EventPlayer()))
if (EventPlayer().Health() < 1)
{
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	AbortIf(!IsUsingUltimate(EventPlayer()));
	pAbVar1 = true;
	Wait(3.5, WaitBehavior.IgnoreCondition);
	pAbVar2 = true;
}

rule: "Team 2 D.Va: Allow Call Mech"
Event.OngoingPlayer
Team.Team2
Player.Dva
if (pIsAlive)
if (IsInAlternateForm(EventPlayer()))
if (!pAbVar2)
{
	Wait(pIsLivingBoss ? 25 : 10, WaitBehavior.AbortWhenFalse);
	AbortIfConditionIsFalse();
	pAbVar2 = true;
}

rule: "Team 2 D.Va: Call Mech"
Event.OngoingPlayer
Team.Team2
Player.Dva
if (pIsAlive)
if (IsInAlternateForm(EventPlayer()))
if (pAbVar2)
if (!HasStatus(EventPlayer(), Status.Hacked))
if (!HasStatus(EventPlayer(), Status.Stunned))
if (IsOnGround(EventPlayer()))
{
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	pAbVar2 = false;
}

rule: "Team 2 D.Va: Set / Unset Is aggressive"
Event.OngoingPlayer
Team.Team2
Player.Dva
if (!pIsUsingBossAggression)
if ((pIsAlive && IsInAlternateForm(EventPlayer())) == pIsAggressive)
{
	pIsAggressive = !pIsAggressive;
	MinWait();
	LoopIfConditionIsTrue();
}

rule: "Team 2 Orisa: Start / Stop Shooting"
Event.OngoingPlayer
Team.Team2
Player.Orisa
if (pIsTargetInLos >= 3)
{
	if (RandomInteger(1, 100) > 60)
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
		Wait(0.5, WaitBehavior.IgnoreCondition);
	}
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	WaitUntil(pIsTargetInLos < 3, 99999);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
}

rule: "Team 2 Orisa: Decrease / Normalize Move Speed while shooting on ground"
Event.OngoingPlayer
Team.Team2
Player.Orisa
if (EventPlayer().IsButtonHeld(Button.PrimaryFire))
if (IsOnGround(EventPlayer()))
{
	SetMoveSpeed(EventPlayer(), gMutAmpted ? 57.5 : 50);
	WaitUntil(
		!(
			EventPlayer().IsButtonHeld(Button.PrimaryFire)
				&& IsOnGround(EventPlayer())
		),
		99999
	);
	SetMoveSpeed(EventPlayer(), gMutAmpted ? 115 : 100);
}

rule: "Team 2 Orisa: Javelin"
Event.OngoingPlayer
Team.Team2
Player.Orisa
if (pIsTargetInLos >= 5)
if (DistanceBetween(EventPlayer(), pMyTarget) <= 15)
if (IsInViewAngle(EventPlayer(), pMyTarget, 5))
{
	PressButton(EventPlayer(), Button.SecondaryFire);
	Wait(15, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Orisa: Fortify"
Event.OngoingPlayer
Team.Team2
Player.Orisa
if (SlotOf(EventPlayer()) != 1 || gObjectivePhaseNumber == 1)
if (!EventPlayer().IsUsingAbility1())
if (NormalizedHealth(EventPlayer()) <= (gGmutFortified ? 0.6 : 0.4))
{
	PressButton(EventPlayer(), Button.Ability1);
	Wait(15, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Orisa: Javelin Spin"
Event.OngoingPlayer
Team.Team2
Player.Orisa
if (pIsTargetInLos)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 20);
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) > 20);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(12, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Orisa: Terra-Surge"
Event.OngoingPlayer
Team.Team2
Player.Orisa
if (pIsTargetInLos)
if (gWaveNumber >= 10 || pIsLivingBoss)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 20);
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) > 20);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(20, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Roadhog: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Roadhog
if (pIsTargetInLos >= 4)
if (!EventPlayer().IsUsingAbility1())
{
	wait_until_aiming_at();
	AbortIfConditionIsFalse();
	if (DistanceBetween(EventPlayer(), pMyTarget) > 9)
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
	}
	else
	{
		PressButton(EventPlayer(), Button.PrimaryFire);
	}
	WaitUntil(EventPlayer().IsUsingAbility1(), RandomReal(2, 2.4));
	LoopIfConditionIsTrue();
}

rule: "Team 2 Roadhog: Chain Hook"
Event.OngoingPlayer
Team.Team2
Player.Roadhog
if (pIsTargetInLos >= 4)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > (pMyTarget.pIsFlying ? 80 : 40));
	LoopIf(!Ammo(EventPlayer(), false));
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) >= 20);
	PressButton(EventPlayer(), Button.Ability1);
	Wait(8, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Roadhog: Whole Hog"
Event.OngoingPlayer
Team.Team2
Player.Roadhog
if (pIsTargetInLos >= 5)
if (gWaveNumber >= 11 || pIsLivingBoss)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 20);
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) >= 5);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(28, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Roadhog: Whole Hog Shoot"
Event.OngoingPlayer
Team.Team2
Player.Roadhog
if (IsUsingUltimate(EventPlayer()))
{
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	Wait(RandomReal(0.7, 1.1), WaitBehavior.IgnoreCondition);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Tracer: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Tracer
if (pIsTargetInLos >= 4)
{
	wait_until_aiming_at();
	AbortIfConditionIsFalse();
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	Wait(0.45, WaitBehavior.IgnoreCondition);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
	if (Ammo(EventPlayer(), false) <= 5)
	{
		PressButton(EventPlayer(), Button.Reload);
	}
	Wait(RandomReal(0.4, 0.6), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Tracer: Blink"
Event.OngoingPlayer
Team.Team2
Player.Tracer
if (pIsAggressive)
if (pIsTargetInLos >= 4)
if (DistanceBetween(EventPlayer(), pMyTarget) <= 5)
if (AbsoluteValue(HorizontalAngleTowards(pMyTarget, EventPlayer())) <= 45)
{
	if (!gIsLoadLimitReached && AbilityCharge(EventPlayer(), Button.Ability1))
	{
		gTemp1 = RayCastHitPosition(
			EventPlayer().EyePosition(),
			EventPlayer().EyePosition() + 7.5 * WorldVectorOf(
				ThrottleOf(EventPlayer()) == Vector(false, false, false)
					? Forward()
					: ThrottleOf(EventPlayer()),
				EventPlayer(),
				LocalVector.Rotation
			),
			null,
			null,
			false
		);
		if (
			DistanceBetween(
				gTemp1,
				RayCastHitPosition(
					gTemp1,
					gTemp1 + 5 * Down(),
					null,
					null,
					false
				)
			) < 5
		)
		{
			PressButton(EventPlayer(), Button.Ability1);
		}
	}
	Wait(1, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Tracer: Recall to enemy on high ground"
Event.OngoingPlayer
Team.Team2
Player.Tracer
if (pIsTargetInLos)
if (pIsAggressive)
if (pRecallBlockEndT < TotalTimeElapsed())
if (!pMyTarget.pIsFlying)
if (DistanceBetween(EventPlayer(), pMyTarget) <= 20)
if (PositionOf(pMyTarget).Y - EventPlayer().Position().Y >= 3)
{
	SetAbilityCooldown(EventPlayer(), Button.Ability2, false);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(0.8, WaitBehavior.IgnoreCondition);
	if (EventPlayer().IsUsingAbility2() && pIsTargetInLos)
	{
		Teleport(
			EventPlayer(),
			RayCastHitPosition(
				EyePosition(pMyTarget),
				PositionOf(pMyTarget) - 2.5 * DirectionFromAngles(
					HorizontalFacingAngleOf(pMyTarget),
					false
				),
				null,
				null,
				false
			) + 0.5 * DirectionFromAngles(
				HorizontalFacingAngleOf(pMyTarget),
				false
			)
		);
		pIsNavReachableNode = false;
		Wait(15, WaitBehavior.IgnoreCondition);
	}
	Wait(5, WaitBehavior.IgnoreCondition);
}

rule: "Team 2 Tracer: Pulse Bomb, Has Used Pulse Bomb (1)"
Event.OngoingPlayer
Team.Team2
Player.Tracer
if (pIsTargetInLos)
if (pIsAggressive)
if (!pAbVar1)
if (NormalizedHealth(EventPlayer()) <= 0.4)
if (!HasStatus(EventPlayer(), Status.Hacked))
if (!HasStatus(EventPlayer(), Status.Stunned))
{
	pAbVar1 = true;
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(0.16, WaitBehavior.IgnoreCondition);
	CancelPrimaryAction(EventPlayer());
	if (pIsLivingBoss)
	{
		SetAbilityCharge(EventPlayer(), Button.Ability1, 3);
		PressButton(EventPlayer(), Button.Ability1);
		SetUltimateCharge(EventPlayer(), 100);
		PressButton(EventPlayer(), Button.Ultimate);
		Wait(0.192, WaitBehavior.IgnoreCondition);
		CancelPrimaryAction(EventPlayer());
		PressButton(EventPlayer(), Button.Ability1);
		SetUltimateCharge(EventPlayer(), 100);
		PressButton(EventPlayer(), Button.Ultimate);
		Wait(0.16, WaitBehavior.IgnoreCondition);
		CancelPrimaryAction(EventPlayer());
	}
	AbortIf(pRecallBlockEndT >= TotalTimeElapsed());
	SetAbilityCooldown(EventPlayer(), Button.Ability2, false);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(0.8, WaitBehavior.IgnoreCondition);
	AbortIf(!(EventPlayer().IsUsingAbility2() && pIsTargetInLos));
	Teleport(
		EventPlayer(),
		RayCastHitPosition(
			EyePosition(pMyTarget),
			PositionOf(pMyTarget) - 2.5 * DirectionFromAngles(
				HorizontalFacingAngleOf(pMyTarget),
				false
			),
			null,
			null,
			false
		) + 0.5 * DirectionFromAngles(
			HorizontalFacingAngleOf(pMyTarget),
			false
		)
	);
	pIsNavReachableNode = false;
	Wait(2.8, WaitBehavior.IgnoreCondition);
}

rule: "Team 2 Genji: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Genji
if (pIsTargetInLos >= 4)
if (
	!IsUsingUltimate(EventPlayer())
	|| DistanceBetween(EventPlayer(), pMyTarget) <= 5
)
{
	if (
		DistanceBetween(EventPlayer(), pMyTarget) > 4
		|| IsUsingUltimate(EventPlayer())
	)
	{
		PressButton(EventPlayer(), Button.PrimaryFire);
	}
	else
	{
		PressButton(EventPlayer(), Button.SecondaryFire);
	}
	Wait(1, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Genji: Jump"
Event.OngoingPlayer
Team.Team2
Player.Genji
if (pIsUsingCombatPathfinding)
if (!pMyTarget.pIsFlying)
if (IsOnGround(EventPlayer()))
{
	PressButton(EventPlayer(), Button.Jump);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	PressButton(EventPlayer(), Button.Jump);
	Wait(RandomReal(0.8, 1.2), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Genji: Swift Strike"
Event.OngoingPlayer
Team.Team2
Player.Genji
if (pIsTargetInLos >= 4)
if (pIsAggressive)
if (DistanceBetween(EventPlayer(), pMyTarget) <= 15)
if (AbsoluteValue(HorizontalAngleTowards(EventPlayer(), pMyTarget)) <= 5)
if (!EventPlayer().IsUsingAbility2())
{
	if (!gIsLoadLimitReached)
	{
		gTemp1 = RayCastHitPosition(
			EventPlayer().EyePosition(),
			EventPlayer().EyePosition() + 15 * EventPlayer().FacingDirection(),
			null,
			null,
			false
		);
		if (
			DistanceBetween(
				gTemp1,
				RayCastHitPosition(
					gTemp1,
					gTemp1 + 20 * Down(),
					null,
					null,
					false
				)
			) < 20
		)
		{
			PressButton(EventPlayer(), Button.Ability1);
			Wait(2, WaitBehavior.IgnoreCondition);
		}
	}
	Wait(2, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Genji: Deflect"
Event.OnDamageTaken
Team.Team2
Player.Genji
{
	AbortIf(IsUsingUltimate(EventPlayer()));
	AbortIf(RandomInteger(1, 100) > 30);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(8, WaitBehavior.IgnoreCondition);
}

rule: "Team 2 Genji: Dragonblade"
Event.OngoingPlayer
Team.Team2
Player.Genji
if (pIsAlive)
if (NormalizedHealth(EventPlayer()) <= 0.5)
if (!IsUsingUltimate(EventPlayer()))
{
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Hanzo: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Hanzo
if (pIsTargetInLos >= 4)
{
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	Wait(0.8, WaitBehavior.IgnoreCondition);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
	Wait(0.3, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Hanzo: Lunge"
Event.OnDamageTaken
Team.Team2
Player.Hanzo
{
	AbortIf(gIsLoadLimitReached);
	AbortIf(!pIsUsingCombatPathfinding);
	AbortIf(RandomInteger(1, 100) > 50);
	PressButton(EventPlayer(), Button.Jump);
	Wait(0.4, WaitBehavior.IgnoreCondition);
	gTemp1 = RayCastHitPosition(
		EventPlayer().EyePosition(),
		EventPlayer().EyePosition() + 7.85 * WorldVectorOf(
			ThrottleOf(EventPlayer()) == Vector(false, false, false)
				? Forward()
				: ThrottleOf(EventPlayer()),
			EventPlayer(),
			LocalVector.Rotation
		),
		null,
		null,
		false
	);
	if (
		DistanceBetween(
			gTemp1,
			RayCastHitPosition(
				gTemp1,
				gTemp1 + 5 * Down(),
				null,
				null,
				false
			)
		) < 5
	)
	{
		PressButton(EventPlayer(), Button.Jump);
		Wait(5.5, WaitBehavior.IgnoreCondition);
	}
	else
	{
		Wait(2, WaitBehavior.IgnoreCondition);
	}
}

rule: "Team 2 Hanzo: Storm Arrows"
Event.OngoingPlayer
Team.Team2
Player.Hanzo
if (pIsTargetInLos)
if (NormalizedHealth(EventPlayer()) <= 0.5)
if (!EventPlayer().IsUsingAbility2())
{
	PressButton(EventPlayer(), Button.Ability2);
	Wait(0.5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Hanzo: Dragonstrike"
Event.OngoingPlayer
Team.Team2
Player.Hanzo
if (pIsAlive)
if (pIsTargetInLos == 0)
if (pFearEndT < TotalTimeElapsed())
if (DistanceBetween(EventPlayer(), pMyTarget) >= 15)
{
	Wait(1, WaitBehavior.AbortWhenFalse);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	pFacingOverrideDirection = VectorTowards(EventPlayer(), pMyTarget);
	Wait(0.6, WaitBehavior.IgnoreCondition);
	pFacingOverrideDirection = VectorTowards(EventPlayer(), pMyTarget);
	Wait(0.4, WaitBehavior.IgnoreCondition);
	pFacingOverrideDirection = false;
	Wait(35, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Reinhardt: Disable Barrier Field after breaking"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (AbilityCooldown(EventPlayer(), Button.SecondaryFire) > 0)
{
	SetAbilityCooldown(EventPlayer(), Button.SecondaryFire, 1000);
}

rule: "Team 2 Reinhardt: Hold / Drop Shield if Target and Distance to Target >= 5m"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (pIsTargetInLos)
if (DistanceBetween(EventPlayer(), pMyTarget) >= 5)
# Reinhardt won't automatically raise his shield again after charging or being hacked
if (!EventPlayer().IsUsingAbility1())
if (!HasStatus(EventPlayer(), Status.Hacked))
{
	StartHoldingButton(EventPlayer(), Button.SecondaryFire);
	WaitUntil(
		!(
			pIsTargetInLos
			&& DistanceBetween(EventPlayer(), pMyTarget) >= 5
			&& !EventPlayer().IsUsingAbility1()
			&& !HasStatus(EventPlayer(), Status.Hacked)
		),
		99999
	);
	StopHoldingButton(EventPlayer(), Button.SecondaryFire);
}

rule: "Team 2 Reinhardt: Start / Stop Attacking if Distance to Target < 5m"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (pIsTargetInLos)
if (DistanceBetween(EventPlayer(), pMyTarget) < 5)
{
	StartHoldingButton(EventPlayer(), Button.PrimaryFire);
	WaitUntil(
		!(
			pIsTargetInLos
			&& DistanceBetween(EventPlayer(), pMyTarget) < 5
		),
		99999
	);
	StopHoldingButton(EventPlayer(), Button.PrimaryFire);
}

rule: "Team 2 Reinhardt: Fire Strike"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (pIsTargetInLos >= 4)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 75);
	LoopIf(
		DistanceBetween(EventPlayer(), pMyTarget) <= 5
		|| DistanceBetween(EventPlayer(), pMyTarget) >= 25
	);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(5, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Reinhardt: Charge"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (pIsTargetInLos >= 5)
if (pIsAggressive)
if (pMyTarget.pLastHitByShatterT + 1 >= TotalTimeElapsed())
if (pMyTarget.pLastHitByShatterT + 0.4 < TotalTimeElapsed())
if (AbsoluteValue(HorizontalAngleTowards(EventPlayer(), pMyTarget)) <= 5)
{
	PressButton(EventPlayer(), Button.Ability1);
	Wait(6, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Reinhardt: Charge into battle (Mut: Lock 'n Load)"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (gMutLockNLoad)
if (pIsTargetInLos >= 4)
if (pIsAggressive)
if (DistanceBetween(EventPlayer(), pMyTarget) > 25)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	PressButton(EventPlayer(), Button.Ability1);
}

rule: "Team 2 Reinhardt: Earthshatter"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (pIsTargetInLos >= 5)
if (!pMyTarget.pIsFlying)
if (!EventPlayer().IsFiringSecondary())
{
	Wait(1, WaitBehavior.AbortWhenFalse);
	LoopIf(RandomInteger(1, 100) <= 100 * NormalizedHealth(EventPlayer()));
	LoopIf(
		DistanceBetween(EventPlayer(), pMyTarget) >= 18
		|| AbsoluteValue(HorizontalAngleTowards(EventPlayer(), pMyTarget)) >= 30
	);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(RandomInteger(7, 20), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sigma: Flux"
Event.OngoingPlayer
Team.Team2
Player.Sigma
if (pIsTargetInLos)
if (pIsLivingBoss || gWaveNumber >= 10)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 30);
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) >= 25);
	SetUltimateCharge(EventPlayer(), 100);
	PressButton(EventPlayer(), Button.Ultimate);
	Wait(1.75, WaitBehavior.AbortWhenFalse);
	while (IsUsingUltimate(EventPlayer()))
	{
		Wait(0.5, WaitBehavior.AbortWhenFalse);
		PressButton(EventPlayer(), Button.PrimaryFire);
	}
	Wait(28, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sigma: Shoot"
Event.OngoingPlayer
Team.Team2
Player.Sigma
if (pIsTargetInLos >= 4)
if (!EventPlayer().IsFiringSecondary())
if (!IsUsingUltimate(EventPlayer()))
{
	wait_until_aiming_at();
	AbortIfConditionIsFalse();
	PressButton(EventPlayer(), Button.PrimaryFire);
	Wait(RandomReal(0.9, 1.5), WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sigma: Barrier"
Event.OngoingPlayer
Team.Team2
Player.Sigma
if (pIsTargetInLos >= 4)
if (!EventPlayer().IsUsingAbility1())
if (!EventPlayer().IsUsingAbility2())
if (!IsUsingUltimate(EventPlayer()))
{
	if (DistanceBetween(pMyTarget, EventPlayer()) <= 30)
	{
		StartHoldingButton(EventPlayer(), Button.SecondaryFire);
		Wait(RandomReal(0.2, 2), WaitBehavior.IgnoreCondition);
		StopHoldingButton(EventPlayer(), Button.SecondaryFire);
	}
	Wait(4, WaitBehavior.AbortWhenFalse);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sigma: Grasp"
Event.OngoingPlayer
Team.Team2
Player.Sigma
if (pIsTargetInLos >= 4)
if (!EventPlayer().IsFiringSecondary())
if (!EventPlayer().IsUsingAbility2())
{
	Wait(10, WaitBehavior.IgnoreCondition);
	PressButton(EventPlayer(), Button.Ability1);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Sigma: Rock"
Event.OngoingPlayer
Team.Team2
Player.Sigma
if (gMutLockNLoad)
if (pIsTargetInLos >= 4)
if (!EventPlayer().IsFiringSecondary())
if (!EventPlayer().IsUsingAbility1())
{
	PressButton(EventPlayer(), Button.Ability2);
	Wait(10, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "Team 2 Boss Aggro: Set / Unset Is aggressive"
Event.OngoingPlayer
Team.Team2
if (pIsUsingBossAggression)
if (pIsAggressive != pIsTargetInLos == 5)
{
	Wait(3, WaitBehavior.AbortWhenFalse);
	AbortIfConditionIsFalse();
	pIsAggressive = !pIsAggressive;
	MinWait();
	LoopIfConditionIsTrue();
}

rule: "Team 2 Boss Aggro: Set Is aggressive after losing 20% health since Boss last time aggressive"
Event.OngoingPlayer
Team.Team2
if (pIsUsingBossAggression)
if (pIsAlive)
if (!pIsAggressive)
{
	Number aggression_health_threshold = NormalizedHealth(EventPlayer()) - 0.2;
	WaitUntil(
		NormalizedHealth(EventPlayer()) < aggression_health_threshold
		|| pIsAggressive
		|| !pIsLivingBoss,
		99999
	);
	AbortIf(pIsAggressive || !pIsLivingBoss);
	pIsUsingBossAggression = false;
	pIsAggressive = true;
	WaitUntil(pIsTargetInLos || !pIsLivingBoss, 99999);
	AbortIf(!pIsLivingBoss);
	pIsUsingBossAggression = true;
}

rule: "Team 2 Boss Aggro: Disengage after killing Player"
Event.OnElimination
Team.Team2
if (pIsUsingBossAggression)
{
	pIsAggressive = false;
}

rule: "MUT Team 2 (Mutator) Cassidy: Fully Loaded, Magnade"
Event.OngoingPlayer
Team.Team2
Player.Cassidy
if (pIsLivingBoss || gMutFullyLoaded)
if (gWaveNumber >= 4)
if (pIsTargetInLos >= 4)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 40);
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) >= 8);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(10, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "MUT Team 2 Echo (Mutator): Fully Loaded, Focusing Beam"
Event.OngoingPlayer
Team.Team2
Player.Echo
if (gMutFullyLoaded)
if (pIsTargetInLos >= 4)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(NormalizedHealth(pMyTarget) > 0.5);
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) >= 15);
	PressButton(EventPlayer(), Button.Ability2);
	Wait(10, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "MUT Team 2 (Mutator) Team 2 Ana: Fully Loaded, Sleep Dart"
Event.OngoingPlayer
Team.Team2
Player.Ana
if (gMutFullyLoaded)
if (pIsTargetInLos >= 4)
{
	Wait(2, WaitBehavior.IgnoreCondition);
	AbortIfConditionIsFalse();
	LoopIf(RandomInteger(1, 100) > 40);
	LoopIf(DistanceBetween(EventPlayer(), pMyTarget) >= 10);
	PressButton(EventPlayer(), Button.Ability1);
	Wait(13, WaitBehavior.IgnoreCondition);
	LoopIfConditionIsTrue();
}

rule: "MUT Team 2 Pharah (Mutator): Fully Loaded, Concussive Blast"
Event.OngoingPlayer
Team.Team2
Player.Pharah
if (gMutFullyLoaded)
if (pIsTargetInLos)
if (!EventPlayer().IsUsingAbility1())
{
	Wait(1, WaitBehavior.AbortWhenFalse);
	PressButton(EventPlayer(), Button.Ability2);
}
